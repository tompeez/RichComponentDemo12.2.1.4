<?xml version="1.0" encoding="utf-8"?><faces-config xmlns="http://java.sun.com/xml/ns/javaee" xmlns:tr="http://myfaces.apache.org/trinidad" xmlns:trh="http://myfaces.apache.org/trinidad/html" xmlns:fmd="http://java.sun.com/xml/ns/javaee/faces/design-time-metadata" xmlns:mfp="http://myfaces.apache.org/maven-faces-plugin" xmlns:mafp="http://xmlns.oracle.com/maven-adf-faces-plugin" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cpf="http://xmlns.oracle.com/adf/faces/rich/cpf" xmlns:af="http://xmlns.oracle.com/adf/faces/rich" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd" version="1.2">
   <application>
      <el-resolver>oracle.adfinternal.view.faces.el.RichELResolver</el-resolver>
   </application>
   <factory>
      <lifecycle-factory>oracle.adfinternal.view.faces.lifecycle.LifecycleFactoryImpl</lifecycle-factory>
      <render-kit-factory>oracle.adfinternal.view.faces.unified.renderkit.UnifiedRenderKitFactory</render-kit-factory>
   </factory>
   <component>
      <description>The inputNumberSpinbox tag creates a browser input widget;
it is used to enter numbers and it has a spinbox to quickly increment or decrement the number.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputNumberSpinbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputNumberSpinbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputNumberSpinbox</component-class><!--oracle.adf.RichInputNumberSpinbox facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputNumberSpinbox properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the size of the text control specified by the number of characters shown.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the maximum number allowed in the input field.</description>
         <property-name>maximum</property-name>
         <property-class>java.lang.Number</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the minimum number allowed in the input field.</description>
         <property-name>minimum</property-name>
         <property-class>java.lang.Number</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the step size by which the spinbox will increase or decrease the number in the input.</description>
         <property-name>stepSize</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.NumberSpinbox</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
A dynamic declarative component.

    </description>
      <component-type>oracle.adf.RichDynamicDeclarativeComponent</component-type>
      <component-class>
      oracle.adf.view.rich.component.rich.fragment.RichDynamicDeclarativeComponent
    </component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The view ID to include. This attribute should not be set on the component, but
      should be set using the JSP tag.</description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.DynamicDeclarativeComponent properties-->
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <property-metadata>
               <literal-only>true</literal-only>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <required>false</required>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichDynamicDeclarativeComponent properties-->
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.DeclarativeComponent</component-family>
         <renderer-type>oracle.adf.rich.DynamicDeclarativeComponent</renderer-type>
         <naming-container>true</naming-container>
         <tag-handler>oracle.adfinternal.view.faces.facelets.rich.IncludeHandler</tag-handler>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A component which allows the end user to select multiple valuesfrom a list of
                 available options.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectManyCheckbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectManyCheckbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectManyCheckbox</component-class><!--oracle.adf.RichSelectManyCheckbox facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectManyCheckbox properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" will set the label to "Text" and the access key to 'e'.</description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control displays the buttons 
              horizontally or vertically. The default is "vertical".</description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>vertical</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectMany</component-family>
         <renderer-type>oracle.adf.rich.Checkbox</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The subform tag represents an independently submittable
region of a page.  The contents of a subform will only be validated
(or otherwise processed) if a component inside of the subform is
responsible for submitting the page.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/subform.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSubform</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichSubform</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Subform properties-->
      <property>
         <description>whether the subform was submitted on this request</description>
         <property-name>submitted</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>yes</transient>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the subform should assume it
has been submitted.  When set to "true", "submitted" will be
considered true if no other subform has been submitted.
      </description>
         <property-name>default</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichSubform properties-->
      <property>
         <description>the client id of the command component inside the subform whose action should be invoked by default, when the enter key is pressed with focus inside the subform. This attribute overrides the defaultCommand set on form.
         
         &lt;p&gt;Identifiers are relative to the subform component, and must account for NamingContainers. 
       You can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container and begin the search from there, 
        ":::" will pop out of two naming containers
        and begin the search from there, etc.&lt;/p&gt;
         
         
         </description>
         <property-name>defaultCommand</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Subform</component-family>
         <renderer-type>oracle.adf.rich.Subform</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>propertyChange </client-event-types><trigger-event-types>propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The chooseDate component is used in conjunction with a inputDate to allow the user to quickly select a date value without having to navigate to a secondary window.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/chooseDate.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichChooseDate</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichChooseDate</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichChooseDate properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum value allowed for the Date value. When set to a 
        fixed value on a tag, this will be parsed as an ISO 8601 date. 
        ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's 
        timezone, with the time components (hours, minutes, seconds, milliseconds) maximized. 
        All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with
maximum value for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds)
to allow the largest range of values to be accepted.
      </description>
         <property-name>maxValue</property-name>
         <property-class>java.util.Date</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the minimum value allowed for the Date value. When set to a 
        fixed value on a tag, this will be parsed as an ISO 8601 date. 
        ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's
        timezone, with the time components (hous, minutes, seconds, milliseconds) zeroed-out. 
        All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with zeroed-out
values for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds)
to allow the largest range of values to be accepted.
      </description>
         <property-name>minValue</property-name>
         <property-class>java.util.Date</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a binding to an implementation of the
         org.apache.myfaces.trinidad.model.DateListProvider interface. The
         getDateList method should generate a List of individual java.util.Date
         objects which will be rendered as disabled. The Dates must be in the
         context of the given base Calendar. Note: this binding requires
         periodic roundtrips. If you just want to disable certain weekdays
         (e.g. Saturday and Sunday), use the disabledDaysOfWeek attribute! 
      </description>
         <property-name>disabledDays</property-name>
         <property-class>org.apache.myfaces.trinidad.model.DateListProvider</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a whitespace delimited list of weekdays that should be
        rendered as disabled in every week. The list should consist of one or
        more of the following abbreviations: sun, mon, tue, wed, thu, fri, sat.
        By default all days are enabled.
      </description>
         <property-name>disabledDaysOfWeek</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a whitespace delimited list of months that should be rendered
        as disabled in every year. The list should consist of one or more of
        the following abbreviations: jan, feb, mar, apr, may, jun, jul, aug,
        sep, oct, nov, dec. By default all months are enabled.
      </description>
         <property-name>disabledMonths</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Choose</component-family>
         <renderer-type>oracle.adf.rich.Date</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The document tag creates each of the standard root elements of an HTML page:  &amp;lt;html&amp;gt;, &amp;lt;body&amp;gt;, and &amp;lt;head&amp;gt;. Only one document component per page is allowed.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/document.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichDocument</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichDocument</component-class><!--oracle.adf.RichDocument facets-->
      <facet>
         <description>Content to be rendered as meta data inside the "head" section.</description>
         <facet-name>metaContainer</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichDocument properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The component style theme to apply to this component.
      Themes are cascaded down through all child components. All HTML elements that
      are rendered by a rich component within a themed component will have the theme
      added to its list of style classes. Themes are not compatible with tonal styles
      and therefore only one method can be used per page (themes or tonal styles). 
      A blank theme will remove the current theme, and a value of "inherit", 
      null or not setting a theme will use the current theme.
      Skins are the sources of the the themes. Some skins may have no themed definitions. 
      Suggested theme names include "dark", "medium", "light", and "default".
      </description>
         <property-name>theme</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the title of the document.  (This title doesn't have to match the
            title on any contained panelPage.)
      </description>
         <property-name>title</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Title {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an onunload Javascript handler.</description>
         <property-name>onunload</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>EVENTS</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id of the component that you want to have focus when the full
      page renders. Note that if you are setting the initialFocusId to a component that is not 
      normally available when rendered on the client, then you will also need to set the 
      clientComponent attribute on that component to 'true'. Also, be aware that initialFocusId 
      will be ignored when accessibility-mode is set to "screenReader". This is because there may be 
      interesting content at the beginning of the page, like text content or a header.
      &lt;p&gt;
      Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container and begin the search from there, 
        ":::" will pop out of two naming containers
        and begin the search from there, etc.&lt;/p&gt;
      </description>
         <property-name>initialFocusId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
               <unsupported-agents>pda phone voice</unsupported-agents>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the text that is displayed in an alert message when the XMLHttpRequest data transfer fails.When this is not set, we log a default message to the client-side error console.
      </description>
         <property-name>failedConnectionText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to "true" (the default) will cause the page's outer-most margin and padding collapse to 0px.  If the document is set to be maximized and if there is only a single effective visual root component, that component will stretch automatically to consume the browser's viewable area--if supported by that component.  Examples of components that support this are panelStretchLayout and panelSplitter.  As a convenience, the effective visual root component detection will also look inside the form component if it is a direct child of the document component and it will not count popups nor non-inline messages as visual root components.
     </description>
         <property-name>maximized</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Specifies whether users should be warned about uncommitted data when navigating off the page or region. The default value is 'off' (warnings disabled). Setting this property to 'on' will enable the warnings.
     </description>
         <property-name>uncommittedDataWarning</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>off</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>on off</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Document</component-family>
         <renderer-type>oracle.adf.rich.Document</renderer-type>
         <tag-handler>oracle.adfinternal.view.faces.facelets.rich.RichDocumentHandler</tag-handler>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange load </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange load </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>title</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichForm</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelFormLayout positions input form controls, such that their labels and fields 
    line up vertically. It supports multiple columns, and also supports a footer facet.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelForm.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelFormLayout</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelFormLayout</component-class><!--oracle.adf.RichPanelFormLayout facets-->
      <facet>
         <description>This facet is rendered under the columns and usually contains an af:group when you want to have more than a single item in the footer.
             &lt;p&gt;
This facet may not always line up perfectly, particularly if the labels or fields used in the panelFormLayout are longer than what you have allocated for them.  Adjust the allocations you have with the labelWidth and fieldWidth attributes when necessary.  Remember that labelWidth and fieldWidth must use the same units.  Also, the columns attribute on inputText may be helpful to reduce the amount of space that it consumes.
             &lt;/p&gt;
      </description>
         <facet-name>footer</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelFormLayout properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The preferred width of the fields.  The web browser may override this dimension if it cannot fit the fields in the space allocated.  You may define the fieldWidth using any CSS unit such as em, px, or %.  The units used for this value must be identical to the units used in the labelWidth value.  If a fieldWidth is provided as a percentage the labelWidth and the fieldWidth should total up to 100% (regardless of the number of columns).  If the fieldWidth is not specified, the browser will let the children components have a natural flowing layout which may mean that the footer facet contents do not line up with the main form items.  However, if the fieldWidth is not specified but a labelWidth is specified as a percentage, the fieldWidth will be derived as the appropriate percentage value for you.  Note that if you are using a percentage value, multiple columns, and a footer, you may see a slight offset between the positioning of the main form items and the footer items in some web browsers if that browser does not honor fractional divisions of percentages.  To minimize this effect, it is recommended that a percentage labelWidth be evenly divisible by the number of columns.</description>
         <property-name>fieldWidth</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The preferred width of the labels.  The web browser may override this dimension if it cannot fit the labels in the space allocated.  You may define the labelWidth using any CSS unit such as em, px, or %.  The units used for this value must be identical to the units used in the fieldWidth value.  If a labelWidth is provided as a percentage the labelWidth and the fieldWidth should total up to 100% (regardless of the number of columns).  If the labelWidth is not specified, the browser will let the children components have a natural flowing layout which may mean that the footer facet contents do not line up with the main form items.  However, if the labelWidth is not specified but a fieldWidth is specified as a percentage, the labelWidth will be derived as the appropriate percentage value for you.  Note that if you are using a percentage value, multiple columns, and a footer, you may see a slight offset between the positioning of the main form items and the footer items in some web browsers if that browser does not honor fractional divisions of percentages.  To minimize this effect, it is recommended that a percentage labelWidth be evenly divisible by the number of columns.</description>
         <property-name>labelWidth</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of columns to show.  This attribute defaults to 3 and 2 on PDAs.  If this panelFormLayout is inside of another panelFormLayout, this will always be 1.</description>
         <property-name>maxColumns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the number of rows after which to start a new column.  This attribute defaults to Integer.MAX_VALUE.  The number of rows actually rendered depends also on the "maxColumns" property.  If the children will not fit in the given number of rows and columns, the number of rows will increase to accomodate the children.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>2147483647</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;the alignment of label prompts for the form items. &lt;/html&gt;
      </description>
         <property-name>labelAlignment</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>start top</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.FormLayout</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>rows</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichCommandButton oracle.adf.RichCommandLink oracle.adf.RichGoButton oracle.adf.RichGoLink org.apache.myfaces.trinidad.Group oracle.adf.RichInputColor oracle.adf.RichInputComboboxListOfValues oracle.adf.RichInputDate oracle.adf.RichInputFile oracle.adf.RichInputListOfValues oracle.adf.RichInputText oracle.adf.RichPanelFormLayout oracle.adf.RichPanelGroupLayout oracle.adf.RichPanelLabelAndMessage oracle.adf.RichTextEditor oracle.adf.RichSelectBooleanCheckbox oracle.adf.RichSelectBooleanRadio oracle.adf.RichSelectManyCheckbox oracle.adf.RichSelectManyChoice oracle.adf.RichSelectManyListbox oracle.adf.RichSelectManyShuttle oracle.adf.RichSelectOneChoice oracle.adf.RichSelectOneListbox oracle.adf.RichSelectOneRadio oracle.adf.RichSelectOrderShuttle</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Use this to divide a region into two parts with a repositionable divider.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelSplitter.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelSplitter</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelSplitter</component-class><!--oracle.adf.RichPanelSplitter facets-->
      <facet>
         <description>The first pane of this splitter</description>
         <facet-name>first</facet-name>
         <facet-extension>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>The second pane of this splitter</description>
         <facet-name>second</facet-name>
         <facet-extension>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelSplitter properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to "true", the component becomes non-interactive.  Otherwise,the default value is "false" and component assumes its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a horizontal or vertical split is created.  The string literal value of "horizontal" indicates that the splitter panes will be side-by-side, and a string literal value of "vertical" indicates the panes will be on top of each other.
      </description>
         <property-name>orientation</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to "false" (the default), the initial position of the repositionable divider is measured from the start side (the top or start).If the value is "true", the initial position of the repositionable divider is measured from the end side (the bottom or end).
      </description>
         <property-name>positionedFromEnd</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the initial position of the repositionable divider. The panelSplitter separates two areas with a separator.
        The user may drag this separator to adjust how much space is allocated for each area.  This attribute specifies the number of
        pixels for the width or height (depending on the orientation) for one of the areas and the other area gets the remaining space.
        The positionedFromEnd attribute determines which area is sized and which area gets the remaining space.</description>
         <property-name>splitterPosition</property-name>
         <property-class>int</property-class>
         <default-value>200</default-value>
         <property-extension>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the splitter is in a collapsed state.  When the splitter is collapsed (collapsed="true") and the splitter is positioned from the beginning (positionedFromEnd="false"), the first pane is hidden such that the second pane stretches to fill all available space.  When the splitter is positioned from the end (positionedFromEnd="true"), collapsing the splitter hides the second pane.  By default collapse is "false", which means that both panes are displayed.</description>
         <property-name>collapsed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Specifies how you want borders to be displayed around the contents of the "first" facet.  The "first"
        facet contents will have a border surrounding it if either this value is set to "all" or if set to "skin" and the active
        skin's "-tr-first-border" property is set "all".  The "first" facet contents will not have a border surrounding it if
        either this value is set to "none" or if set to "skin" and the active skin's "-tr-first-border" property is set "none".
        The default value is "skin".  It is important to note that this attribute (just like inlineStyle) can easily be abused.
        More times than not, you should not use this attribute because by using it, you are likely optimizing your page design
        for a specific skin.  You should only force the borders on or off for cases where the contents of the pane would either
        provide enough or not enough delineation among the 2 panes of your splitter.  For example, forcing borders off on a
        splitter that surrounds your entire page or forcing borders on for a pane that needs emphasis.  You may want to test your
        application in a variety of skins to see if your use of these kinds of styling attributes will prevent others from being
        able to display your application with custom skins.
      </description>
         <property-name>firstBorder</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>skin</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>skin all none</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Specifies how you want borders to be displayed around the contents of the "second" facet.  The "second"
        facet contents will have a border surrounding it if either this value is set to "all" or if set to "skin" and the active
        skin's "-tr-second-border" property is set "all".  The "second" facet contents will not have a border surrounding it if
        either this value is set to "none" or if set to "skin" and the active skin's "-tr-second-border" property is set "none".
        The default value is "skin".  It is important to note that this attribute (just like inlineStyle) can easily be abused.
        More times than not, you should not use this attribute because by using it, you are likely optimizing your page design
        for a specific skin.  You should only force the borders on or off for cases where the contents of the pane would either
        provide enough or not enough delineation among the 2 panes of your splitter.  For example, forcing borders off on a
        splitter that surrounds your entire page or forcing borders on for a pane that needs emphasis.  You may want to test your
        application in a variety of skins to see if your use of these kinds of styling attributes will prevent others from being
        able to display your application with custom skins.
      </description>
         <property-name>secondBorder</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>skin</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>skin all none</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the first facet.
      </description>
         <property-name>firstLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the second facet.
      </description>
         <property-name>secondLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Splitter</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:default-property>orientation</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Represents a MenuBar component.  Its children are menu and menu item components.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelMenuBar.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichMenuBar</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichMenuBar</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichMenuBar properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a non-negative integer that indicates the flexibility of this
component in its container.  If the container supports it (the toolbox component), flex
is used to determine how space is distributed among its children.
Components with larger flex values will be made larger than
components with lower flex values.  This is done so at the ratio
determined by the flex of each of the two components.  The actual
value is only relevant if there are other flexible components
(components with flex values larger than zero) within the same
container.
      </description>
         <property-name>flex</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id of a child component that will be given all of the available space left in the menuBar if the contents of the menuBar do not use all of the space that the menuBar has available</description>
         <property-name>stretchId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the menu bar should be disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.MenuBar</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>oracle.adf.RichMenu org.apache.myfaces.trinidad.Group oracle.adf.RichCommandMenuItem oracle.adf.RichGoMenuItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richmenuitem-holder oracle-adf-richmenu-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The activeCommandToolbarButton creates a button in a toolbar. It is normally used inside of a &lt;code&gt;&amp;lt;af:toolbar&amp;gt;&lt;/code&gt; component. activeCommandToolbarButtons are not rendered on printable pages. Due to performance overhead compared to &lt;code&gt;&amp;lt;af:commandToolbarButton&amp;gt;&lt;/code&gt;, you should only use this component if you plan to support changing the visible attribute through active data, otherwise you should use the &lt;code&gt;&amp;lt;af:commandToolbarButton&amp;gt;&lt;/code&gt; component.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandToolbarButton.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichActiveCommandToolbarButton</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichActiveCommandToolbarButton</component-class><!--oracle.adf.RichActiveCommandToolbarButton facets-->
      <facet>
         <description>The popup displayed by this toolbar button.</description>
         <facet-name>popup</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichActiveCommandToolbarButton properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the action should be done through a partial page submit
            or not.  The default is true for activeCommandToolBarButton, so be sure to specify partialTriggers if content needs to be updated.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the component is interactive or not.  The default value is "false" and component assumes its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
         
          &lt;html&gt;
            The URI of an image to be displayed on the toolbar button when the mouse has
            pressed the button. This attribute supports the same URI types described for the icon 
            attribute.
            &lt;br/&gt;&lt;br/&gt;
            &lt;strong&gt;
               As depressedIcon does not allow alternative text to be provided for the
               image, in order to create an accessible product depressedIcon must only be
               used when its use is purely decorative. 
            &lt;/strong&gt;
          &lt;/html&gt;
        </description>
         <property-name>depressedIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the toolbar button when the mouse is 
          hovering over the button. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As hoverIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product hoverIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>hoverIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          The URI of an image to be displayed on the toolbar button when the button is 
          disabled. This attribute supports the same URI types described for the icon attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As disabledIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product disabledIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>disabledIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          The URI of an image to be displayed on the toolbar button. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text displayed in the toolbar item.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
        an attribute that will simultaneously set both the "text"
        and "accessKey" attributes from a single value, using
        conventional ampersand ('&amp;amp;') notation.
        &lt;p&gt;
        For example, setting this attribute to "T&amp;amp;amp;ext" will
        set the text to "Text" and the access key to 'e'.
        &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the type of the toolbar button.</description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default check radio</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the item is selected, for buttons of type radio or check.
        For radio buttons, there is no server model implemented for handling mutual exclusivity. If
        a user clicks a new button, the old selection will be unselected. If you programatically
        call setSelected(true) from code, you must call setSelected(false) on the prior
        selection as well.
      </description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.ActiveToolbarButton</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:satisfied-contracts>oracle-adf-richmenu-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelStretchLayout component stretches the child
          in the center facet to fill all of available space.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelStretchLayout.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelStretchLayout</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelStretchLayout  </component-class><!--oracle.adf.RichPanelStretchLayout facets-->
      <facet>
         <description>Content to be stretched in the center of the
         layout.
      </description>
         <facet-name>center</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered above the center facet.
      If present and topHeight not specified, the height will be 50px.
      </description>
         <facet-name>top</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered below the center facet.
      If present and bottomHeight not specified, the height will be 50px.
      </description>
         <facet-name>bottom</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered before the center facet and
                between any top and bottom children. If present and startWidth
                not specified, the width will be 50px.
      </description>
         <facet-name>start</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered after the center facet and
                between any top and bottom children. If present and endWidth
                not specified, the width will be 50px.
      </description>
         <facet-name>end</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelStretchLayout properties-->
      <property>
         <description>the height of the top facet specified as a CSS length or auto such that this
                            facet will no longer be stretched and instead will consume the
                            initial offsetHeight given to its children by the browser.  It is important
                            to note that in an average page, a switch to a layout using automatic heights
                            exhibited a 10 percent degradation in initial layout speed in Internet
                            Explorer and a 5 percent degradation in Firefox.  Results will vary but it
                            is recommended that you use this sparingly in order to optimize your page.
                            Also an automatic height will cause the facet child to not be stretched both
                            vertically and horizontally.  If necessary, you can make that automatic
                            height child stretch horizontally by specifying a 100% width in the
                            inlineStyle of that child.  Note that many components such as the
                            panelGroupLayout with layout set to scroll or vertical will have their own
                            built-in stretched widths by default.
      </description>
         <property-name>topHeight</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>50px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the bottom facet specified as a CSS length or auto such that this
                            facet will no longer be stretched and instead will consume the
                            initial offsetHeight given to its children by the browser.  It is important
                            to note that in an average page, a switch to a layout using automatic heights
                            exhibited a 10 percent degradation in initial layout speed in Internet
                            Explorer and a 5 percent degradation in Firefox.  Results will vary but it
                            is recommended that you use this sparingly in order to optimize your page.
                            Also an automatic height will cause the facet child to not be stretched both
                            vertically and horizontally.  If necessary, you can make that automatic
                            height child stretch horizontally by specifying a 100% width in the
                            inlineStyle of that child.  Note that many components such as the
                            panelGroupLayout with layout set to scroll or vertical will have their own
                            built-in stretched widths by default.
      </description>
         <property-name>bottomHeight</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>50px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width of the start facet specified as a CSS length or auto such that this
                            facet will no longer be stretched and instead will consume the
                            initial offsetWidth given to its children by the browser.  It is important
                            to note that in an average page, a switch to a layout using automatic widths
                            exhibited a 10 percent degradation in initial layout speed in Internet
                            Explorer and a 5 percent degradation in Firefox.  Results will vary but it
                            is recommended that you use this sparingly in order to optimize your page.
                            Also an automatic width will cause the facet child to not be stretched both
                            vertically and horizontally.  Note that many components such as the
                            panelGroupLayout with layout set to scroll or vertical will have their own
                            built-in stretched widths by default which will then report an unstable
                            offsetWidth so these components cannot be used in conjunction with auto.
                            You may never use auto in conjunction with a child component that uses a
                            percentage length for its width.  The facet content cannot rely on
                            percentage widths or be any component that would naturally consume the entire
                            width of its surrounding container if you want auto to be effective.
                            Instead, the contents must use a stable, stand-alone width (not dependent
                            upon the width of its parent container) when auto is specified.
      </description>
         <property-name>startWidth</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>50px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width of the end facet specified as a CSS length or auto such that this
                            facet will no longer be stretched and instead will consume the
                            initial offsetWidth given to its children by the browser.  It is important
                            to note that in an average page, a switch to a layout using automatic widths
                            exhibited a 10 percent degradation in initial layout speed in Internet
                            Explorer and a 5 percent degradation in Firefox.  Results will vary but it
                            is recommended that you use this sparingly in order to optimize your page.
                            Also an automatic width will cause the facet child to not be stretched both
                            vertically and horizontally.  Note that many components such as the
                            panelGroupLayout with layout set to scroll or vertical will have their own
                            built-in stretched widths by default which will then report an unstable
                            offsetWidth so these components cannot be used in conjunction with auto.
                            You may never use auto in conjunction with a child component that uses a
                            percentage length for its width.  The facet content cannot rely on
                            percentage widths or be any component that would naturally consume the entire
                            width of its surrounding container if you want auto to be effective.
                            Instead, the contents must use a stable, stand-alone width (not dependent
                            upon the width of its parent container) when auto is specified.
      </description>
         <property-name>endWidth</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>50px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the top facet.
      </description>
         <property-name>topLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the start facet.
      </description>
         <property-name>startLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the center facet.
      </description>
         <property-name>centerLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the end facet.
      </description>
         <property-name>endLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the bottom facet.
      </description>
         <property-name>bottomLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The component style theme to apply to the children of this component.
      By default, this component is not styled for the different themes, but can be used to change
      the theme without associated skin changes that will 
      occur with af:document and af:decorativeBox.
      Themes are not compatible with tonal styles
      and therefore only one method can be used per page (themes or tonal styles). 
      A blank theme will remove the current theme, and a value of "inherit", 
      null or not setting a theme will use the current theme.
      Skins are the sources of the the themes. Some skins may have no themed definitions. 
      Suggested theme names include "dark", "medium", "light", and "default".
      </description>
         <property-name>theme</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.StretchLayout</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The commandToolbarButton control creates a toolbar button representation of a UIXCommand.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandToolbarButton.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandToolbarButton</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandToolbarButton</component-class><!--oracle.adf.RichCommandToolbarButton facets-->
      <facet>
         <description>The popup displayed by this toolbar button.</description>
         <facet-name>popup</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandToolbarButton properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        how the action events generated by this component should be delivered.
        If 'none' is used and there is a popup facet, the popup will be shown when the
        user clicks anywhere on the button, not just on the launch icon. 
        &lt;p&gt;A value of "clientServer" delivers the event normally&lt;/p&gt;
      </description>
         <property-name>actionDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>clientServer</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>clientServer none</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the action should be done through a partial page submit
            or not.  The default is true for commandToolBarButton, so be sure to specify partialTriggers if content needs to be updated.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to "true", the component becomes non-interactive.  Otherwise,the default value is "false" and component assumes its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the toolbar button when the mouse has
          pressed the button. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
             As depressedIcon does not allow alternative text to be provided for the
             image, in order to create an accessible product depressedIcon must only be
             used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>depressedIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the toolbar button when the mouse is 
          hovering over the button. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As hoverIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product hoverIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>hoverIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the toolbar button when the button is 
          disabled. This attribute supports the same URI types described for the icon attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As disabledIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product disabledIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>disabledIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the toolbar button. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text displayed in the toolbar item</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
        an attribute that will simultaneously set both the "text"
        and "accessKey" attributes from a single value, using
        conventional ampersand ('&amp;amp;') notation.
        &lt;p&gt;
        For example, setting this attribute to "T&amp;amp;amp;ext" will
        set the text to "Text" and the access key to 'e'.
        &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        &lt;html&gt;
          the type of toolbar button. The default type is a normal toolbar button, while the other 
          types provide special behavior.
          &lt;p&gt;
          A check type toolbar button appears in a selected (depressed) state when it is selected. 
          This type is useful to represent a boolean toggle.
          &lt;/p&gt;
          &lt;p&gt;
          A radio type toolbar button also appears in a selected (depressed) state when it is 
          selected. Radio type toolbar buttons are considered part of the same 
          group by their container, either toolbar or group. When a radio type toolbar button is 
          selected, other radio type toolbar buttons in the same group are unselected. This type is
          useful to represent a multiple choice toggle. 
          &lt;/p&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default check radio</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the item is selected, for buttons of type radio or check.
        For radio buttons, there is no server model implemented for handling mutual exclusivity. If
        a user clicks a new button, the old selection will be unselected. If you programatically
        call setSelected(true) from code, you must call setSelected(false) on the prior
        selection as well.
      </description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.ToolbarButton</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:satisfied-contracts>oracle-adf-richmenu-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A component which allows the end user to select a radio button in a group of radio buttons. 
    The selectBooleanRadio components are meant to be grouped together with
    other selectBooleanRadio components to create similar functionality to selectOneRadio.
    The main reason for using selectBooleanRadio components instead of a selectOneRadio
    component is that you have more control over the layout of selectBooleanRadios. You should group your 
    selectBooleanRadios together using the 'group' attribute, so when you select one radio
    in the group, the others will be unselected.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectBooleanRadio.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectBooleanRadio</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectBooleanRadio</component-class><!--oracle.adf.RichSelectBooleanRadio facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.SelectBoolean properties-->
      <property>
         <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.
      </description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <alias-of>value</alias-of>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectBooleanRadio properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the "group" the radio buttons will be placed in. Radio buttons in the same group will have mutually exclusive selection, regardless of their physical placement on the page. See selectOneRadio - it groups the radios automatically.
      The reason you would use selectBooleanRadio instead of selectOneRadio is that you have more control over the placement of each radio. 
      Using a selectBooleanRadio alone is uncommon; in any case, you must set the group attribute.
      </description>
         <property-name>group</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text of the radio button.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'.
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectBoolean</component-family>
         <renderer-type>oracle.adf.rich.Radio</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:expert>true</fmd:expert>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Component that displays a label for a form component.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/outputLabel.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichOutputLabel</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichOutputLabel</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichOutputLabel properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;a character used to gain quick access to the form element specified by the for attribute, if set.
                    If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the ID of the component that this component refers to. This must be set for the accessKey to work.
      &lt;p&gt;
        Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container and begin the search from there, 
        ":::" will pop out of two naming containers
        and begin the search from there, etc.&lt;/p&gt;</description>
         <property-name>for</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the 
          "showRequired" attribute must be false for the visual indication not to be displayed.</description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;an attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;</description>
         <property-name>valueAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Output</component-family>
         <renderer-type>oracle.adf.rich.Label</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>value</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>LOV input control. RichInputListOfValues provides the functionality 
    to make selection and return data from a popup dialog. </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/faces/metadata/icons/rich/inputListOfValues.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputListOfValues</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputListOfValues</component-class><!--oracle.adf.RichInputListOfValues facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.InputPopup properties-->
      <property>
         <description>a method reference to a LaunchPopupListener (called in response to a 
      LaunchPopupEvent).</description>
         <property-name>launchPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        A ListOfValuesModel object that represents the model for the LOV component. The 
        ListOfValuesModel currently provides methods for use within the LOV component and in 
        addition, to retrieve a QueryModel and TableModel in order to to display a table and/or a 
        query component (which are then used to search and select a value for the LOV component).  
        For details, please refer to the Javadocs for 
        oracle.adf.view.rich.model.ListOfValuesModel
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.ListOfValuesModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a ReturnPopupListener (called in response to a 
        ReturnPopupEvent).</description>
         <property-name>returnPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A method reference to a ReturnPopupDataListener (called in response to a 
      ReturnPopupDataEvent). The attrbite is deprecated and will be 
      removed in the future release.</description>
         <property-name>returnPopupDataListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>The ReturnPopupDataEvent is not queued on the component anymore, The attribute will be removed in future</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the id of the user-defined popup component relative to this component (accounting for
        NamingContainers). If this attribute is supplied, an af:toolbar with af:commandToolbarButton
        will be created internally, which will be displayed as create icon in the Search and Select
        dialog. Clicking the button launches the user-defined popup component.&lt;br/&gt;
        If the developer has added a dialog within the popup, then the decision to refresh the table
        is made by the component intelligently(table will be refreshed on pressing Ok button in the
        dialog). If the developer has not added a dialog to the popup, then the table will be
        refreshed always.&lt;br/&gt; 
        Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root, 
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container 
        and begin the search from there, ":::" will pop out of
        two naming containers and begin the search from there, etc.
      </description>
         <property-name>createPopupId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the mode that controls how the user specifies a value. This attribute is only applicable when the 'readOnly' attribute is set to false.
        &lt;p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;input&lt;/b&gt;: this mode allows the user to type in a value as well as browse and select from a list of available values.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;select&lt;/b&gt;: this mode allows the user only to browse and select from a list of available values.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/p&gt;
        &lt;/html&gt;
        
      </description>
         <property-name>editMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>input</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>input select</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputListOfValues properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>
        an attribute which if set to TRUE, tells the component to automatically 
        tab to the next focusable, when the maxlength for the current component has been reached.
      </description>
         <property-name>autoTab</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the size of the text control specified by the number of characters shown.
         The default value depends on the browser.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute that will simultaneously set both the "label"and "accessKey" 
        attributes from a single value, using the conventional ampersand notation. For example, 
        setting this attribute to "T&amp;amp;ext" will set the label to "Text" and the access key to 'e'
        .
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum number of characters per line that can be entered into the 
        text control.
      </description>
         <property-name>maximumLength</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the title of the Search and Select popup dialog.</description>
         <property-name>popupTitle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the search information that appears in the tooltip when user does a 
        mouseover on the Search icon.
      </description>
         <property-name>searchDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.ListOfValues</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
    The panelTabbed control creates, contains and shows a series of items defined by showDetailItem nodes.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/showOneTab.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelTabbed</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelTabbed</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelTabbed properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the position of the tab bar. Defaults to "above". In accessibility
        screen reader mode, tab bar position is always "above".
      </description>
         <property-name>position</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>above</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-values>above both below</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        &lt;html&gt;
        determines if tab removal is enabled.
        &lt;p&gt;This attribute supports these tabRemoval types:&lt;/p&gt;
        &lt;html:ul&gt;
        &lt;html:li&gt; none - tab removal is not enabled. This is the default value. &lt;/html:li&gt;
        &lt;html:li&gt; all - tab removal is enabled on all tabs, regardless if they are disclosed. The
          last tab in the panelTabbed can be removed.&lt;/html:li&gt;
        &lt;html:li&gt; allExceptLast - tab removal is enabled on all tabs, regardless if they are
          disclosed. The last tab in the panelTabbed cannot be removed.&lt;/html:li&gt;
        &lt;/html:ul&gt;
        &lt;p&gt;Choosing to remove a tab will cause an ItemEvent of type 'remove' to be launched. This
        event can be listened for on a showDetailItem using the itemEventListener attribute. It is up to the developer
        to handle this event and code the actual removal of the tab. This is because of the dynamic
        nature of the panelTabbed component, which may have dynamic children. This also allows a
        finer level of control by the developer, who can then choose a custom implementation that
        may (for example) include warning dialogs, and control of which tab gains focus after a tab
        is removed.&lt;/p&gt;
        &lt;/html&gt;
      </description>
         <property-name>tabRemoval</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-values>none all allExceptLast</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.ShowOne</component-family>
         <renderer-type>oracle.adf.rich.Tab</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:default-property>position</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichShowDetailItem oracle.adfinternal.RichFacetRef org.apache.myfaces.trinidad.Switcher org.apache.myfaces.trinidad.Iterator org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The navigationPane component creates a series of 
      navigation items representing one level in a navigation hierarchy.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/navigationLevel.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichNavigationPane</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichNavigationPane</component-class><!--org.apache.myfaces.trinidad.NavigationLevel facets-->
      <facet>
         <description>the component to use to stamp each element in the
              navigation. A CommandNavigationItem is expected.
      </description>
         <facet-name>nodeStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreCommandNavigationItem</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.NavigationLevel properties-->
      <property>
         <description>the hierarchy of navigation data - must be of type
            org.apache.myfaces.trinidad.model.MenuModel
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the level, based on a 0 based index, in the menuModel to render based on the focusPath of the menuModel.
      </description>
         <property-name>level</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichNavigationPane properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the component is disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>&lt;html&gt;how the navigational items are displayed.  
      Options are:
        &lt;ul&gt;&lt;li&gt;bar - display items separated by a bar
        &lt;/li&gt;&lt;li&gt;buttons - display items with a vertical separator between them
        &lt;/li&gt;&lt;li&gt;choice - display items in a popup list when icon is clicked
        &lt;/li&gt;&lt;li&gt;list - display items in a bulleted list
        &lt;/li&gt;&lt;li&gt;tabs - display each item in a tab
        &lt;/li&gt;&lt;/ul&gt;
        &lt;/html&gt;
      </description>
         <property-name>hint</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>tabs</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>tabs bar buttons choice list</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text that describes the items.  
      (This attribute is only applicable if the rendering hint supports it, e.g.
      "choice".)
      </description>
         <property-name>title</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.NavigationLevel</component-family>
         <renderer-type>oracle.adf.rich.Pane</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichCommandNavigationItem oracle.adf.RichSeparator</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richnavigationitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The form tag creates an HTML &amp;lt;form&amp;gt; element.&lt;/html&gt;</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/form.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichForm</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichForm</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Form properties-->
      <property>
         <description>whether the form was submitted on this request</description>
         <property-name>submitted</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <transient>yes</transient>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichForm properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the target frame for the form. Can either specify a user-defined frame name,
         or use one of the following values:
        &lt;ul&gt;
           &lt;li&gt;_blank: The link opens the document in a new window.&lt;/li&gt;
           &lt;li&gt;_parent: The link opens the document in the window of the parent. For example, if the link appeared 
               in a dialog window, the resulting page would render in the parent window.&lt;/li&gt;
           &lt;li&gt;_self: The link opens the document in the same page or region.&lt;/li&gt;
           &lt;li&gt;_top: The link opens the document in a full window, replacing the entire page.&lt;/li&gt;
        &lt;/ul&gt; </description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the form supports file upload.</description>
         <property-name>usesUpload</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id attribute of the command button inside the form whose action should be invoked by default 
        when the enter key is pressed with focus inside the form.  If defaultCommand is not specified, no action is invoked
        when the enter key is pressed with focus inside the form.
        &lt;p&gt;Identifiers are relative to the form component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container and begin the search from there, 
        ":::" will pop out of two naming containers
        and begin the search from there, etc.&lt;/p&gt;      
      
      </description>
         <property-name>defaultCommand</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Form</component-family>
         <renderer-type>oracle.adf.rich.Form</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout oracle.adf.RichPanelSplitter oracle.adf.RichPanelStretchLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
Renders a DeclarativeComponent.

    </description>
      <component-type>oracle.adf.RichDeclarativeComponent</component-type>
      <component-class>oracle.adf.view.rich.component.rich.fragment.RichDeclarativeComponent</component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The view ID to include. This attribute should not be set on the component, but
      should be set using the JSP tag.</description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.DeclarativeComponent properties-->
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichDeclarativeComponent properties-->
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.DeclarativeComponent</component-family>
         <naming-container>true</naming-container>
         <renderer-type>oracle.adf.rich.DeclarativeComponent</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The poll component will deliver PollEvents to the server at fixed intervals.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/poll.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPoll</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichPoll</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Poll properties-->
      <property>
         <description>whether data validation 
          should be skipped when poll
          events are generated by this component.

          When immediate is false (the default), events will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true,  events
          will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a poll listener</description>
         <property-name>pollListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPoll properties-->
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the time between poll events, in milliseconds. 
            The default is 5000.  If the value is set to less than zero,
            polling will be disabled.
      </description>
         <property-name>interval</property-name>
         <property-class>int</property-class>
         <default-value>5000</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Poll</component-family>
         <renderer-type>oracle.adf.rich.Poll</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>propertyChange poll </client-event-types><trigger-event-types>propertyChange poll </trigger-event-types>
            
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The calendar component provides the user the ability to view a calendar and the 
      activities by day, week, month, list.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectInputDate.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCalendar</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichCalendar</component-class><!--oracle.adf.RichCalendar facets-->
      <facet>
         <description>The create facet is brought up when you click or double click on free space 
            (not on an activity) on the calendar. 
            
            &lt;p&gt;This facet should contain a popup, and the child of the popup should be a dialog. 
            The popup should have the 'contentDelivery' attribute set to 'lazyUncached' so that
            cached values are not shown. 
            If you don't want to launch a popup when you click 
            or double click free space, then don't use this facet. If no facet is present a calendarEvent 
            will still be sent to the server and you can listen for a it and respond appropriately.  &lt;/p&gt;
            
            This facet can only be triggered by mouse clicks, therefore you must add custom toolbar buttons 
            that trigger the same functionality if the calendar needs to be keyboard accessible.
      </description>
         <facet-name>create</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>The contextMenu facet is opened when you right click on the calendar, except if you 
            are in the toolbar or on an activity.
            
            &lt;p&gt;This facet should contain a popup, and the child of the popup should be a menu. 
            If this facet is specified a calendarEvent will be sent 
            to the server for the right click. If this facet is not specified, no event will be 
            sent to the server for the right click.  &lt;/p&gt;
            &lt;p&gt;
            There is no built in context menu functionality provided, 
            all menu items should be added by the developer.
            &lt;/p&gt;
            &lt;p&gt;
            This facet can only be triggered by mouse clicks, therefore you must add custom toolbar buttons 
            that trigger the same functionality if the calendar needs to be keyboard accessible.
            &lt;/p&gt;
            &lt;p&gt;If this facet is not present, then no calendarEvent will be sent for a right click in a free space area.&lt;/p&gt;
      </description>
         <facet-name>contextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>the activityContextMenu facet is opened when you right click on an activity. 

      &lt;p&gt;This facet should contain a popup, and the child of the popup should be a menu. 
      If the content of the menu depends on the activity in some way then 
      the popup should have the 'contentDelivery' attribute set to 'lazyUncached' so that
      cached values are not shown. 
      &lt;/p&gt;
      &lt;p&gt;
      If this facet is specified a calendarActivityEvent will be sent 
      to the server for the right click. If this facet is not specified, no event will be 
      sent to the server for the right click.  
      &lt;/p&gt;
      &lt;p&gt;
      There is no built in context menu functionality provided, 
      all menu items should be added by the developer.
      &lt;/p&gt;
      
      </description>
         <facet-name>activityContextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>the activityHover facet is opened when you hover over an activity. 
      This facet should contain a popup, and the child of the popup should be a noteWindow. 
      The popup should have the 'contentDelivery' attribute set to 'lazyUncached' so that
      cached values are not shown. 
      &lt;p&gt;If this facet is not present, then no calendarActivityEvent will be sent when the 
      user hovers over an activity.&lt;/p&gt;
      &lt;p&gt;
      There will be a delay before this popup is opened such that it doesn't show up 
      when the user quickly mouses in and back out of the activity.
      &lt;/p&gt;
      
      </description>
         <facet-name>activityHover</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>The activityDetail facet is opened when you click or double click on an activity. 
      It is also opened if the activity has focus and enter is pressed.
           
       &lt;p&gt;This facet should contain a popup, and the child of the popup should be a dialog. 
          The popup should have the 'contentDelivery' attribute set to 'lazyUncached' so that
          cached values are not shown. 
          If you don't want to launch a popup for click/double click/enter, 
          then don't use this facet. If no facet is present a calendarActivityEvent 
          will still be sent to the server and you can listen for a it and respond appropriately.  &lt;/p&gt;
      </description>
         <facet-name>activityDetail</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>The activityDelete facet is opened if the activity has focus and delete is pressed. 
      
       &lt;p&gt;This facet should contain a popup, and the child of the popup should be a dialog. 
          If the content of the popup depends on the activity in some way then 
          the popup should have the 'contentDelivery' attribute set to 'lazyUncached' so that
          cached values are not shown. 
          If you don't want to launch a popup when the user hits delete, 
          then don't use this facet. If no facet is present a calendarActivityEvent 
          will still be sent to the server and you can listen for a it and respond appropriately.  &lt;/p&gt;
      </description>
         <facet-name>activityDelete</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Calendar properties-->
      <property>
         <description>the model providing activity data  - must be of type 
        oracle.adf.view.rich.model.CalendarModel</description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.CalendarModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichCalendar properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        calendar view: day, week, month, or list. The default is month.
      </description>
         <property-name>view</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>month</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-values>day week month list</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>        
        The activeDay drives the display range shown, and must be changed in order to show a 
        new display range. For example to display the month of June 2008 in month view, the activeDay
        must be a day in June 2008. The activeDay is also the specific date that will be shown in day view.
        &lt;p&gt;
        When the arrows in the toolbar are used, the activeDay will be changed. For example if
        the arrow is pressed when the activeDay is June 8, 2009 and the view is 'month'
        then the activeDay will change to July 8, 2009. 
         &lt;/p&gt; 
      </description>
         <property-name>activeDay</property-name>
         <property-class>java.util.Date</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        Available calendar views. The built-in strings recognized are a combination of:
          &lt;ul&gt;
            &lt;li&gt;"all" - all built-in views the calendar provides - if "all" is in the list, 
                        other strings are ignored&lt;/li&gt;
            &lt;li&gt;"day" - if present, Day view is available in the calendar&lt;/li&gt;
            &lt;li&gt;"week" - if present, Week view is available in the calendar&lt;/li&gt;
            &lt;li&gt;"month" - if present, Month view is available in the calendar. 
                          Day view must also be added to allow the  user to view overflow (+n more) activities.&lt;/li&gt;
            &lt;li&gt;"list" - if present, List view is available in the calendar&lt;/li&gt;
          &lt;/ul&gt;
         The view specified by the 'view' attribute must correspond to one of the entries in
availableViews. Otherwise, the calendar will default to the first built-in view type in availableViews.
         The toolbar buttons which toggle the Calendar view will appear in the 
order specified in 'availableViews'. If there is only one view specified in 'availableViews',
the buttons will be hidden.
        
      </description>
         <property-name>availableViews</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>        
        DateCustomizer allows for per date customizations such as string formatting.         
        &lt;p&gt;
        Keys passed to the DateCustomizer.format method are
        &lt;ul&gt;
          &lt;li&gt; "af|calendar::month-grid-cell-header-day-link": in month view, customize the date link labels in the cell header, for example replace "5" with "-34" &lt;/li&gt;
          &lt;li&gt; "af|calendar::month-grid-cell-header-misc": in month view, add miscellaneous text to the empty area of the cell header. For example on Jan 1, add the text "New Year's Day". &lt;/li&gt;
        &lt;/ul&gt;
        &lt;/p&gt;
          
      </description>
         <property-name>dateCustomizer</property-name>
         <property-class>oracle.adf.view.rich.util.DateCustomizer</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The start hour that is scrolled into view. 
      Valid values are 0-23. The default startHour is 8.</description>
         <property-name>startHour</property-name>
         <property-class>int</property-class>
         <default-value>8</default-value>
      </property>
      <property>
         <description>
        Drives which activities are displayed in list view. 
             &lt;ul&gt;
               &lt;li&gt;day - activities for the activeDay&lt;/li&gt;
               &lt;li&gt;week - activities for the week that includes the activeDay&lt;/li&gt;
               &lt;li&gt;month - activities for the month that includes the activeDay&lt;/li&gt;
               &lt;li&gt;dayCount - starting with the activeDay, show activities for a certain number of days. The actual number of days to show is set in the listCount attribute. dayCount is the default.&lt;/li&gt;
             &lt;/ul&gt;
        
      </description>
         <property-name>listType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>dayCount</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>day week month dayCount</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        This is the number of days to show in list view when the listType is dayCount. The default is 14.
      </description>
         <property-name>listCount</property-name>
         <property-class>int</property-class>
         <default-value>14</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Returns the start day of the week in week or month view. 
          When not set this will default based on the locale, for example 
          it may be Sunday in the U.S., but Monday in France.
        
      </description>
         <property-name>startDayOfWeek</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>sun mon tue wed thu fri sat</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The timezone to use for this instance. If not set, the timezone is pulled from the AdfFacesContext.
      </description>
         <property-name>timeZone</property-name>
         <property-class>java.util.TimeZone</property-class>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Allows per activity instance style customization. The type is Map&amp;lt;Set&amp;lt;String&gt;, InstanceStyles&gt;. 
                   The Set&amp;lt;String&gt; being used for the map key will come from getTags() on CalendarActivity. The value is an 
                   instanceStyles object. Calendar skinning keys will be passed to the instanceStyle object and per 
                   activity styles returned. 
                   
                   &lt;p&gt;For built in color ramps see CalendarActivityRamp.getActivityRamp, 
                   which returns a CalendarActivityRamp object, a subclass of InstanceStyles&lt;/p&gt;
      </description>
         <property-name>activityStyles</property-name>
         <property-class>java.util.Map</property-class>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Allows control over the layout of the toolbar. 
      
      &lt;p&gt;
      The built in strings the component recognizes are:
        &lt;ul&gt;
          &lt;li&gt;"all" - all the buttons calendar provides by default - if "all" is in the list, 
                     the built in strings 'range', 'dates', and 'views' are ignored&lt;/li&gt;
          &lt;li&gt;"range" - the string showing the date range displayed&lt;/li&gt;
          &lt;li&gt;"dates" - the buttons that change the date: today, previous, and next&lt;/li&gt;
          &lt;li&gt;"views" - the view buttons: day, week, month, list&lt;/li&gt;
          &lt;li&gt;"newline" - means put the next thing on a new line&lt;/li&gt;
          &lt;li&gt;"stretch" - adds a stretched component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/p&gt;
      &lt;p&gt;
        Custom toolbox content: when the calendar encounters a string in toolboxLayout 
        that it doesn't recognize, like 'customToolbarXyz', it looks for a facet of 
        that name and renders the content if it finds it. In the future new facets may 
        be added to calendar. In order to avoid future name clashes strings starting 
        with the word 'custom' should be used for custom facets. We make no guarantees 
        for other names. 
      &lt;/p&gt;

        The toolboxLayout attribute allows the user to
        &lt;ul&gt;
          &lt;li&gt;add as many custom toolbars as desired, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="customToolbar1 all customToolbar2"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;stack as many toolbars as desired, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="all newline customToolbar newline customGroup"&lt;/li&gt;

          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;show multiple rows of toolbars. for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="customToolbar1 newline all"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;reorder the button groups, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="views stretch range dates"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;remove toolbar content that isn't desired, for example the date buttons won't show up with this:
          &lt;ul&gt;

            &lt;li&gt;toolboxLayout="views"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
         <property-name>toolboxLayout</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a calendarActivity listener.</description>
         <property-name>calendarActivityListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a calendarDisplayChange listener.</description>
         <property-name>calendarDisplayChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a calendar event listener.</description>
         <property-name>calendarListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a calendarActivityDurationChange listener.</description>
         <property-name>calendarActivityDurationChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Calendar</component-family>
         <renderer-type>oracle.adf.rich.Calendar</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange calendarActivity calendarDisplayChange calendar calendarActivityDurationChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange calendarActivity calendarDisplayChange calendar calendarActivityDurationChange </trigger-event-types>
            
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectManyListbox component creates a component which allows
          the user to select multiple values from a list of items.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectManyListbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectManyListbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectManyListbox</component-class><!--oracle.adf.RichSelectManyListbox facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectManyListbox properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
   an attribute that will simultaneously set both the "value"
                and "accessKey" attributes from a single value, using
                conventional ampersand ('&amp;amp;') notation.
                &lt;p&gt;
                For example, setting this attribute to "L&amp;amp;amp;abel" will
                set the label to "Label" and the access key to 'a'.
                &lt;/p&gt;&lt;/html&gt;</description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the select-all option is visible.</description>
         <property-name>selectAllVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the number of items that should be visible in the list. The renderer may constrain the maximum and minimum number of items shown.</description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <default-value>4</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectMany</component-family>
         <renderer-type>oracle.adf.rich.Listbox</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The commandButton component creates a button that, when pressed, will generate an action event on the server.  The button can contain text, an image, or text and an image.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandButton.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandButton</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandButton</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandButton properties-->
      <property>
         <description>the textual label of the button.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the button should be disabled. The disabled attribute is secured and cannot be set on the client.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
a character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>whether the action should be done through a partial page submit
            or not.
            Default is false: no partial page submit.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE the component will start blocking user input when the
     action is initiated. The blocking will stop when a response is received
     from the server.
      </description>
         <property-name>blocking</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the button. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute specifying the position of the icon.
      </description>
         <property-name>iconPosition</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>leading</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>leading trailing</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.Button</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A panel component that aggregates collection components 
    like table, treeTable and tree to display standard/application menus, 
    toolbars and statusbar items.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelCollection.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelCollection</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichPanelCollection</component-class><!--oracle.adf.RichPanelCollection facets-->
      <facet>
         <description>
	An "af:menu" element containing menu items. These menu items are merged 
	into the menu bar with default menus provided by the panelCollection. This menu is 
	the first menu in the menubar and is followed by the "View" and "Format" menus that 
	are provided by the panelCollection compoent. You can not add more than one top level 
	menu item. This menu item can have as many nested children as you want.  The menubar 
	is the first child compoent of the toolbox. The toolbox manages two types of elements
	menubars and toolbars. In the panel collection we create one menu bar and one toolbar.
	There are three  more facets that allow deveopers to add toolbars of their choosing. 
	These are called the "toolbar", "secondaryToolbar" and "afterToolbar" facets.  
        You must attach "af:toolbar" to "toolbar" and "secondaryToolbar" facets. The "afterToolbar" is 
        displayed in a separate row inside the toolbox. This facet can contain either an "af:toolbar" or 
        an "af:group" containing  "af:toolbar" components.
      </description>
         <facet-name>menus</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichMenu</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichMenu</fmd:allowed-child-components>
               <fmd:satisfied-contracts>oracle-adf-richmenu-holder</fmd:satisfied-contracts>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
	Menu Item(s) to added to the component defined "View" menu of the panelCollection. To add multiple menuItems
	into the view menu please add "af:group" component containing "af:menuItems".   
      </description>
         <facet-name>viewMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.Group oracle.adf.RichMenu</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
	Insert an "af:toolbar" element in this facet to contain additional toolbar items.
	This toolbar is displayed after the menubar and before the standard toolbar inserted by the panelCollection.
      </description>
         <facet-name>toolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichToolbar</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichToolbar</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
	Insert an "af:toolbar" element in this facet to contain additional toolbar items. This toolbar and it contained items items are 
	displayed after the default toolbar provided by the panelCollection. This makes them the right most toolbar 
	in this toolbox row.
      </description>
         <facet-name>secondaryToolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichToolbar</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichToolbar</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
	Insert an "af:toolbar" or "af:groups" of "af:toolbars" in this facet to have these toolbar(s) appear in a separate row below the normal group of toolbars.
      </description>
         <facet-name>afterToolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichToolbar org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichToolbar org.apache.myfaces.trinidad.Group</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
   Insert an "af:toolbar" in this facet to include extra statusbar item(s). These statusbar items are merged with standard items provided by the panelCollection.
      </description>
         <facet-name>statusbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichToolbar</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichToolbar</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelCollection properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a list of default features to turn off for the panelCollection.
        Currently the supported values are "freeze", "detach" and "wrap".
      </description>
         <property-name>featuresOff</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        Attribute used to hide the text for the default toolbar items. 
        Use "icon" to hide the text or "iconAndText" to display the text with the icon
      </description>
         <property-name>defaultToolbarItemDisplay</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>iconAndText</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>iconAndText icon</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.DecorateCollection</component-family>
         <renderer-type>oracle.adf.rich.PanelCollection</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <naming-container>true</naming-container>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:default-property>id</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichTable oracle.adf.RichTreeTable oracle.adf.RichTree</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      Represents an input number slider component.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputSlider.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputNumberSlider</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputNumberSlider</component-class><!--oracle.adf.RichInputNumberSlider facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputNumberSlider properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the distance between two major tick marks. If &amp;lt;= 0 major increments will not be shown.
        The major tick marks are the ones that will display a labeled value underneath the tick mark.
      </description>
         <property-name>majorIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the distance between two minor tick marks. If &amp;lt;= 0 minor increments will not be shown. 
        The minor tick marks are those that will not show a label underneath the tick mark.
      </description>
         <property-name>minorIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the smallest possible increment. This is the increment that will be applied when the
         user presses the + and - buttons on the sides of the slider.
      </description>
         <property-name>minimumIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the minimum value.
      </description>
         <property-name>minimum</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum value.
      </description>
         <property-name>maximum</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>10</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a horizontal or vertical slider is created.
      </description>
         <property-name>orientation</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.NumberSlider</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The showDetailHeader provides a means of toggling the contents under a header 
between being disclosed(shown) or undisclosed(hidden).
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/showDetailHeader.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichShowDetailHeader</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichShowDetailHeader</component-class><!--oracle.adf.RichShowDetailHeader facets-->
      <facet>
         <description>A Facet that can be used to display contextual information on the header. 
      The contextual information is displayed next to the header text
      </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      Both help facet when rendered inline and helpTopicId with instructions text are rendered in the same spot,
      so if helpTopicId is specified and it has instructions text, the help facet will not be rendered if specified
      inline.
      Help content that is displayed to the user. The content of the help is displayed inline inside the
      header content or as a popup through a link. The attribute helpType controls whether the help is displayed inline or in a popup.
      </description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Toolbar component that is rendered on the header.
      </description>
         <facet-name>toolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>MenuBar component that is rendered on the header.
      </description>
         <facet-name>menuBar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>A Facet that can be used to display legend information on the header. 
      If the help facet has a child and it is visible, the contents of the legend facet will be 
      rendered beneath the task stamps. If the legend facet is not visible or no children exist, 
      then it gets rendered below the title.
      </description>
         <facet-name>legend</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>A facet that displays addition information inside the header content. 
      This informtion is displayed end aligned under the header
      </description>
         <facet-name>info</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ShowDetail properties-->
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata><cpf:persistent>true</cpf:persistent>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>stops the local value of disclosed from being set
        by renderers. This allows the value to always be taken from the value of the disclosed
        value expression. Disclosed values must be updated in other ways (i.e. from a
        disclosure listener)</description>
         <property-name>disclosedTransient</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichShowDetailHeader properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the label of the header.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>true</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed in the header. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;how the component will handle geometry management.  
      Options are:
        &lt;ul&gt;&lt;li&gt;default - either flow or stretch, depending on the container the panelBox is inside
        &lt;/li&gt;&lt;li&gt;flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children
        &lt;/li&gt;&lt;li&gt;stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children
        &lt;/li&gt;&lt;/ul&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default flow stretch</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the inline style of the content region.
      </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Along with the help facet this is deprecated, helpTopicId should be used for providing help.  Controls if the help is displayed inline or as a link to a popup.
      </description>
         <property-name>helpType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>inline</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>inline link</fmd:property-values>
               <fmd:deprecated>helpType is deprecated, helpToicId should be used for providing help.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        whether an error, info, confirmation, or warning header is needed.
      </description>
         <property-name>messageType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>info confirmation warning none error</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the size of this header. The largest is 0 and corresponds to an H1 header
        the smallest is 5 and corresponds to an H6 Header.  Note that this version of the tag will 
        display all sizes above 2 the same as size 2. Setting the size to a negative number will
        allow the header to be calculated according to its parent header.  The default value for 
        this property is -1.
      </description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.ShowDetail</component-family>
         <renderer-type>oracle.adf.rich.Header</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange disclosure </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange disclosure </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The train component indicates the location of the current page within a multi-step process. Each step is represented as a train stop.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/train.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTrain</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichTrain</component-class><!--org.apache.myfaces.trinidad.Process facets-->
      <facet>
         <description>the component to use to stamp each element in the
              process. A CommandNavigationItem is expected.
      </description>
         <facet-name>nodeStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreCommandNavigationItem</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Process properties-->
      <property>
         <description>the hierarchy of data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichTrain properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether to layout the stops in a train horizontally or vertically. 
      Default is horizontal.</description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Process</component-family>
         <renderer-type>oracle.adf.rich.Train</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichCommandNavigationItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richnavigationitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The reset button control creates a push button which will reset the content of a form for all input and select components.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/resetButton.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichResetButton</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichResetButton</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichResetButton properties-->
      <property>
         <description>the textual label of the button.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the button should be disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to this button.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                The easiest, and most convenient
                way to specify both the text and the mnemonic together is
                to use textAndAccessKey.
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.ResetButton</component-family>
         <renderer-type>oracle.adf.rich.Button</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The chooseColor component is used in conjunction with a inputColor to allow the user to quickly select a color value without having to navigate to a secondary window.
    </description>
      <component-type>oracle.adf.RichChooseColor</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichChooseColor</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichChooseColor properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the list of colors to be displayed in the standard color palette. 
        The number of provided colors can be 49, 64 and 121, depending on the width 
        attribute. For example, if width is 7, the number should be 49.  If the 
        number does not match the width, extra color element in the list will be 
        ignored and missing color elements will be displayed as no-color.  The 
        color list must be of an array of type TrColor in the client side.  
        On the server side, it must be a java.util.List of java.awt.Color objects
        or a java.util.List of hex color code strings (in the tag only).
        Customer may define their own color palette, such as show 169 color palette with width 
        of value 13.
        
      </description>
         <property-name>colorData</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the list of custom defined colors. The number of colors can be 
        7, 8, 11, equivalent to the width attribute. The color list must be of
        an array of type TrColor in the client side. On the server side, it must be a 
        java.util.List of java.awt.Color objects or  a java.util.List of hex color code strings (in the tag only).
      </description>
         <property-name>customColorData</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the default color. When setting using the tag it could take a type java.lang.String of hex color code.
      </description>
         <property-name>defaultColor</property-name>
         <property-class>java.awt.Color</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the width of the standard palette in cells.  The supported values listed above
          will show the palette with 49, 64 and 121 colors respectively.  In case the width specified is 
          not one of the default supported values, the color palette with closest and less number of colors will be 
          used unless a custom color palette is defined using the colorData attribute. 
      </description>
         <property-name>width</property-name>
         <property-class>int</property-class>
         <default-value>7</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>true</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the Last Used button is displayed. When set to true, the Last Used Button will be rendered. Last used color information does not persist across browser sessions.
      </description>
         <property-name>lastUsedVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Default button is displayed. When set to true, the Default Button will be rendered.
      </description>
         <property-name>defaultVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Custom Color button and custom color row are displayed. When set to true, the Custom Color Button and custom color row will be rendered.
      </description>
         <property-name>customVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Choose</component-family>
         <renderer-type>oracle.adf.rich.Color</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Used to display a busy/idle status indicator that displays the status of ppr activity.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/statusIndicator.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichStatusIndicator</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichStatusIndicator</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichStatusIndicator properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.StatusIndicator</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelAccordion control creates, contains, and shows a series of items defined by showDetailItem nodes.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelAccordion.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelAccordion</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelAccordion</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelAccordion properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description> whether a minimum of one detail item must be disclosed at a time.  Use "false" (the default) to keep a minimum of one detail item disclosed at all times.  Use "true" to make it possible for zero detail items to be disclosed.
      </description>
         <property-name>discloseNone</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description> whether more than one detail item may be disclosed at a time.  Use "false" (the default) to keep a maximum of one detail item disclosed at all times.  Use "true" to make it possible for multiple detail items to be disclosed.
      </description>
         <property-name>discloseMany</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Sets if reordering of the panel accordion's items should
        be allowed.
        &lt;p&gt;After a reorder, an event is sent to the server. If all the children components
        of the panel accordion are &lt;c&gt;RichShowDetailItem&lt;/c&gt; components, the display indexes
        will be updated to reflect the new order. The accordion will update as many items as
        needed to ensure they appear in the proper order. This means that if there are five
        items all with the default index of -1, and the first is moved to position 3,
        the items now first, second and third (where the third is the old first)
        will have their display indexes updated to 0, 1 and 2 respectively.&lt;/p&gt;
        &lt;p&gt;The updating of display indexes in flattened components is not supported at this
        time.&lt;/p&gt;</description>
         <property-name>reorder</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>disable</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>enable disable</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Accordion</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>id</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichShowDetailItem oracle.adfinternal.RichFacetRef org.apache.myfaces.trinidad.Switcher org.apache.myfaces.trinidad.Iterator org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The region tag allows dynamic content to be included in a master page.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/region.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichRegion</component-type>
      <component-class>oracle.adf.view.rich.component.rich.fragment.RichRegion</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Region properties-->
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the model for this region.</description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.RegionModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a RegionNavigationListener method</description>
         <property-name>regionNavigationListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichRegion properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Whether or not to render the disclosure icon. If this is set to false
                            all other attributes that deal with disclosure are ignored.</description>
         <property-name>showDisclosure</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the header text of the Region.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the display strategy for the Regions's header. It should be either
"never", "ifNeeded", or "always".  No header will be shown if the value is "never".
If the value is "always", the header will always be shown.  This value is useful when
the region has a drag source attached or when you want the user to have access to
the disclosure control.  If the value is "ifNeeded", the header will only be
shown if the "text" property is set,
or if the never has a drag source attached.
The default is "never" for backwards compatibility
      </description>
         <property-name>showHeader</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>never</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>never ifNeeded always</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Region</component-family>
         <renderer-type>oracle.adf.rich.Region</renderer-type>
         <tag-handler>oracle.adfinternal.view.faces.facelets.rich.RegionHandler</tag-handler>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectOrderShuttle component provides a mechanism for selecting
   multiple values from a list of values by allowing the user to move
   items between two lists, and reordering that list of values.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectOrderShuttle.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectOrderShuttle</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectOrderShuttle</component-class><!--oracle.adf.RichSelectOrderShuttle facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>filter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>leadingFooter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>trailingFooter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectOrderShuttle properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>this attribute describes the layout of the shuttle. Default value is 'horizontal'.
      </description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the display size (number of items) of the lists. The size 
              specified must be between 10 and 20 items. If the attribute is not 
              set or has a value less than 10, the size would have a default or 
              minimum value of 10. If the attribute value specified is more than 
              20 items, the size would have the maximum value of 20.
      </description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the header of the leading list of the shuttle.
      </description>
         <property-name>leadingHeader</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the header of the trailing list of the shuttle.
      </description>
         <property-name>trailingHeader</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether or not the leading list has an area to display descriptions.
      </description>
         <property-name>leadingDescShown</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not the trailing list has an area to display descriptions.
      </description>
         <property-name>trailingDescShown</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
                an attribute that will simultaneously set both the "value"
                and "accessKey" attributes from a single value, using
                conventional ampersand ('&amp;amp;') notation.
                &lt;p&gt;
                For example, setting this attribute to "L&amp;amp;amp;abel" will
                set the label to "Label" and the access key to 'a'.
                &lt;/p&gt;&lt;/html&gt;
        </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the shuttle is in "reorder only" mode, where the user can reorder the list of values, but cannot add or remove them.
      </description>
         <property-name>reorderOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectOrder</component-family>
         <renderer-type>oracle.adf.rich.Shuttle</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      A container for Toolbars and MenuBars, with built-in functionality like overflow and reordering.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/toolbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichToolbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichToolbox</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichToolbox properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Toolbox</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>org.apache.myfaces.trinidad.Group oracle.adf.RichMenuBar oracle.adf.RichToolbar</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>This component lays out a label and children.  Typically, the only child of this component will be an input element of some sort, but as many children as necessary can be added.  When using panelLabelAndMessage with ADF input components, you should always set simple="true" on the input components.  Non-simple ADF input components already effectively have all the functionality of panelLabelAndMessage.
      To lay out multiple panelLabelAndMessage components - or multiple non-simple ADF input components - you can use the panelFormLayout component.  When panelLabelAndMessage components are placed inside a panelFormLayout the labels will line up.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelLabelAndMessage.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelLabelAndMessage</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelLabelAndMessage</component-class><!--oracle.adf.RichPanelLabelAndMessage facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.  This facet should contain field level help.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Component to render after the children.</description>
         <facet-name>end</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelLabelAndMessage properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the panel should show an indicator that its contents are required.</description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the label of the bean.</description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the inline styles for the label portion of the component, e.g. "vertical-align: bottom;" to align the label to the bottom of the container.
      </description>
         <property-name>labelStyle</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an attribute that will simultaneously set both the "label" and "accessKey" attributes from a single value, using conventional ampersand notation.  For example, setting this attribute to "T&amp;amp;ext" will set the label to "Text" and the access key to 'e'.</description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the ID of the component that this component's label refers to.
        &lt;p&gt;Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container and begin the search from there, 
        ":::" will pop out of two naming containers
        and begin the search from there, etc.&lt;/p&gt;</description>
         <property-name>for</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. Note that instructions text is not supported on this component, otherwise all helpTopicId functionality is supported. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.LabelAndMessage</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichCommandButton oracle.adf.RichCommandLink oracle.adf.RichGoButton oracle.adf.RichGoLink oracle.adf.RichResetButton oracle.adf.RichIcon oracle.adf.RichImage oracle.adf.RichMedia oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A breadCrumbs component is used in hierarchical
          site layouts to indicate the path back to the root page of the
          hierarchy with links.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/navigationPath.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichBreadCrumbs</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichBreadCrumbs</component-class><!--org.apache.myfaces.trinidad.NavigationPath facets-->
      <facet>
         <description>the component to use to stamp each element in the
              navigation. A CommandNavigationItem is expected.
      </description>
         <facet-name>nodeStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreCommandNavigationItem</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.NavigationPath properties-->
      <property>
         <description>the hierarchy of navigation data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichBreadCrumbs properties-->
      <property>
         <description>whether to put links on the same line or indented and
            on new lines.If the orientation is
          &amp;quot;horizontal&amp;quot;, successive links will be put on the same line.
          If the orientation is &amp;quot;vertical&amp;quot;, successive links will be
          put on a new line, and indented from their parents.  In most
          cases, the orientation should be horizontal.  A vertical
          breadCrumbs should be used only when the text for the links
          is known to be very long and likely to cause undesirable
          scrolling.  The default value is horizontal.</description>
         <property-name>orientation</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.NavigationPath</component-family>
         <renderer-type>oracle.adf.rich.BreadCrumbs</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichCommandNavigationItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richnavigationitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelList control outputs each visible child
          in a list with a bullet next to it.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelList.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelList</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelList</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelList properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an inline CSS style for the list. For example, you can style the list to be squares like this:
      listStyle='list-style-type:square' </description>
         <property-name>listStyle</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the number of rows after which to start a new column. 
                  This attribute defaults to Integer.MAX_VALUE.
                  The number of rows actually rendered depends also on the
                  "maxColumns" attribute. 
                  If the children will not fit in the given number 
                  of rows and columns, the number of rows will 
                  increase to accomodate the children.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>2147483647</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of columns to show. 
                  This attribute defaults to 3 and defaults to 2 for PDA's
      </description>
         <property-name>maxColumns</property-name>
         <property-class>int</property-class>
         <default-value>3</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.List</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>rows</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichCommandLink oracle.adf.RichGoLink oracle.adf.RichOutputText oracle.adf.RichOutputFormatted</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelBorderLayout component is a layout element which lays out all of its
          children consecutively in its middle, and supports the following
          facets: top, bottom, left, right, start, end, innerTop, innerBottom, innerLeft, innerRight, innerStart, and innerEnd
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelBorder.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelBorderLayout</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelBorderLayout  </component-class><!--oracle.adf.RichPanelBorderLayout facets-->
      <facet>
         <description>Content to be rendered above the children.
      </description>
         <facet-name>top</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered below the children.
      </description>
         <facet-name>bottom</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the left of the children and
                between any top and bottom facets.
      </description>
         <facet-name>left</facet-name>
         <facet-extension>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the right of the children and
                between any top and bottom facets.
      </description>
         <facet-name>right</facet-name>
         <facet-extension>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the left of the children and
                between any top and bottom facets, if the reading direction is
                left-to-right, on the right otherwise.
      </description>
         <facet-name>start</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the right of the children and
                between any top and bottom facets, if the reading direction is
                left-to-right, on the left otherwise.
      </description>
         <facet-name>end</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered above the children, inside of 'top'.
      </description>
         <facet-name>innerTop</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered below the children, but above 'bottom'.
      </description>
         <facet-name>innerBottom</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the left of the children and
                between any innerTop and innerBottom facets, to the right of the left facet.
      </description>
         <facet-name>innerLeft</facet-name>
         <facet-extension>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered to the right of the children and
                between any innerTop and innerBottom facets.
      </description>
         <facet-name>innerRight</facet-name>
         <facet-extension>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>the equivalent of innerLeft on left-to-right clients and innerRight on right-to-left clients.
      </description>
         <facet-name>innerStart</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>the equivalent of innerRight on left-to-right clients and innerLeft on right-to-left clients.
      </description>
         <facet-name>innerEnd</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelBorderLayout properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.BorderLayout</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>An input control for richly formatted text.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/richTextEditor.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTextEditor</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichTextEditor</component-class><!--oracle.adf.RichTextEditor facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichTextEditor properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width of the text control specified by the approximate number of characters shown.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the initial editing mode.  Use "wysiwyg" for the what-you-see-is-what-you-get mode.  Use "source" for the source code editing mode.  The attribute defaults to "wysiwyg" unless the screen reader accessibility mode is enabled--in which case the default is "source".  It is very important to note that source mode is not plain text editing.  There are no guarantees that this component only records the minimal changes made by the user.  This component might change non-meaningful whitespace (new line characters in the source are not preserved), element minimization, element types, order of attributes, or use of character entities.
      </description>
         <property-name>editMode</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>wysiwyg source</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "label"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the height of the text control specified by the approximate number of characters shown.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether content should be fetched when the component is rendered initially.  When contentDelivery is "immediate", data is fetched and inlined into the component chrome.  If contentDelivery is "lazy", content will be fetched and delivered to the client during a subsequent request.</description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>immediate</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Allows control over the layout of the toolbar. 
      
      &lt;p&gt;
      The built in strings the component recognizes are:
        &lt;ul&gt;
          &lt;li&gt;"all" - all the buttons the richTextEditor provides by default - if "all" is in the list, 
                      all other built in strings are ignored&lt;/li&gt;
          &lt;li&gt;"font" - The font selection and font size&lt;/li&gt;
          &lt;li&gt;"history" - Undo and Redo&lt;/li&gt;
          &lt;li&gt;"mode" - Rich Text Mode and Source Code Mode&lt;/li&gt;
          &lt;li&gt;"color" - Foreground and Background color&lt;/li&gt;
          &lt;li&gt;"formatAll" - Bold, Italic, Underline, Superscript, Subscript, Strikethrough.
              If "formatAll" is in the list, "formatCommon" and "formatUncommon" will be ignored.
            &lt;ul&gt;
              &lt;li&gt;"formatCommon" - Bold, Italic, Underline&lt;/li&gt;
              &lt;li&gt;"formatUncommon" - Superscript, Subscript, Strikethrough&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;"justify" - Left, Center, Right and Full Justify&lt;/li&gt;
          &lt;li&gt;"list" - Bullet and Numbered List&lt;/li&gt;
          &lt;li&gt;"indent" - Outdent and Indent&lt;/li&gt;
          &lt;li&gt;"link" - Add and Remove Link&lt;/li&gt;
          &lt;li&gt;"newline" - put the next thing on a new line&lt;/li&gt;
          &lt;li&gt;"stretch" - adds a stretched component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/p&gt;
      &lt;p&gt;
        Custom toolbox content: when the richTextEditor encounters a string in toolboxLayout 
        that it doesn't recognize, like 'customToolbarXyz', it looks for a facet of 
        that name and renders the content if it finds it. In the future new facets may 
        be added to the richTextEditor. In order to avoid future name clashes strings starting 
        with the word 'custom' should be used for custom facets. We make no guarantees 
        for other names. 
      &lt;/p&gt;

        The toolboxLayout attribute allows the user to
        &lt;ul&gt;
          &lt;li&gt;add as many custom toolbars as desired, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="customToolbar1 all customToolbar2"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;stack as many toolbars as desired, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="all newline customToolbar newline customGroup"&lt;/li&gt;

          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;show multiple rows of toolbars. for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="customToolbar1 newline all"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;reorder the button groups, for example
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="format color mode stretch history font"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;remove toolbar content that isn't desired, for example the date buttons won't show up with this:
          &lt;ul&gt;
            &lt;li&gt;toolboxLayout="font mode color format justify"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
         <property-name>toolboxLayout</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.RichTextEditor</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Renders an input field for dates. The field can be tied to a
      ChooseDate element for easy date picking.
      &lt;p&gt;When chooseId attribute is set, the field is tied to a chooseDate 
      with the specified Id, and in that case values of attribute maxValue, 
      minValue, disabledDays, disabledDaysOfWeek and disabledMonths are 
      ignored.&lt;/p&gt;
      &lt;p&gt;When chooseId attribute is not set, the field has its own popup 
      chooseDate, and attribute maxValue, minValue, disabledDays, 
      disabledDaysOfWeek and disabledMonths are used to specifiy properties 
      of the popup chooseDate.&lt;/p&gt;
      &lt;p&gt;Action event and Return event are not fired in rich client. 
      They are only fired in PDA.&lt;/p&gt;
      &lt;p&gt;By default, value attribute accepts java.util.Date type.&lt;/p&gt;
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectInputDate.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputDate</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputDate</component-class><!--oracle.adf.RichInputDate facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.SelectInput properties-->
      <property>
         <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an return listener</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichInputDate properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum value allowed for the Date value. When set to a 
        fixed value on a tag, this will be parsed as an ISO 8601 date. 
        ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's 
        timezone, with the time components (hours, minutes, seconds, milliseconds) maximized. 
        All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with
maximum value for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds)
to allow the largest range of values to be accepted.
      </description>
         <property-name>maxValue</property-name>
         <property-class>java.util.Date</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the minimum value allowed for the Date value. When set to a 
        fixed value on a tag, this will be parsed as an ISO 8601 date. 
        ISO 8601 dates are of the form "yyyy-MM-dd" (for example: 2002-02-15) and the created Date object will be in the application's
        timezone, with the time components (hous, minutes, seconds, milliseconds) zeroed-out. 
        All other uses require java.util.Date objects.When binding to Date objects, it is advised to create the Date object with zeroed-out
values for any date-time components that aren't displayed (usually hours, minutes, seconds, milliseconds)
to allow the largest range of values to be accepted.
      </description>
         <property-name>minValue</property-name>
         <property-class>java.util.Date</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a binding to an implementation of the
         org.apache.myfaces.trinidad.model.DateListProvider interface. The
         getDateList method should generate a List of individual java.util.Date
         objects which will be rendered as disabled. The Dates must be in the
         context of the given base Calendar. Note: this binding requires
         periodic roundtrips. If you just want to disable certain weekdays
         (e.g. Saturday and Sunday), use the disabledDaysOfWeek attribute! 
      </description>
         <property-name>disabledDays</property-name>
         <property-class>org.apache.myfaces.trinidad.model.DateListProvider</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a whitespace delimited list of weekdays that should be
        rendered as disabled in every week. The list should consist of one or
        more of the following abbreviations: sun, mon, tue, wed, thu, fri, sat.
        By default all days are enabled.
      </description>
         <property-name>disabledDaysOfWeek</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a whitespace delimited list of months that should be rendered
        as disabled in every year. The list should consist of one or more of
        the following abbreviations: jan, feb, mar, apr, may, jun, jul, aug,
        sep, oct, nov, dec. By default all months are enabled.
      </description>
         <property-name>disabledMonths</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the id of the chooseDate component which can be used to pick the
        Date value for this inputDate.         
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc.
      </description>
         <property-name>chooseId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the number of columns to display in the text control. If no value is
        specified, a default value will be derived from the current converter,
        if one is attached.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute that will simultaneously set both the "label"
        and "accessKey" attributes from a single value, using
        conventional ampersand notation.
        For example, setting this attribute to "T&amp;amp;ext" will
        set the label to "Text" and the access key to 'e'.
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectInput</component-family>
         <renderer-type>oracle.adf.rich.Date</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Renders an input field for colors. The field can be tied to a ChooseColor element for easy color picking.
      &lt;p&gt;When chooseId attribute is set, the field is tied to a chooseColor with the specified Id, and 
      in that case values of attribute colorData, customColorData, defaultColor and width are ignored.&lt;/p&gt;
      &lt;p&gt;When chooseId attribute is not set, the field has its own popup chooseColor, and attribute 
      colorData, customColorData, defaultColor and width are used to specifiy properties of the popup 
      chooseColor.&lt;/p&gt;
      &lt;p&gt;Action event and Return event are not fired in rich client. 
      They are only fired in PDA.&lt;/p&gt;
      &lt;p&gt;Note: The value attribute should be a java.awt.Color object.
      &lt;/p&gt;&lt;/html&gt;
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputText.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputColor</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputColor</component-class><!--oracle.adf.RichInputColor facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.SelectInput properties-->
      <property>
         <description>a reference to an action method sent by the commandButton, or the static outcome of an action</description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an return listener</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichInputColor properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the list of colors to be displayed in the standard color palette. 
        The number of provided colors can be 49, 64 and 121, depending on the width 
        attribute. For example, if width is 7, the number should be 49.  If the 
        number does not match the width, extra color element in the list will be 
        ignored and missing color elements will be displayed as no-color.  The 
        color list must be of an array of type TrColor in the client side.  
        On the server side, it must be a java.util.List of java.awt.Color objects
        or a java.util.List of hex color code strings (in the tag only).
        Customer may define their own color palette, such as show 169 color palette with width 
        of value 13.
        
      </description>
         <property-name>colorData</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the list of custom defined colors. The number of colors can be 
        7, 8, 11, equivalent to the width attribute. The color list must be of
        an array of type TrColor in the client side. On the server side, it must be a 
        java.util.List of java.awt.Color objects or  a java.util.List of hex color code strings (in the tag only).
      </description>
         <property-name>customColorData</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the default color. When setting using the tag it could take a type java.lang.String of hex color code.
      </description>
         <property-name>defaultColor</property-name>
         <property-class>java.awt.Color</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the width of the standard palette in cells.  The supported values listed above
          will show the palette with 49, 64 and 121 colors respectively.  In case the width specified is 
          not one of the default supported values, the color palette with closest and less number of colors will be 
          used unless a custom color palette is defined using the colorData attribute. 
      </description>
         <property-name>width</property-name>
         <property-class>int</property-class>
         <default-value>7</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>true</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the Last Used button is displayed. When set to true, the Last Used Button will be rendered. Last used color information does not persist across browser sessions.
      </description>
         <property-name>lastUsedVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Default button is displayed. When set to true, the Default Button will be rendered.
      </description>
         <property-name>defaultVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Custom Color button and custom color row are displayed. When set to true, the Custom Color Button and custom color row will be rendered.
      </description>
         <property-name>customVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the number of columns to display in the text control. If no value is
        specified, a default value will be derived from the current converter,
        if one is attached.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This 
is intended for basic style changes; you should use the skinning mechanism if you 
require any complex style changes.  The inlineStyle is a set of CSS styles that 
are applied to the root DOM element of the component.  Many components are 
composed of several DOM elements which may have their own styles applied to them.  
Defining a style in the inlineStyle may not always give you what you want.  
For example, if one of the inner DOM elements for this component has a background 
color specified for it in the skin, setting a background color in the inlineStyle 
may not provide any visible change (at least for where that inner DOM element 
exists) because the inner DOM element's background color will win (since that DOM 
element is essentially layered on top of the root element).  In cases like this, 
you can use a different skin (or define your own) that defines a skinning key 
for that inner DOM element where its background color is inhibited (e.g. with 
-tr-inhibit: background-color) or otherwise set to the color you want.</description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;&lt;p&gt;
        the id of the chooseColor component which can be used to pick the
        Color value for this inputColor. If not set, the inputColor has its own popup chooseColor.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc.
        &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>chooseId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;an attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;a CSS style class to use for this component. 
      The styleClass attribute value is rendered on the root dom element.
      &lt;/html&gt;
      </description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;an attribute which when set to true, the color value text field 
      will be hidden. 
      &lt;/html&gt;
      </description>
         <property-name>compact</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectInput</component-family>
         <renderer-type>oracle.adf.rich.Color</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectItem tag represents a single item that the user
may select from a list, choice, radio, or shuttle ADF control.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectItem</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.SelectItem properties-->
      <property>
         <description>the value used to identify this item when the
              parent control is submitted to the server.  If no value is specified
              for a particular item, the item's contents will be used as its
              value.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichSelectItem properties-->
      <property>
         <description>the user-visible text of the item</description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the item is disabled.  By default, no
          items are disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>this attribute is deprecated. 
        It is ignored and will be removed in a future release.
      </description>
         <property-name>longDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>longDesc is deprecated, and it is ignored.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the short description of the option.  This text
         is commonly used by user agents to display advisory information about the option.
      </description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectItem</component-family>
         <component-metadata>
            <customization-allowed>false</customization-allowed>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
            <fmd:required-ancestor-contracts>oracle-adf-richselectitem-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The activeOutputText component supports styled text. The text can optionally be left unescaped. Due to perforamnce overhead compared to &lt;code&gt;&amp;lt;af:outputText&amp;gt;&lt;/code&gt;, you should only use this component if you plan to support changing the text through active data, otherwise you should use the &lt;code&gt;&amp;lt;af:outputText&amp;gt;&lt;/code&gt; component. Unlike OutputText, conversion to and from Java objects is not supported.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/outputText.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichActiveOutputText</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichActiveOutputText</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichActiveOutputText properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the String to display</description>
         <property-name>value</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; an attribute controlling whether output will
be escaped for the current markup language or not.  This attribute
defaults to true, and should only be set to false if absolutely necessary.
When set to false, you may exposed to cross-site scripting attacks if
the value of this component is any way derived from values supplied
by a user;  see &lt;code&gt;outputFormatted&lt;/code&gt; for a safe, non-active
alternative.  In addition, nearly all attributes are ignored when "escape"
is set to false (e.g., "styleClass" is not output).&lt;/html&gt;
      </description>
         <property-name>escape</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
      </property>
      <property>
         <description>whether whitespace wrapping should be allowed in this component.</description>
         <property-name>noWrap</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an additional description to be attached
to the text, for use in improving accessibility.  The description will
be available to screen readers and other accessibility agents, but will
not be otherwise visible.
      </description>
         <property-name>description</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <renderer-type>oracle.adf.rich.ActiveText</renderer-type>
         <component-family>oracle.adf.rich.ActiveText</component-family>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>value</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Represents a vertical menu component. Typically, this is used as a child of a menuBar or popup.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelMenu.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichMenu</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichMenu</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichMenu properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the menu content is delivered with the initial page. When contentDelivery 
        is "immediate", the content is inlined into the initial page.  If contentDelivery is "lazy", 
        the menu's content will be delivered to the client only after the first request to show that 
        menu.  By default, contentDelivery is immediate, which means the menu content will be sent 
        to the client on initial rendering.
      </description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>immediate</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the menu should be disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the text of the item</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
        a character used to gain quick access to this menu.
        For accessibility reasons, this functionality is not supported in
        screen reader mode.
        &lt;p&gt;
        If the same access key appears in multiple input fields in the same
        page of output, the rendering user agent will cycle among the elements
        accessed by the similar keys. Note that user agents are inconsistent
        about dealing with two links having same access key, and so the cycling
        behavior is dependent on what the user agent provides.
        &lt;/p&gt;
        &lt;p&gt;
        This attribute is sometimes referred to as the "mnemonic".
        &lt;/p&gt;
        &lt;p&gt;
        The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; exist
        in the &lt;code&gt;Text&lt;/code&gt; attribute of this button instance. If it does
        not, the user will receive no visual indication of the existence of the
        accessKey. The easiest, and most convenient way to specify both the
        text and the mnemonic together is to use textAndAccessKey.
        &lt;/p&gt;
        &lt;p&gt;
        Note that the accessKey is triggered by browser-specific and platform-specific
        modifier keys. It even has browser-specific meaning. For example, Internet
        Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0
        on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;.
        Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;.
        Refer to your browser's documentation for how it treats accessKey.
        &lt;/p&gt;
        &lt;p&gt;
        Beyond normal type menu access key behavior, menus and commandMenuItems support menu-type
        access key behavior when the focus is currently in a menu or menuBar. Menu-type access key
        behavior allows access to contained menus, submenus, and commandMenuItems without the need 
        for any keyboard modifiers. When the focus is inside a menu or menuBar, you can simply press 
        the accessKey, without modifiers, for a menu or commandMenuItem accessible within the menu 
        or menuBar to immediately move focus to that menu item.
        &lt;/p&gt;
        &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the item is detachable.</description>
         <property-name>detachable</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the URI of an image to be displayed on the menu item. This 
              attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Menu</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichCommandMenuItem oracle.adf.RichMenu oracle.adf.RichGoMenuItem org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richmenu-holder</fmd:required-ancestor-contracts>
            <fmd:satisfied-contracts>oracle-adf-richmenuitem-holder oracle-adf-richmenu-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The outputText component supports styled text.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/outputText.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichOutputText</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichOutputText</component-class><!--oracle.adf.RichOutputText facets-->
      <facet>
         <description>Location for contextual information. A contextInfo component is expected. Facet is ignored if escape is false.
      </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichOutputText properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; an attribute controlling whether output will
be escaped for the current markup language or not.  This attribute
defaults to true, and should only be set to false if absolutely necessary.
When set to false, you may exposed to cross-site scripting attacks if
the value of this component is any way derived from values supplied
by a user;  see &lt;code&gt;outputFormatted&lt;/code&gt; for a safe
alternative.  In addition, nearly all attributes are ignored when "escape"
is set to false (e.g., "styleClass" is not output).&lt;/html&gt;
      </description>
         <property-name>escape</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
      </property>
      <property>
         <description>whether whitespace wrapping should be allowed in this component.</description>
         <property-name>noWrap</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the length at which the text should automatically begin truncating. 
When set to zero (the default), the string will never truncate. Values from one to fifteen will
 display the first 12 characters followed by an ellipsis (...).  The outputText component will 
not truncate strings shorter than fifteen characters.  For example, for the value of 1234567890123456,
 setting truncateAt to 0 or 16 will not truncate.  Setting truncateAt to any value between 1-15
 will truncate to 123456789012...

      </description>
         <property-name>truncateAt</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an additional description to be attached
to the text, for use in improving accessibility.  The description will
be available to screen readers and other accessibility agents, but will
not be otherwise visible.
      </description>
         <property-name>description</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Output</component-family>
         <renderer-type>oracle.adf.rich.Text</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>value</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The outputFormatted bean accepts a string in its "value" attribute
        containing a very limited set of HTML markup and outputs formatted
        results.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/outputFormatted.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichOutputFormatted</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichOutputFormatted</component-class><!--oracle.adf.RichOutputFormatted facets-->
      <facet>
         <description>Location for contextual information. A contextInfo component is expected.
     </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichOutputFormatted properties-->
      <property>
         <description>the style usage, intended to make it easier to
              put the correct style on the text.
              Set this attribute when the outputFormatted
              is for instruction text, page stamp text, or inContextBranding
              text.
              If styleUsage and styleClass attributes are both set,
              the styleClass attribute takes precedence.
      </description>
         <property-name>styleUsage</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>pageStamp instruction inContextBranding</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Output</component-family>
         <renderer-type>oracle.adf.rich.Formatted</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>value</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The messages component gives the user important messaging information
that may or may not be directly related to specific components.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/messages.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichMessages</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichMessages</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichMessages properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the main text message for the box.</description>
         <property-name>message</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the overridden title text.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether to render all messages or just global messages. Normally
global messages are rendered followed by messages for individual
components. If this attribute is set to true, only the global
messages will be rendered.
      </description>
         <property-name>globalOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether to render the message list inline with the page or in a popup window. Normally
these messages are rendered in a pop up. If this attribute is set to true, the messages list will be rendered inline wherever
this component is located in the page layout.
      </description>
         <property-name>inline</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Messages</component-family>
         <renderer-type>oracle.adf.rich.Messages</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichGoLink</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The Header Panel control places a label and optional icon at the top of a section.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelHeader.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelHeader</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelHeader</component-class><!--oracle.adf.RichPanelHeader facets-->
      <facet>
         <description>A Facet that can be used to display contextual information on the header. 
      The contextual information is displayed next to the header text
      </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      Both help facet when rendered inline and helpTopicId with instructions text are rendered in the same spot,
      so if helpTopicId is specified and it has instructions text, the help facet will not be rendered if specified
      inline.
      Help content that is displayed to the user. The content of the help is displayed inline inside the
      header content or as a popup through a link. The attribute helpType controls whether the help is displayed inline or in a popup.
      </description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Toolbar component that is rendered on the header.
      </description>
         <facet-name>toolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>MenuBar component that is rendered on the header.
      </description>
         <facet-name>menuBar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>A Facet that can be used to display legend information on the header. 
      If the help facet has a child and it is visible, the contents of the legend facet will be 
      rendered beneath the task stamps. If the legend facet is not visible or no children exist, 
      then it gets rendered below the title.
      </description>
         <facet-name>legend</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>A facet that displays addition information inside the header content. 
      This informtion is displayed end aligned under the header
      </description>
         <facet-name>info</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelHeader properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the label of the header.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>true</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed in the header. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;how the component will handle geometry management.  
      Options are:
        &lt;ul&gt;&lt;li&gt;default - either flow or stretch, depending on the container the panelBox is inside
        &lt;/li&gt;&lt;li&gt;flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children
        &lt;/li&gt;&lt;li&gt;stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children
        &lt;/li&gt;&lt;/ul&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default flow stretch</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the inline style of the content region.
      </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Along with the help facet this is deprecated, helpTopicId should be used for providing help.  Controls if the help is displayed inline or as a link to a popup.
      </description>
         <property-name>helpType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>inline</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>inline link</fmd:property-values>
               <fmd:deprecated>helpType is deprecated, helpToicId should be used for providing help.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        whether an error, info, confirmation, or warning header is needed.
      </description>
         <property-name>messageType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>info confirmation warning none error</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the size of this header. The largest is 0 and corresponds to an H1 header
        the smallest is 5 and corresponds to an H6 Header.  Note that this version of the tag will 
        display all sizes above 2 the same as size 2. Setting the size to a negative number will
        allow the header to be calculated according to its parent header.  The default value for 
        this property is -1.
      </description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Header</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The panelBox is used to place ancillary information on a page,
offset by a certain color.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelBox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelBox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelBox</component-class><!--oracle.adf.RichPanelBox facets-->
      <facet>
         <description>Header location for toolbar content. 
      </description>
         <facet-name>toolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelBox properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata><cpf:persistent>true</cpf:persistent>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Whether or not to render the disclosure icon. If this is set to false
                            all other attributes that deal with disclosure are ignored.</description>
         <property-name>showDisclosure</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the header text of the panelBox.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;how the panelBox will handle geometry management.  
      Options are:
        &lt;ul&gt;&lt;li&gt;default - either flow or stretch, depending on the container the panelBox is inside
        &lt;/li&gt;&lt;li&gt;flow - does not support being stretched and will not attempt to stretch the children; the height of the panelBox will be determined by the browser based on the children
        &lt;/li&gt;&lt;li&gt;stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of the panelBox is in no way determined by the children
        &lt;/li&gt;&lt;/ul&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default flow stretch</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the display strategy for the panelBox's header. It should be either
"never", "ifNeeded", or "always".  No header will be shown if the value is "never".
If the value is "always", the header will always be shown.  This value is useful when
the panelBox has a drag source attached or when you want the user to have access to
the disclosure control.  If the value is "ifNeeded", the header will only be
shown if the "icon" or "text" properties are set, if the "toolbar" facet is  populated,
or if the panelBox has a drag source attached.
The default is "ifNeeded" for backwards compatibility
      </description>
         <property-name>showHeader</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>ifNeeded</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>never ifNeeded always</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the appearance type of the content container. It should be either "core"
or "highlight"
      </description>
         <property-name>ramp</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>core</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>core highlight</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the appearance type of the content container. It should be one of "light",
"medium", "dark", or "default"
      </description>
         <property-name>background</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>light medium dark default</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the URI of an image to be displayed in the panelBox header. This 
              attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the inline style of the content region.
      </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the alignment of the text and icon within the title bar.  Supported values are:
&lt;ul&gt;
&lt;li&gt;"start": left side of the bar in left-to-right mode, right of the bar in right-to-left mode (this is the default)&lt;/li&gt;
&lt;li&gt;"end": right side of the bar in left-to-right mode, left side of the bar in right-to-left mode&lt;/li&gt;
&lt;li&gt;"center": in the center&lt;/li&gt;
&lt;li&gt;"left": left side of the bar&lt;/li&gt;
&lt;li&gt;"right": right side of the bar&lt;/li&gt;
&lt;/ul&gt;
This valueis ignored if the toolbar facet is defined. </description>
         <property-name>titleHalign</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>start</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>start end center left right</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Box</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichOutputText oracle.adf.RichOutputFormatted oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
Renders a PageTemplate.

    </description>
      <component-type>oracle.adf.RichPageTemplate</component-type>
      <component-class>oracle.adf.view.rich.component.rich.fragment.RichPageTemplate</component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.PageTemplate properties-->
      <property>
         <description>
        If this attribute is set to an instance of
        &lt;code&gt;oracle.adf.view.rich.model.PageTemplateModel&lt;/code&gt;, the view ID will be
        taken from the model and the model will receive notifications of the starting and stopping
        of the template context. Otherwise, if the value is non-null the value is assigned to the
        "bindings" EL variable while this template is rendering or decoding.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        This is the viewId of the resource that contains the definition
        for this pageTemplate. Typically this points to another jsp page, that
        begins with the &amp;lt;af:pageTemplateDef/&amp;gt; tag.
        &lt;p&gt;If the value attribute of the page template resolves to an instance of
        PageTemplateModel then the view ID will be retrieved from the the model instead
        of using the &lt;code&gt;viewId&lt;/code&gt; tag attribute.&lt;/p&gt;
      </description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichPageTemplate properties-->
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.PageTemplate</component-family>
         <renderer-type>oracle.adf.rich.PageTemplate</renderer-type>
         <tag-handler>oracle.adfinternal.view.faces.facelets.rich.IncludeHandler</tag-handler>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Used anywhere to add spacing between items.  Note that some browsers give page
containers a minimum height equal to the line height of the font for that container rather than
the height of the container's content.  In some cases your container may have only a spacer in
it.  In that case, you may notice more height is allocated than the height you set for your
spacer.  To make that container use the height you desire, you may specify a line-height style
on your container with a pixel value equal to your desired height.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/objectSpacer.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSpacer</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichSpacer</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichSpacer properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the height value assigned to the spacer. The value entered is directly applied to 
        the underlying HTML IMG tag's height attribute. The value can be a pixel or percentage value. 
        A percentage value should be entered as a number folowed by the "%" symbol. A number will be 
        interpreted as a pixel value (as will a number followed by the text "px").
      </description>
         <property-name>height</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>10</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width value assigned to the spacer. The value entered is directly applied to 
        the underlying HTML IMG tag's width attribute. The value can be a pixel or percentage value. 
        A percentage value should be entered as a number folowed by the "%" symbol. A number will be 
        interpreted as a pixel value (as will a number followed by the text "px").
      </description>
         <property-name>width</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>10</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.Spacer</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>height</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectManyChoice component creates a menu-style component, which allows the user to select multiple values from a dropdown list of items.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectManyChoice.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectManyChoice</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectManyChoice</component-class><!--oracle.adf.RichSelectManyChoice facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectManyChoice properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;
          &lt;/html&gt;
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the select-all option is visible.</description>
         <property-name>selectAllVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectMany</component-family>
         <renderer-type>oracle.adf.rich.Choice</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The menuItem control creates a menu item representation of a UIXCommand.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandMenuItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandMenuItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandMenuItem</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandMenuItem properties-->
      <property>
         <description>the text of the item</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the item should be disabled.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
        a character used to gain quick access to this button.
        For accessibility reasons, this functionality is not supported 
        in screen reader mode.
        &lt;p&gt;
        If the same access key appears in multiple input fields in the 
        same page of output, the rendering user agent will cycle among 
        the elements accessed by the similar keys. Note that user agents 
        are inconsistent about dealing with two links having same access 
        key, and so the cycling behavior is dependent on what the user agent 
        provides.
        &lt;/p&gt;
        &lt;p&gt;
        This attribute is sometimes referred to as the "mnemonic".
        &lt;/p&gt;
        &lt;p&gt;
        The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; exist in the
        &lt;code&gt;Text&lt;/code&gt; attribute of this button instance.
        If it does not, the user will receive no visual indication of
        the existence of the accessKey.
        The easiest, and most convenient
        way to specify both the text and the mnemonic together is
        to use textAndAccessKey.
        &lt;/p&gt;
        &lt;p&gt;
        Note that the accessKey is triggered by browser-specific and platform-specific 
        modifier keys. It even has browser-specific meaning. For example, Internet 
        Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
        on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
        Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
        Refer to your browser's documentation for how it treats accessKey.
        &lt;/p&gt;
        &lt;p&gt;
        Beyond normal type menu access key behavior, menus and commandMenuItems support menu-type
        access key behavior when the focus is currently in a menu or menuBar. Menu-type access key
        behavior allows access to contained menus, submenus, and commandMenuItems without the need 
        for any keyboard modifiers. When the focus is inside a menu or menuBar, you can simply press 
        the accessKey, without modifiers, for a menu or commandMenuItem accessible within the menu 
        or menuBar to immediately move focus to that menu item.
        &lt;/p&gt;
        &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>whether the action should be done through a partial page submit
            or not.
            Default is true: commandMenuItems use partial submissions by default.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the menu item. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the item is selected.</description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
      the alternate text shown when a type antonym menu item is selected.
      </description>
         <property-name>selectedText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        &lt;html&gt;
          the type of menu item. The default type is a normal menu item, while the other types 
          provide special behavior.
          &lt;p&gt;
          The check type displays a check mark next to it when it is selected. It is useful to 
          represent a boolean toggle.
          &lt;/p&gt;
          &lt;p&gt;
          The radio type displays a radio button next to it when it is selected. It is useful to 
          represent a multiple choice toggle. Radio type menu items are considered part of the same 
          group by their container, either menu or group. When a radio type menu item is selected, 
          other radio type menu items in the same group are unselected.
          &lt;/p&gt;
          &lt;p&gt;
          The antonym type displays different text depending on its selection state. When it is not
          selected, it displays its text value. When it is selected, it displays its selectedText
          value.
          &lt;/p&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default check radio antonym</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the keystroke that will activate this command.  This keystroke will be converted into a textual representation and displayed as the accelerator label for this menu item.
      </description>
         <property-name>accelerator</property-name>
         <property-class>java.awt.AWTKeyStroke</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.MenuItem</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:required-ancestor-contracts>oracle-adf-richmenuitem-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The goImageLink tag is an HTML link with extra images added.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/goLink.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichGoImageLink</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichGoImageLink</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Go properties-->
      <property>
         <description>the URI this go component references</description>
         <property-name>destination</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichGoImageLink properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;</description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the target frame for the go component.</description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the textual label of the go component. Go components 
              will also render children elements (including text nodes), though 
              not all subclasses of the go component will necessarily support
              children.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
                For example, setting this attribute to "T&amp;amp;amp;ext" will set 
                the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;</description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the mouse has
          pressed the link. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
             As depressedIcon does not allow alternative text to be provided for the
             image, in order to create an accessible product depressedIcon must only be
             used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>depressedIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the link is 
          disabled. This attribute supports the same URI types described for the icon attribute.
          &lt;br/&gt;&lt;br/&gt;
           &lt;strong&gt;
            As disabledIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product disabledIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
       &lt;/html&gt;
      </description>
         <property-name>disabledIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the mouse is hovering 
          over the link. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As hoverIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product hoverIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>hoverIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with the link. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute specifying the position of the icon.</description>
         <property-name>iconPosition</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>leading</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>leading trailing</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Go</component-family>
         <renderer-type>oracle.adf.rich.ImageLink</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A component which allows the end user to select a checkbox.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectBooleanCheckbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectBooleanCheckbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectBooleanCheckbox</component-class><!--oracle.adf.RichSelectBooleanCheckbox facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.SelectBoolean properties-->
      <property>
         <description>whether or not the component is
              currently selected.  This is a typesafe alias for the "value"
              attribute.
      </description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <alias-of>value</alias-of>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectBooleanCheckbox properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the text of the checkbox.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute that will simultaneously set both the "text" and "accessKey" attributes from a single value, using conventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" will set the text to "Text" and the access key to 'e'.
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectBoolean</component-family>
         <renderer-type>oracle.adf.rich.Checkbox</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The Table is used to display tabular data. It also supports selection (both single and multiple), sorting, and record navigation.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/table.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTable</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichTable</component-class><!--org.apache.myfaces.trinidad.Table facets-->
      <facet>
         <description>the component to stamp below every row which is disclosed. Adding a
detail facet will automatically cause the detail column to be displayed.
      </description>
         <facet-name>detailStamp</facet-name>
         <facet-extension>
            <facet-metadata/>
         </facet-extension>
      </facet><!--oracle.adf.RichTable facets-->
      <facet>
         <description>the component used to render the table footer. This facet existed in 10.1.3, but is currently not supported in RichTable and RichTreeTable</description>
         <facet-name>footer</facet-name>
         <facet-extension>
            <facet-metadata>
               <hidden>true</hidden>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>the component used to render the table header. This facet existed in 10.1.3, but is currently not supported in RichTable and RichTreeTable</description>
         <facet-name>header</facet-name>
         <facet-extension>
            <facet-metadata>
               <hidden>true</hidden>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>popup component containing the context menu that
        will be shown on right click of any table row.
        The af:popup must contain an af:menu to display the context menu</description>
         <facet-name>contextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>popup component containing the context menu that
        will be shown on right click within the table body, but outside of any table row.
        The af:popup must contain an af:menu to display the context menu</description>
         <facet-name>bodyContextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Iterator properties-->
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.
The default is 25.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.
      </description>
         <property-name>first</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
      </property><!--org.apache.myfaces.trinidad.Table properties-->
      <property>
         <description>a method reference to an ExpansionListener</description>
         <property-name>rowDisclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.
      </description>
         <property-name>disclosedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a selection listener</description>
         <property-name>selectionListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the selection state for this component.</description>
         <property-name>selectedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a sort listener</description>
         <property-name>sortListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.
      </description>
         <property-name>rangeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the "Show All" option is selected. The "Show All" option
        is available if there are less than 30 options and the row count in
        the data model is known.
      </description>
         <property-name>showAll</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Table properties-->
      <property>
         <description>
      the model used for filtering of data in the table. This attribute must be bound to an instance of FilterableQueryDescriptor class.
      </description>
         <property-name>filterModel</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a Querylistener
      </description>
         <property-name>queryListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichTable properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A search expression to identify the popup component containing the context menu that will be shown within the table body, for clicks outside of any table row.  Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components).  You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers.  For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
      </description>
         <property-name>bodyContextMenuId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated, "bodyContextMenu" facet should be used instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether columns in this table are selectable.</description>
         <property-name>columnSelection</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none single multiple</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates what kind of stretching you want applied to the columns.
        For optimal performance, use the "none" (default) option.  If you want the last column
        to stretch to fill up any unused space inside of the viewport, use the "last" option.
        If you want to have an empty blank column be automatically inserted and have it
        stretch (so the row background colors will span the entire width of the table), use the
        "blank" option.  If you want to have a specific leaf (non-group) column stretch to fill
        up any unused space inside of the viewport, use the option where you specify "column:"
        followed by the ID of the column that you want to have stretched, e.g. "column:myColId".
        Note that row headers and frozen columns will not be stretched because doing so could
        easily leave the user unable to access the scrollable data body of the table.  Only a
        maximum of one column may be stretched at a time.
      </description>
         <property-name>columnStretching</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A search expression to identify the popup component containing the context menu that
        will be shown on right click of any table row.  Expressions are relative to this table component
        and must account for NamingContainers (for example, table and panelCollection are NamingContainer components).
        You can prepend a single colon to start the search from the root, or multiple colons to move up through
        the NamingContainers.  For example, a leading "::" will pop out of one NamingContainer
        (including the component itself if it is a naming container, like table) and begin search from there,
        ":::" will pop out of two NamingContainers and begin search from there, etc.
      </description>
         <property-name>contextMenuId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated, "contextMenu" facet should be used instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether column reordering is disabled in the table. Column reordering is on by default.</description>
         <property-name>disableColumnReordering</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Horizontal GridLines are to be drawn.</description>
         <property-name>horizontalGridVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the vertical GridLines are to be drawn.</description>
         <property-name>verticalGridVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text of an empty table. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component.  If it is not enclosed in an open and closing html tag, it will not be formatted.</description>
         <property-name>emptyText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the interval between which the column banding occurs. This value controls the display of the column banding in the table. For e.g, columnBandingInterval=1 would display alternately banded columns in the Grid.
      </description>
         <property-name>columnBandingInterval</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the interval between which the row banding occurs. This value controls the display of the row banding in the table. For e.g, rowBandingInterval=1 would display alternately banded rows in the Grid.
      </description>
         <property-name>rowBandingInterval</property-name>
         <property-class>int</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether rows in this table are selectable.</description>
         <property-name>rowSelection</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none single multiple multipleNoSelectAll</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width of this component. Default value is 300 PX</description>
         <property-name>width</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the summary of this table's purpose and structure
         for user agents rendering to non-visual media.
      </description>
         <property-name>summary</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the number of rows in the data fetch block</description>
         <property-name>fetchSize</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data should be fetched when the component is rendered initially.  When contentDelivery is "immediate", data is fetched and inlined into the component chrome.  If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request.</description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>lazy</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the row to display in the table during intial display.
      The possible values are "first" to display the first row,
      "last" to display the last row and "selected" to display the first selected row in the table.
      The default value for this is null which means that the first row is displayed.
      Please note that this API will have no effect if the total number of rows are not known from
      the table model (model.getRowCount()==-1).</description>
         <property-name>displayRow</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>first</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>first last selected</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the rowkey to display in the table during intial display.
      Specifying this attribute will override the displayRow attribute.
      Please note that this API will have no effect if the total number of rows are not known from
      the table model (model.getRowCount()==-1).</description>
         <property-name>displayRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates if we should actually select the row clicked when right clicking to show a context menu.
      By default the row is selected before the context menu is displayed. However if contextMenuSelect="false",
      and if user right clicks a row, the new row is highlighted and the highlighting for the currently selected row(s) is cleared
      when the context menus is displayed. The highlighting of the currently selected row(s) is restored after the context menu is dismissed.
      It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected row(s).
      The highlighted row key is established as a currency in the table when the action for context menu item is executed. The currency in the table can be
      retrieved by calling "table.getRowKey()".</description>
         <property-name>contextMenuSelect</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates the mode used to edit the table when it contains editable components.
      The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area.
      In "clickToEdit" mode a single row editable at a time. A row becomes editable by double clicking on it.
      If a user types F2, the currently selected row becomes editable. Typing Esc removes the user from editing mode.
      User can then navigate next/previous rows using tab, &amp;lt;shift&amp;gt;tab, or enter.</description>
         <property-name>editingMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>editAll</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>editAll clickToEdit</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate current vertical scroll position.
      </description>
         <property-name>scrollTop</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate current horizontal scroll position.
      </description>
         <property-name>scrollLeft</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate row key for the first visible row.
      </description>
         <property-name>scrollTopRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to turn on/off the clearing of the row key token cache when the component is PPRed. 
      Default is true
      </description>
         <property-name>clearTokenCacheOnPPR</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not to enable the show/hide all
              links above the table,
              which allow the user to show/hide all the detail rows.
              To enable the detail rows, a "detailStamp" facet must be set on
              this Table. This attribute existed in 10.1.3, but is currently not supported in RichTable
      </description>
         <property-name>allDetailsEnabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the filter fields are displayed on the top of the table.
      </description>
         <property-name>filterVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The number of rows used to size the table height. The default value is -1 (no auto-sizing for any number of rows).
      Table height auto-sizing is performed only when the contentDelivery property is set to immediate.
      This value cannot be larger than "fetchSize" attribute. 
      If a value larger than fetchSize is specified, the value is capped at the fetchSize.
      If a value larger than the number of rows is specified, the number of rows in the table is used to size the table height.
      Note that specifying a CSS "height" in the "inlineStyle" attribute will override auto-sized height, 
      while specifying CSS "min-height" and "max-height" values in the "inlineStyle" attribute will provide limits for auto-sizing results. 
      When table is placed in a layout-managing container, such as panelSplitter, it will be sized by the container 
      (no auto-sizing will occur).</description>
         <property-name>autoHeightRows</property-name>
         <property-class>int</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Table</component-family>
         <renderer-type>oracle.adf.rich.Table</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection sort </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection sort </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>id</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichColumn</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richcolumn-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Renders an icon.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/objectIcon.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichIcon</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichIcon</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichIcon properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a name identifying the icon that should be rendered. Valid values are "required", 
        "warning", "info", "error", "logo" and "changed".
      </description>
         <property-name>name</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>required</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>required warning info error logo changed</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.Icon</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>name</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Used to present a list of values as a choice list control. 
       RichInputComboboxListOfValues provides the user with a list of values to select, in a choice 
       list control. User can either select a value from the list and return data for fields in the 
       main page or click on a "Search..." link at the bottom of the 
       drop down panel to launch the "Search and Select" dialog. The dialog enables the user to 
       search for more values and select the desired value that should go into the LOV field on the 
       base page.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/faces/metadata/icons/rich/inputComboboxListOfValues.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputComboboxListOfValues</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputComboboxListOfValues</component-class><!--oracle.adf.RichInputComboboxListOfValues facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Location for contextual information. A contextInfo component is expected.
     </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Allows user to specify custom entries in the choice list (drop down 
        panel). It can be one commandLink or multiple commandLinks that are wrapped in a group 
        component. It is the developer's responsibility to wire up the action for the custom 
        commandLink to, say, a popup dialog.</description>
         <display-name>customActions</display-name>
         <facet-name>customActions</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichCommandLink org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.InputPopup properties-->
      <property>
         <description>a method reference to a LaunchPopupListener (called in response to a 
      LaunchPopupEvent).</description>
         <property-name>launchPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        A ListOfValuesModel object that represents the model for the LOV component. The 
        ListOfValuesModel currently provides methods for use within the LOV component and in 
        addition, to retrieve a QueryModel and TableModel in order to to display a table and/or a 
        query component (which are then used to search and select a value for the LOV component).  
        For details, please refer to the Javadocs for 
        oracle.adf.view.rich.model.ListOfValuesModel
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.ListOfValuesModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a ReturnPopupListener (called in response to a 
        ReturnPopupEvent).</description>
         <property-name>returnPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A method reference to a ReturnPopupDataListener (called in response to a 
      ReturnPopupDataEvent). The attrbite is deprecated and will be 
      removed in the future release.</description>
         <property-name>returnPopupDataListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>The ReturnPopupDataEvent is not queued on the component anymore, The attribute will be removed in future</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the id of the user-defined popup component relative to this component (accounting for
        NamingContainers). If this attribute is supplied, an af:toolbar with af:commandToolbarButton
        will be created internally, which will be displayed as create icon in the Search and Select
        dialog. Clicking the button launches the user-defined popup component.&lt;br/&gt;
        If the developer has added a dialog within the popup, then the decision to refresh the table
        is made by the component intelligently(table will be refreshed on pressing Ok button in the
        dialog). If the developer has not added a dialog to the popup, then the table will be
        refreshed always.&lt;br/&gt; 
        Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root, 
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container 
        and begin the search from there, ":::" will pop out of
        two naming containers and begin the search from there, etc.
      </description>
         <property-name>createPopupId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the mode that controls how the user specifies a value. This attribute is only applicable when the 'readOnly' attribute is set to false.
        &lt;p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;input&lt;/b&gt;: this mode allows the user to type in a value as well as browse and select from a list of available values.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;select&lt;/b&gt;: this mode allows the user only to browse and select from a list of available values.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/p&gt;
        &lt;/html&gt;
        
      </description>
         <property-name>editMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>input</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>input select</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputComboboxListOfValues properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>
        an attribute which if set to TRUE, tells the component to automatically 
        tab to the next focusable, when the maxlength for the current component has been reached.
      </description>
         <property-name>autoTab</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the size of the text control specified by the number of characters shown.
         The default value depends on the browser.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a list of data for the live content inside the drop down panel of the 
        inputComboboxListOfValues component.
      </description>
         <property-name>items</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>This attribute is deprecated, and it is ignored</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute that will simultaneously set both the "label"and "accessKey" 
        attributes from a single value, using the conventional ampersand notation. For example, 
        setting this attribute to "T&amp;amp;ext" will set the label to "Text" and the access key to 'e'
        .
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum number of characters per line that can be entered into the 
        text control.
      </description>
         <property-name>maximumLength</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the title of the Search and Select popup dialog.</description>
         <property-name>popupTitle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the search information that appears in the tooltip when user does a 
        mouseover on the Search icon.
      </description>
         <property-name>searchDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a customized list of options that is part of a "Favorites" list. The recent items 
        list is displayed before the list of items and can be a list of the most recently used 
        (MRU) items in the dataset.
      </description>
         <property-name>recentItems</property-name>
         <property-class>java.util.List</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>This attribute is deprecated, and it is ignored</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the name of the EL variable used to reference each row inside the drop down panel. 
        Once this component has completed rendering, this variable is removed (or reverted back to 
        it's previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.ComboboxListOfValues</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The commandLink component creates a link that, when pressed, will generate an action event on the server.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandLink.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandLink</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandLink</component-class><!--oracle.adf.RichCommandLink facets-->
      <facet>
         <description>Location for contextual information. A contextInfo component is expected.
     </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandLink properties-->
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this link.
              For accessibility reasons, this functionality is not 
              supported in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple input fields in the 
                same page of output, the rendering user agent will cycle among 
                the elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;Text&lt;/code&gt; attribute of this Link instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>an attribute which if set to TRUE the component will start blocking 
              user input when the action is initiated. The blocking will stop 
              when a response is received from the server.
      </description>
         <property-name>blocking</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the link should be considered disabled.
              This attribute only has meaning when links are used in certain
              container types, such as global headers and tab bars.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the action should be done through a partial 
              page submit or not. Default is false: no partial page submit.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the textual label of the link.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will set 
              the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.Link</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A note window is a floating panel that contains read-only information associated with a particular
     UI component. Note windows are used to display help and messages.
     </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/noteWindow.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichNoteWindow</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichNoteWindow</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichNoteWindow properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>visible has been deprecated. Use the af:showPopupBehavior tag or the show/hide methods on the popup client component.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <no-op/>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.NoteWindow</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richnotewindow-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The commandImageLink control creates a link with extra images added.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandLink.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandImageLink</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandImageLink</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandImageLink properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this link.
              For accessibility reasons, this functionality is not 
              supported in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple input fields in the 
                same page of output, the rendering user agent will cycle among 
                the elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;Text&lt;/code&gt; attribute of this Link instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>an attribute which if set to TRUE the component will start blocking 
              user input when the action is initiated. The blocking will stop 
              when a response is received from the server.
      </description>
         <property-name>blocking</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the link should be considered disabled.
              This attribute only has meaning when links are used in certain
              container types, such as global headers and tab bars.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the mouse has
          pressed the link. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
             As depressedIcon does not allow alternative text to be provided for the
             image, in order to create an accessible product depressedIcon must only be
             used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>depressedIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the link is 
          disabled. This attribute supports the same URI types described for the icon attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As disabledIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product disabledIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>disabledIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with this link when the mouse is hovering 
          over the link. This attribute supports the same URI types described for the icon 
          attribute.
          &lt;br/&gt;&lt;br/&gt;
          &lt;strong&gt;
            As hoverIcon does not allow alternative text to be provided for the
            image, in order to create an accessible product hoverIcon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>hoverIcon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with the link. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute specifying the position of the icon.
      </description>
         <property-name>iconPosition</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>leading</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>leading trailing</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the action should be done through a partial 
              page submit or not. Default is false: no partial page submit.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the textual label of the link.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will set 
              the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.ImageLink</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      A dialog component that displays its children in a window and delivers DialogEvents 
      when OK, Yes, No and Cancel buttons are activated.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/dialog.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichDialog</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichDialog</component-class><!--oracle.adf.RichDialog facets-->
      <facet>
         <description>
        A panel containing custom buttons.
      </description>
         <facet-name>buttonBar</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Dialog properties-->
      <property>
         <description>a method reference to a dialog listener method</description>
         <property-name>dialogListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichDialog properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the title of the window.
      </description>
         <property-name>title</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the URI specifying the location of the title icon source. The title icon will typically be displayed in the top left corner of the window
      </description>
         <property-name>titleIconSource</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the close icon is visible.
      </description>
         <property-name>closeIconVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. If provided, a help icon will appear in the title bar. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the content area of the dialog.
      </description>
         <property-name>contentHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the content area of the dialog.
      </description>
         <property-name>contentWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The stretching behavior for children.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched)&lt;/li&gt;
&lt;li&gt;"first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched)&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>stretchChildren</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none first</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The dialog's resizing behavior.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"off": the dialog automatically sizes to its content if stretchChildren is "none".&lt;/li&gt;
&lt;li&gt;"on": user can resize the dialog with their mouse by dragging any of the dialog edges.&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>resize</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>off</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>off on</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>visible has been deprecated. Use the af:showPopupBehavior tag or the show/hide methods on the popup client component.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <no-op/>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        An attribute that simultaneously sets the textual label of the ok and yes 
          footer buttons as well as the an optional accessKey character used to gain 
          quick access to the button.  The accessKey is identified using conventional 
          ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the textual label to "Text" and the accessKey to 'e'.
          &lt;/p&gt;
          For accessibility reasons, the access key functionality is not supported 
          in screen reader mode.
          &lt;p&gt;
          If the same accessKey appears in multiple locations in the
          same page of output, the rendering user agent will cycle
          among the elements accessed by the similar keys.
          &lt;/p&gt;
          &lt;p&gt;
          This accessKey is sometimes referred to as the "mnemonic".
          &lt;/p&gt;
          &lt;p&gt;
          Note that the accessKey is triggered by browser-specific and platform-specific 
          modifier keys. It even has browser-specific meaning. For example, Internet 
          Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
          on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
          Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
          Refer to your browser's documentation for how it treats accessKey.
          &lt;/p&gt;
      </description>
         <property-name>affirmativeTextAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        An attribute that simultaneously sets the textual label of the cancel 
          footer button as well as the an optional accessKey character used to gain 
          quick access to the button.  The accessKey is identified using conventional 
          ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the textual label to "Text" and the accessKey to 'e'.
          &lt;/p&gt;
          For accessibility reasons, the access key functionality is not supported 
          in screen reader mode.
          &lt;p&gt;
          If the same accessKey appears in multiple locations in the
          same page of output, the rendering user agent will cycle
          among the elements accessed by the similar keys.
          &lt;/p&gt;
          &lt;p&gt;
          This accessKey is sometimes referred to as the "mnemonic".
          &lt;/p&gt;
          &lt;p&gt;
          Note that the accessKey is triggered by browser-specific and platform-specific 
          modifier keys. It even has browser-specific meaning. For example, Internet 
          Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
          on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
          Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
          Refer to your browser's documentation for how it treats accessKey.
          &lt;/p&gt;
      </description>
         <property-name>cancelTextAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        An attribute that simultaneously sets the textual label of the no 
          footer button as well as the an optional accessKey character used to gain 
          quick access to the button.  The accessKey is identified using conventional 
          ampersand ('&amp;amp;') notation.
          &lt;p&gt;
          For example, setting this attribute to "T&amp;amp;amp;ext" will
          set the textual label to "Text" and the accessKey to 'e'.
          &lt;/p&gt;
          For accessibility reasons, the access key functionality is not supported 
          in screen reader mode.
          &lt;p&gt;
          If the same accessKey appears in multiple locations in the
          same page of output, the rendering user agent will cycle
          among the elements accessed by the similar keys.
          &lt;/p&gt;
          &lt;p&gt;
          This accessKey is sometimes referred to as the "mnemonic".
          &lt;/p&gt;
          &lt;p&gt;
          Note that the accessKey is triggered by browser-specific and platform-specific 
          modifier keys. It even has browser-specific meaning. For example, Internet 
          Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
          on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
          Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
          Refer to your browser's documentation for how it treats accessKey.
          &lt;/p&gt;
      </description>
         <property-name>noTextAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the buttons in the dialog. For example, value yesNoCancel means 
      there will be "Yes", "No" and "Cancel" buttons in the dialog.
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>okCancel</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none ok cancel yesNo okCancel yesNoCancel</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>if the dialog is modal; by default, true. A modal dialog does not allow the
        user to make changes on the base page until the dialog is closed.  A
        non-modal dialog will allow the user to make changes on the base page; if the
        user navigates away from the base page, the dialog will close.</description>
         <property-name>modal</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the value that specifies if the OK button is visible. It will be ignored when the type 
      attribute value is not equal to "okCancel".  
      </description>
         <property-name>okVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>okVisible is deprecated. Use the type attribute.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the value that specifies if the Cancel button is visible. It will be ignored when the type 
      attribute value is not equal to "okCancel".  
      </description>
         <property-name>cancelVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>cancelVisible is deprecated. Use the type attribute.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Dialog</component-family>
         <renderer-type>oracle.adf.rich.Dialog</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange dialog </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange dialog </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>title</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richdialog-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The quickQuery component is used to perform a quick search - quick as the 
    search is performed agianst the selected criterion.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/RichQuickQuery.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichQuickQuery</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichQuickQuery</component-class><!--oracle.adf.RichQuickQuery facets-->
      <facet>
         <description>
        The component used to display a list of criterion. A select component can be specified and
        by default, if a criteriaItems facet is not defined, a selectOneChoice component is created. 
        A quick search is performed against one of the criterion, using the values entered in "a 
        dynamically generated" value component. 
      </description>
         <facet-name>criteriaItems</facet-name>
      </facet>
      <facet>
         <description>The component to be displayed at the end of the quickQuery component. For e.g., 
        it is used to display a commandLink that toggles between quickQuery and query components, 
        when component is configured using ADF-DT. 
      </description>
         <facet-name>end</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Query properties-->
      <property>
         <description>
        whether the conjunction is readOnly or not
      </description>
         <property-name>conjunctionReadOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryDescriptor object. This provides information about the currently selected 
        saved search. For details about QueryDescriptor, please refer to 
        oracle.adf.view.rich.model.QueryDescriptor
      </description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.QueryDescriptor</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryModel object that collectively represents the entire model for the query 
        component. The QueryModel manages QueryDescriptors, iow, supports methods to create, clone 
        (from an existing), delete, reset and update a QueryDescriptor.  For details about 
        QueryModel, please refer to the Javadocs for oracle.adf.view.rich.model.QueryModel.
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.QueryModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a Querylistener
      </description>
         <property-name>queryListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a QueryOperationlistener
      </description>
         <property-name>queryOperationListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichQuickQuery properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the label of the quickQuery.
      </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. 
      Note that instructions text is not supported on this component, 
      otherwise all helpTopicId functionality is supported. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the type of layout.</description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the search description of the component. This text is displayed
                   as tooltip help text when mousing over the search icon.
      </description>
         <property-name>searchDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Query</component-family>
         <renderer-type>oracle.adf.rich.QuickQuery</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange query </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange query </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      A toolbar that usually contains commandToolbarButtons.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/toolbar.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichToolbar</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichToolbar</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichToolbar properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a non-negative integer that indicates the flexibility of this
component in its container.  If the container supports it (the toolbox component), flex
is used to determine how space is distributed among its children.
Components with larger flex values will be made larger than
components with lower flex values.  This is done so at the ratio
determined by the flex of each of the two components.  The actual
value is only relevant if there are other flexible components
(components with flex values larger than zero) within the same
container.
      </description>
         <property-name>flex</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id of a child component that will be given all of the available space left in the toolbar if the contents of the toolbar do not use all of the space that the toolbar has available</description>
         <property-name>stretchId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Toolbar</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>flex</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichCommandToolbarButton org.apache.myfaces.trinidad.Group</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The popup component is an invisible control whose contents will be used in popup windows, such as context menus.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/popup.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPopup</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichPopup</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPopup properties-->
      <property>
         <description>whether the popup content is delivered with the initial page.  When contentDelivery is "immediate", the content is inlined into the initial page.  If contentDelivery is "lazy", the popup's content will be delivered to the client only after the first request to show that popup.  If contentDelivery is "lazyUncached", the popup's content will be delivered fresh each and every time the popup is shown.  By default, contentDelivery is lazy, which means the content will not be sent to the client up front, but will be cached once loaded.
      </description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>lazy</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy lazyUncached</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Specifies the animation to be used for the popups. Animation of the popups is controlled by 
      system animation setting("animation-enabled" in trinidad-config) and a skin property for individual popup types(af:menu, af:dailog, af:noteWindow etc).
      Use "false" to turn animation off for a popup regardless of the system settings. The default value is "default", which implies use the system settings and skin properties.
      </description>
         <property-name>animate</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default false</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;&lt;p&gt;
      Whether events delivered by the popup and its descendents are delivered in the context of the launch source.
      &lt;/p&gt;
      &lt;p&gt;
      What does 'in context' mean? In something like a table, for example, when an event is delivered 'in context' 
      then the data for the row clicked is made 'current' before the event listener is called, 
      so if getRowData() is called on the collectionModel in the event listener it will return the data 
      of the row that triggered the event.
     &lt;/p&gt;
      &lt;p&gt;
      In the case of a shared popup you really want the popup to 'act' as if it's been reparented to the launch 
      source when the popup opens. In other words, you want any event from the popup delivered in the context 
      of the launch source so that you can access data available to the launch source. When eventContext is 
      set to 'launcher' both the popupFetch event and events fired from inside the popup are delivered in 
      the context of the launch source.
      &lt;/p&gt;
      &lt;p&gt;
      &lt;/p&gt;&lt;/html&gt;</description>
         <property-name>eventContext</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>self</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>self launcher</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Name of the variable used to reference the launch component on the request, which makes it EL reachable.
      The launch component refers to the component that launched the popup. 
      This variable is only available during event delivery on the popup or its descendents, 
      outside of event delivery this variable is removed (or reverted back to its previous value). 
      This value is only available when the eventContext is set to 'launcher'.
      If this value is not set, then the launch component is not made available on the request during event delivery.
      </description>
         <property-name>launcherVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a popupFetchListener method</description>
         <property-name>popupFetchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a popupCanceledListener method. The PopupCancledEvent is delivered 
       when the popup is unexpectedly dismissed or by invoking the cancel method on the client popup component. </description>
         <property-name>popupCanceledListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>visible has been deprecated. Use the af:showPopupBehavior tag or the show/hide methods on the popup client component.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <no-op/>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Popup</component-family>
         <renderer-type>oracle.adf.rich.Popup</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>propertyChange popupOpening popupOpened popupClosed popupCanceled </client-event-types><trigger-event-types>propertyChange popupOpening popupOpened popupClosed popupCanceled </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>oracle.adf.RichMenu oracle.adf.RichPanelWindow oracle.adf.RichDialog oracle.adf.RichNoteWindow oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richmenu-holder oracle-adf-richdialog-holder oracle-adf-richnotewindow-holder oracle-adf-richpanelwindow-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The showDetail provides a means of toggling a group of components between being 
hidden or shown.  If the "prompt" facet is present, the component in the facet 
will be put next to the disclosure icon.  If the prompt facet is not present
but either the disclosedText or the undisclosedText attributes are set, then
the text in that attribute will be displayed next to the disclosure icon.
If the prompt facet is not set but both the disclosedText and undisclosedText 
attributes are set then the disclosedText will be displayed when disclosed="true" 
and undisclosedText will be displayed when disclosed="false".  If the prompt 
facet is not set and neither the disclosedText or undisclosedText attributes are
set, then the label will default to "Hide" for the disclosed text and "Show" for
the undisclosed text.  For the purposes of EL, setting disclosedText or 
undisclosedText to null is the same as not setting the value.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/showDetail.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichShowDetail</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichShowDetail</component-class><!--oracle.adf.RichShowDetail facets-->
      <facet>
         <description>
        Component rendered next to the hide or show icon.  If this facet is present, this
will be used instead of the disclosedText and undisclosedText attributes.
      </description>
         <facet-name>prompt</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichGoLink</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <required>false</required>
               <unsupported-agents>phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ShowDetail properties-->
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata><cpf:persistent>true</cpf:persistent>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>stops the local value of disclosed from being set
        by renderers. This allows the value to always be taken from the value of the disclosed
        value expression. Disclosed values must be updated in other ways (i.e. from a
        disclosure listener)</description>
         <property-name>disclosedTransient</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichShowDetail properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the text to display when the children are disclosed.  If this attribute is set
and the undisclosedText attribute is not set, this text will be displayed for
both the disclosed state AND the undisclosed state.
      </description>
         <property-name>disclosedText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the text to display when the children are undisclosed.  If this attribute is set
and the disclosedText attribute is not set, this text will be displayed for
both the disclosed state AND the undisclosed state.
      </description>
         <property-name>undisclosedText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.ShowDetail</component-family>
         <renderer-type>oracle.adf.rich.ShowDetail</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange disclosure </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange disclosure </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>disclosed</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>An input text field control.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputText.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputText</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputText</component-class><!--oracle.adf.RichInputText facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Location for contextual information. A contextInfo component is expected.
     </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputText properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether focus will automatically move
     to the next tabstop when the maximum length for the current component is reached.
      </description>
         <property-name>autoTab</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the size of the text control specified by the number of characters shown.
                    The number of columns is estimated based on the default font size of the browser.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes; you should use the skinning mechanism if you
require any complex style changes.  The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  Many components are
composed of several DOM elements which may have their own styles applied to them.
Defining a style in the inlineStyle may not always give you what you want.
For example, if one of the inner DOM elements for this component has a background
color specified for it in the skin, setting a background color in the inlineStyle
may not provide any visible change (at least for where that inner DOM element
exists) because the inner DOM element's background color will win (since that DOM
element is essentially layered on top of the root element).  In cases like this,
you can use a different skin (or define your own) that defines a skinning key
for that inner DOM element where its background color is inhibited (e.g. with
-tr-inhibit: background-color) or otherwise set to the color you want.</description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "label"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;the maximum number of characters that can be entered into the text control.
      This includes the characters representing the new line. If set to 0 or less, the maximumLength is ignored.
      &lt;p&gt;
      Note that in some browsers like IE new line is treated as two characters.&lt;/p&gt;&lt;/html&gt;</description>
         <property-name>maximumLength</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the text control specified by the number of characters shown.  
         The default value is 1, which generates a one-row input field.
         The number of rows is estimated based on the default font size of the browser.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that only applies to single line text controls.
          When set to "true", it hides the actual value of the text from the user, and
          will prevent the actual "value" from being shown to the user.  When the user
          manually enters a value, each character will appear as an *.  After the value
          is posted to the server, the value (if not null) will always appear
          (and be sent to the client) as "******", or whichever value is defined in
          UIConstants.SECRET_FIELD_DEFAULT_VALUE. If secret is set to true, be sure to not
          use a converter or validator tag with this inputText which would expose the value
          the user entered via its messages.
      </description>
         <property-name>secret</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;a CSS style class to use for this component.
      The styleClass attribute value is rendered on the root dom element.
      We provide some public style classes you can set the styleClass to that 
      will affect only the 'content' piece of the component. These are:
      AFAddressFieldTextMarker, AFPostalCodeFieldTextMarker, AFPhoneFieldTextMarker,
      AFFieldNumberMarker, AFFieldTextLTRMarker, AFFieldTextMarker, AFFieldNumberMarker.
      In LTR languages, these styles have no effect by default, other than AFFieldNumberMarker
      which right aligns the text. They have more styling in RTL mode. 
      If needed, you can skin the public style definitions for these marker style classes
      (e.g., AFAddressFieldText, AFPostalCodeFieldText, etc.)
      and it will be picked up by using these "Marker" style class
      because in our base skin implementation we map to the public style by doing this:
      af|inputText.AFFieldNumberMarker af|inputText::content {-tr-rule-ref:selector(".AFFieldNumber")}.
      We recommend that you do not add style properties to the "Marker" style classes, since
      they are used solely in the CSS descendant selector to point to the content pseudo-element.&lt;/html&gt;
      </description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the type of text wrapping to be used in a multi-row
              text control. This attribute is ignored for single
              row inputText. By default (or "soft"), multirow text
        wraps visually, but does not include carriage returns in the
              submitted value.  Setting this to "off" will disable wrapping;
              the multirow text will scroll horizontally.  Setting it to "hard"
              specifies that the value of the text should include any
              carriage returns needed to wrap the lines. 
      </description>
         <property-name>wrap</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>soft hard off</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.Text</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The goMenuItem tag is a go link located in a menu.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/goMenuItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichGoMenuItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichGoMenuItem</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Go properties-->
      <property>
         <description>the URI this go component references</description>
         <property-name>destination</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichGoMenuItem properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the keystroke that will activate this command.  This keystroke will be converted 
        into a textual representation and displayed as the accelerator label for this menu item.
      </description>
         <property-name>accelerator</property-name>
         <property-class>java.awt.AWTKeyStroke</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the menu item. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the target frame for the go component.</description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the textual label of the go component. Go components 
              will also render children elements (including text nodes), though 
              not all subclasses of the go component will necessarily support
              children.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
                For example, setting this attribute to "T&amp;amp;amp;ext" will set 
                the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Go</component-family>
         <renderer-type>oracle.adf.rich.MenuItem</renderer-type>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:required-ancestor-contracts>oracle-adf-richmenuitem-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A panel component that displays its children in a group.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelGroup.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelGroupLayout</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelGroupLayout</component-class><!--oracle.adf.RichPanelGroupLayout facets-->
      <facet>
         <description>Content to be rendered once between each of the
                other children.</description>
         <facet-name>separator</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelGroupLayout properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The component style theme to apply to the children of this component.
      By default, this component is not styled for the different themes, but can be used to change
      the theme without associated skin changes that will 
      occur with af:document and af:decorativeBox.
      Themes are not compatible with tonal styles
      and therefore only one method can be used per page (themes or tonal styles). 
      A blank theme will remove the current theme, and a value of "inherit", 
      null or not setting a theme will use the current theme.
      Skins are the sources of the the themes. Some skins may have no themed definitions. 
      Suggested theme names include "dark", "medium", "light", and "default".
      </description>
         <property-name>theme</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the type of layout.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"default": consecutive layout as defined by the browser, with wrapping allowed, and following the bidirectional layout algorithm.  As a result, in the presence of mixed right-to-left and left-to-right text, contents may not display consecutively.&lt;/li&gt;
&lt;li&gt;"horizontal": strictly consecutive without wrapping&lt;/li&gt;
&lt;li&gt;"vertical": vertically stacked&lt;/li&gt;
&lt;li&gt;"scroll": vertical, with scrollbars displayed if content overflows (this layout option is only intended for cases where the panelGroupLayout is being stretched such as when inside of a decorativeBox, panelSplitter, panelStretchLayout, or showDetailItem with stretchChildren set to first)&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default horizontal vertical scroll</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the vertical alignment of a horizontal layout. This is ignored if "layout" is not "horizontal".
      </description>
         <property-name>valign</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>middle</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>middle top bottom baseline</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the horizontal alignment for horizonal, vertical and scroll layouts. This is ignored if "layout" is "default".  Note that if "layout" is "horizontal", the browsers can only reliably handle horizontal alignment of components that have either fixed widths or that are "inline" such as outputText.
      </description>
         <property-name>halign</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>start</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>start center end left right</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for this panelGroupLayout.
      </description>
         <property-name>landmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.GroupLayout</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>layout</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichChooseColor oracle.adf.RichChooseDate oracle.adf.RichCommandButton oracle.adf.RichCommandLink oracle.adf.RichGoButton oracle.adf.RichGoLink oracle.adf.RichIcon oracle.adf.RichImage oracle.adf.RichInputColor oracle.adf.RichInputComboboxListOfValues oracle.adf.RichInputDate oracle.adf.RichInputFile oracle.adf.RichInputListOfValues oracle.adf.RichInputText oracle.adf.RichOutputText oracle.adf.RichOutputFormatted oracle.adf.RichSelectBooleanCheckbox oracle.adf.RichSelectBooleanRadio oracle.adf.RichSelectManyCheckbox oracle.adf.RichSelectManyChoice oracle.adf.RichSelectManyListbox oracle.adf.RichSelectOneChoice oracle.adf.RichSelectOneListbox oracle.adf.RichSelectOneRadio oracle.adf.RichSpacer</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The navigationItem control creates a navigation item 
            representation of a UIXCommand.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/commandNavigationItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCommandNavigationItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichCommandNavigationItem</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Command properties-->
      <property>
         <description>a reference to an action method sent by the command component,
              or the static outcome of an action. If the action starts with "dialog:",
              useWindow attribute must be set to true.
      </description>
         <property-name>actionExpression</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an action listener</description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a return listener.This method
      is used to process dialog returnEvents which are generated as a result of either
      calling org.apache.myfaces.trinidad.context.RequestContext.returnFromDialog
      directly or declaratively through the use of a returnActionListener tag.</description>
         <property-name>returnListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a launch listener</description>
         <property-name>launchListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichCommandNavigationItem properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether processes launched by this command should be launched in a secondary
         browser dialog window. 'useWindow' requires that the "action" attribute start
         with "dialog:". Set useWindow to 'false' for the outcome of the action to be
         targeted to the existing window.
      </description>
         <property-name>useWindow</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the modality of the launched Dialog. The default is modeless.
      </description>
         <property-name>windowModalityType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>modeless</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>applicationModal modeless</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Controls the embedded style of launched window. The "window" option will indicate a new browser window. 
      The "inlineDocument" option will indicate an inline popup window. The default value is "window".
      </description>
         <property-name>windowEmbedStyle</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>window</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>window inlineDocument</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the window, if this command is used to 
              launch a window.
      </description>
         <property-name>windowWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the URI this component references when activated.  
              This is an alternative to using an action.
      </description>
         <property-name>destination</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE, the component becomes 
              non-interactive. Otherwise, the default value is FALSE and the
              component assumes its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed with the navigation item. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the item needs to be rendered in a manner that 
              indicates an info, confirmation, warning or error exists within its 
              contents. This property is currently used only within the train 
              component.
      </description>
         <property-name>messageType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none info confirmation warning error</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the action should be done through a partial 
              page submit or not. Default is false - no partial page submit.
      </description>
         <property-name>partialSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the item is currently selected.
      </description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the item should show an indicator, indicating
              that its contents are required. This property is currently used 
              only within the a train component.</description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the target frame for the navigation component.
      </description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the text of the item.</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
                For example, setting this attribute to "T&amp;amp;amp;ext" will set 
                the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the item is in visited state. Depending on 
              the renderer the item may appear in a visited style, if true. This 
              property is currently used only within the a train component.
      </description>
         <property-name>visited</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Command</component-family>
         <renderer-type>oracle.adf.rich.NavigationItem</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange action </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>text</fmd:default-property>
            <fmd:required-ancestor-contracts>oracle-adf-richnavigationitem-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The carousel component displays a spinning series of items based on rows of a collection model.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/carousel.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCarousel</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichCarousel</component-class><!--oracle.adf.RichCarousel facets-->
      <facet>
         <description>the component to use to stamp each element in the
              carousel. A carouselItem child is required.
      </description>
         <facet-name>nodeStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichCarouselItem</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:carouselItem
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Iterator properties-->
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.
The default is 25.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.
      </description>
         <property-name>first</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
      </property><!--oracle.adf.RichCarousel properties-->
      <property>
         <description>horizontal (the default) for the images being displayed along an x-axis or vertical for y-axis.
      </description>
         <property-name>orientation</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>determines the horizontal alignment of the carousel items.
      </description>
         <property-name>halign</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>center</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>start center end</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>determines the vertical alignment of the carousel items.
      </description>
         <property-name>valign</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>middle</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>middle top bottom</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not data validation - client-side or
          server-side - should take place when events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the key that identifies the current item in this component.</description>
         <property-name>currentItemKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the number of rows in the data fetch block</description>
         <property-name>fetchSize</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text of an empty carousel. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component.  If it is not enclosed in an open and closing html tag, it will not be formatted.</description>
         <property-name>emptyText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether data should be fetched when the component is rendered initially.  When contentDelivery is "immediate", data is fetched and inlined into the component chrome.  If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request.</description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>lazy</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a boolean which if the value is "true", the component becomes non-interactive.
                 Otherwise, the default value is "false" and component assumes its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a carousel spin listener</description>
         <property-name>carouselSpinListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Iterator</component-family>
         <renderer-type>oracle.adf.rich.Carousel</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange carouselSpin </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange carouselSpin </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components/>
            <fmd:satisfied-contracts>oracle-adf-richcarouselitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
     
     The selectManyShuttle component provides a mechanism for selecting
      multiple values from a list of values by allowing the user to move
      items between two lists.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectManyShuttle.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectManyShuttle</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectManyShuttle</component-class><!--oracle.adf.RichSelectManyShuttle facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>filter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>leadingFooter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>This facet is deprecated, and is currently a no-op.</description>
         <facet-name>trailingFooter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, and is currently a no-op.</fmd:deprecated>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectManyShuttle properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>this attribute describes the layout of the shuttle. Default value is 'horizontal'.
      </description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the display size (number of items) of the lists. The size 
              specified must be between 10 and 20 items. If the attribute is not 
              set or has a value less than 10, the size would have a default or 
              minimum value of 10. If the attribute value specified is more than 
              20 items, the size would have the maximum value of 20.
      </description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the header of the leading list of the shuttle.
      </description>
         <property-name>leadingHeader</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the header of the trailing list of the shuttle.
      </description>
         <property-name>trailingHeader</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether or not the leading list has an area to display descriptions.
      </description>
         <property-name>leadingDescShown</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not the trailing list has an area to display descriptions.
      </description>
         <property-name>trailingDescShown</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
                an attribute that will simultaneously set both the "value"
                and "accessKey" attributes from a single value, using
                conventional ampersand ('&amp;amp;') notation.
                &lt;p&gt;
                For example, setting this attribute to "L&amp;amp;amp;abel" will
                set the label to "Label" and the access key to 'a'.
                &lt;/p&gt;&lt;/html&gt;
        </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectMany</component-family>
         <renderer-type>oracle.adf.rich.Shuttle</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The image component renders an image specified by the source property. Due to performance overhead compared to &lt;code&gt;&amp;lt;af:image&amp;gt;&lt;/code&gt;, you should only use this component if you plan to support changing the source attribute through active data, otherwise you should use the &lt;code&gt;&amp;lt;af:image&amp;gt;&lt;/code&gt; component.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/objectImage.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichActiveImage</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichActiveImage</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichActiveImage properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the URI specifying the location of the image resource.
      </description>
         <property-name>source</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a URL to a document that contains a long description of the image. This description 
        should supplement the short description.
      </description>
         <property-name>longDescURL</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        if a server-side image map is desired, specify "server" and place
          the image inside a CoreGoLink component. URI of the server-side image map 
          file has to be given as a destination attribute for the goLink component. 
          Default value for imageMapType is "none".
      </description>
         <property-name>imageMapType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>none server</fmd:property-values>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.ActiveImage</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>source</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The media component displays media content, such as audio, video,
          or image in a player embedded in the user agent.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/media.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichMedia</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichMedia</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichMedia properties-->
      <property>
         <description>&lt;html&gt;the width in pixels to reserve for the media player plus its content.
            As the extra width needed for the media player controls can vary
            from media player to media player and depend on the controls
            displayed in the media player, it is recommended that the
            "innerWidth" attribute be used in preference to this attribute.
            &lt;p&gt;
            If both the "width" and "innerWidth" attributes are specified,
            the "width" attribute will be used.
            &lt;/p&gt;
            &lt;p&gt;
            If no width is specified, the width of the media control is
            determined by calculating the "innerWidth" and adding any extra
            width necessary to display the media player controls.
            &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>width</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;the height in pixels to reserve for the media player plus its content.
            As the extra height needed for the media player controls can vary
            from media player to media player and depend on the controls
            displayed in the media player, it is recommended that the
            "innerHeight" attribute be used in preference to this attribute.
            &lt;p&gt;
            If both the "height" and "innerHeight" attributes are specified,
            the "height" attribute will be used.
            &lt;/p&gt;            
            &lt;p&gt;
            If no height is specified, the height of the media control is
            determined by calculating the "innerHeight" and adding any extra
            height necessary to display the media player controls.
            &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>height</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;the width in pixels to reserve for the media player content.  This
            will typically be set to the pixel width of the media resource
            to display.
            &lt;p&gt;
            If no "innerWidth" is specified, the "innerWidth" will be defaulted
            based on the content type of the media resource to play.
            &lt;/p&gt;            
            &lt;p&gt;
            If both the "width" and "innerWidth" attributes are specified,
            the "width" attribute will be used.
            &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>innerWidth</property-name>
         <property-class>int</property-class>
      </property>
      <property>
         <description>&lt;html&gt;the height in pixels to reserve for the media player content.  This
            will typically be set to the pixel height of the media resource
            to display.
            &lt;p&gt;
            If no "innerHeight" is specified, the "innerHeight" will be defaulted
            based on the content type of the media resource to play.
            &lt;/p&gt;            
            &lt;p&gt;
            If both the "height" and "innerHeight" attributes are specified,
            the "height" attribute will be used.
            &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>innerHeight</property-name>
         <property-class>int</property-class>
      </property>
      <property>
         <description>the URI specifying the location of the media resource.  If no
            contentType is specified, the contentType will be inferred from
            the extension of the source attribute.
      </description>
         <property-name>source</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the media resource loads
            and plays automatically without user initiation.  When set to "true",
            the media resource will load and play as soon as possible.
      </description>
         <property-name>autostart</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the number of times the media resource will play.  If set to "0",
            the resource will loop until the user stops the playing.
      </description>
         <property-name>playCount</property-name>
         <property-class>int</property-class>
      </property>
      <property>
         <description>the MIME type of the media content returned by the "source" URI.
            This attribute is used as a hint when determining which player to
            pick, how the controls of the player are to be configured, and
            the default size of the media player.  If it isn't specified, an
            attempt will be made to derive this information from the extension
            of the source URI.
      </description>
         <property-name>contentType</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the message to display in the media player while the media resource
              is loading.
      </description>
         <property-name>standbyText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;which media player to use to play the media resource. If possible,
              the media control will accomodate this request.  However, if
              the requested player is not available on the user agent, or does
              not support playing the media resource, an alternate player
              will be used instead.  In all cases, the "link" player is used
              as a fallback if no other player is available, or the requested
              player fails for some reason.
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;"none"&lt;/code&gt;
                  &lt;p&gt;
                   use a link in the user agent page to launch the playing of the
                   media resource.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This player setting uses the least amount of space on the page
                   and uses the user agent's built in content type mapping
                   to determine how to display the media resource.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"quicktime"&lt;/code&gt;
                  &lt;p&gt;
                   use the Apple QuickTime player.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"windows"&lt;/code&gt;
                  &lt;p&gt;
                   use the Windows Media Player.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"real"&lt;/code&gt;
                  &lt;p&gt;
                   use the Real Player.
                  &lt;/p&gt;
                &lt;/li&gt;
              &lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>player</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>windows quicktime link real</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the set of controls made available to the user for controlling
              the media playback.  The actual set of controls displayed for the
              same value may differ between players.  Likewise, the amount of
              space occupied by the controls will differ from media player to
              media player.  This can cause problems if the size of the
              media control has been specified by the "width" and "height"
              attributes rather than "innerWidth" and "innerHeight".
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;code&gt;"none"&lt;/code&gt;
                  &lt;p&gt;
                   don't show any controls for the media player and don't allow
                   control access through alternate means, such as context menus.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value is typically only used in kiosk-type applications
                   where no user control over the playing of the media is allowed.
                   It is typically used in conjunction with setting the
                   "autostart" attribute to "true", and the "playCount" attribute
                   to "0" to cause the media play immediately and then loop.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"noneVisible"&lt;/code&gt;
                  &lt;p&gt;
                   don't show any controls for the media player but allow control
                   access through alternate means, such as context menus.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value is typically only used in applications where user
                   control over the playing of the media is allowed, but
                   not encouraged.  It is typically used in conjunction with
                   setting the "autostart" attribute to "true", and the
                   "playCount" attribute to "0" to cause the media to play
                   immediately and then loop.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"minimal"&lt;/code&gt;
                  &lt;p&gt;
                    show a minimal set of controls for playing media on the media
                    player. 
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value gives users control over the most
                   important media playing controls, while occupying the least
                   amount of additional space on the user agent.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"typical"&lt;/code&gt;
                  &lt;p&gt;
                   show the typical set of controls for playing media on the
                   media player.
                  &lt;/p&gt;
                  &lt;p&gt;
                   This value, the default, gives users control over the most
                   common media playing controls, without occupying an inordinate
                   amount of extra space on the user agent.
                  &lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;code&gt;"all"&lt;/code&gt;
                  &lt;p&gt;
                   Show all available controls for playing media on the media player
                  &lt;/p&gt;
                  &lt;p&gt;
                   Using this setting can cause large amount of additional space
                   to be required, depending on the media player used.
                  &lt;/p&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;p&gt;
                The default of this attribute is &lt;code&gt;"typical"&lt;/code&gt;.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>controls</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>typical</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>noneVisible none typical all minimal</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.Media</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>source</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      Represents an input range slider component.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputSlider.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputRangeSlider</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputRangeSlider</component-class><!--oracle.adf.RichInputRangeSlider facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputRangeSlider properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the distance between two major tick marks. If &amp;lt;= 0 major increments will not be shown.
        The major tick marks are the ones that will display a labeled value underneath the tick mark.
      </description>
         <property-name>majorIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the distance between two minor tick marks. If &amp;lt;= 0 minor increments will not be shown. 
        The minor tick marks are those that will not show a label underneath the tick mark.
      </description>
         <property-name>minorIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the smallest possible increment. This is the increment that will be applied when the
         user presses the + and - buttons on the sides of the slider.
      </description>
         <property-name>minimumIncrement</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the minimum value.
      </description>
         <property-name>minimum</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum value.
      </description>
         <property-name>maximum</property-name>
         <property-class>java.lang.Number</property-class>
         <default-value>10</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a horizontal or vertical slider is created.
      </description>
         <property-name>orientation</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>horizontal</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.RangeSlider</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The image control creates an image tag.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/objectImage.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichImage</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichImage</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichImage properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the URI specifying the location of the image resource.
      </description>
         <property-name>source</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the image component. This text is commonly used by user agents as the image's alt text.  Note that for accessibility purposes, all images must specify some value for the shortDesc attribute.  For purely decorative images which provide no meaningful information, the value should be the empty string.
      </description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a URL to a document that contains a long description of the image. This description should supplement the short description. 
                In the browser, longDescUrl renders as the longdesc attribute on &amp;lt;img&amp;gt;.
      </description>
         <property-name>longDescURL</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        if a server-side image map is desired, specify "server" and place
          the image inside a CoreGoLink component. URI of the server-side image map 
          file has to be given as a destination attribute for the goLink component. 
          Default value for imageMapType is "none".
      </description>
         <property-name>imageMapType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>none server</fmd:property-values>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.Image</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>source</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The showDetailItem represents a single item with specific contents that can be selected by users to be shown in a panelAccordion or panelTabbed component.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/showDetailItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichShowDetailItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichShowDetailItem</component-class><!--oracle.adf.RichShowDetailItem facets-->
      <facet>
         <description>
        &lt;p&gt;The content for the toolbar region of the accordion header bar.  It will be
displayed when the disclosed=&amp;quot;true&amp;quot;.
&lt;/p&gt;
&lt;p&gt;
This facet is only applicable when used with the panelAccordion.
&lt;/p&gt;
      </description>
         <facet-name>toolbar</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ShowDetail properties-->
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata><cpf:persistent>true</cpf:persistent>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>stops the local value of disclosed from being set
        by renderers. This allows the value to always be taken from the value of the disclosed
        value expression. Disclosed values must be updated in other ways (i.e. from a
        disclosure listener)</description>
         <property-name>disclosedTransient</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichShowDetailItem properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a boolean which if the value is "true", the component becomes non-interactive.
Otherwise,the default value is "false" and component assumes
its expected behavior.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the URI of an image to be displayed with the showDetailItem. This 
              attribute supports these various types of URIs:
            &lt;ul&gt;
              &lt;li&gt;absolute - an absolute path to the image, like 
                  "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
              &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
              &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                  like "/images/error.png"&lt;/li&gt;
               &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                   "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
            &lt;/ul&gt;
            &lt;strong&gt;
               As icon does not allow alternative text to be provided for the
               image, in order to create an accessible product icon must only be
               used when its use is purely decorative. 
            &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the textual label of the showDetailItem.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        an attribute that will simultaneously set both the "text"
and "accessKey" attributes from a single value, using
conventional ampersand ('&amp;amp;') notation.
&lt;p&gt;
  For example, setting this attribute to "T&amp;amp;amp;ext" will
  set the text to "Text" and the access key to 'e'.
&lt;/p&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a character used to gain quick access to this showDetailItem.
For accessibility reasons, this functionality is not supported
in screen reader mode.
&lt;p&gt;
  If the same access key appears in multiple locations in the
  same page of output, the rendering user agent will cycle
  among the elements accessed by the similar keys.
&lt;/p&gt;
&lt;p&gt;
  This attribute is sometimes referred to as the "mnemonic".
&lt;/p&gt;
&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific
                modifier keys. It even has browser-specific meaning. For example, Internet
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;.
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;.
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
&lt;p&gt;
a non-negative integer that indicates the flexibility of this
component in its container.  If the container supports it, flex
is used to determine how space is distributed among its children.
Components with larger flex values will be made larger than
components with lower flex values.  This is done so at the ratio
determined by the flex of each of the two components.  The actual
value is only relevant if there are other flexible components
(components with flex values larger than zero) within the same
container.
&lt;/p&gt;
&lt;p&gt;
This attribute is only applicable when used with the panelAccordion.
&lt;/p&gt;
      </description>
         <property-name>flex</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
&lt;p&gt;
the number of pixels that the item will
use when in a container that allocates size among multiple
sibling items.  If this item has flex="0", this is the size
that will be used and the remaining space will be dispersed
among the non-zero flex items.  If this item cannot fit
within its container using this number of pixels, other
nearby items may be pushed out into overflow menus.
&lt;/p&gt;
&lt;p&gt;
This attribute is only applicable when used with the panelAccordion.
&lt;/p&gt;
      </description>
         <property-name>inflexibleHeight</property-name>
         <property-class>int</property-class>
         <default-value>100</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The stretching behavior for children.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched)&lt;/li&gt;
&lt;li&gt;"first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched)&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>stretchChildren</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none first</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to an item listener</description>
         <property-name>itemListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>When placed inside of a component that supports reordering, this
        attribute is used to determine the index that the child should be displayed in. It will be
        updated when the component is reordered in the parent.
        &lt;p&gt;A display index of -1 (default) means that items will appear at the end, in the
          order they appear in the component tree. All values at 0 or above appear before the
          -1 values in ascending order.&lt;/p&gt;</description>
         <property-name>displayIndex</property-name>
         <property-class>int</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.ShowDetail</component-family>
         <renderer-type>oracle.adf.rich.Item</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange disclosure </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange disclosure </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The goLink tag is an HTML link.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/goLink.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichGoLink</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichGoLink</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Go properties-->
      <property>
         <description>the URI this go component references</description>
         <property-name>destination</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichGoLink properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              a character used to gain quick access to this item.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
                If the same access key appears in multiple locations in the same 
                page of output, the rendering user agent will cycle among the 
                elements accessed by the similar keys. Note that user agents 
                are inconsistent about dealing with two links having same access 
                key, and so the cycling behavior is dependent on what the user 
                agent provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute &lt;strong&gt;must&lt;/strong&gt; 
                exist in the &lt;code&gt;text&lt;/code&gt; attribute of this item instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey. The easiest, and most convenient
                way to specify both the text and the mnemonic together is to use
                textAndAccessKey.
              &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the target frame for the go component.</description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>the textual label of the go component. Go components 
              will also render children elements (including text nodes), though 
              not all subclasses of the go component will necessarily support
              children.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "text" and 
              "accessKey" attributes from a single value, using conventional 
              ampersand ('&amp;amp;') notation.
              &lt;p&gt;
                For example, setting this attribute to "T&amp;amp;amp;ext" will set 
                the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Go</component-family>
         <renderer-type>oracle.adf.rich.Link</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      Component that displays a message on behalf of a component.
ADF input components typically support automatically showing
their own messages, so this tag should only be used for non-ADF input components
and when you do not want the automatic ADF input message behavior.  It is also
useful for component-level messages where either a note window pop up isn't
supported or where you simply don't want a pop up for the message (this is
especially useful when the component already has a pop up for selecting a color,
date, etc. which would compete with the messaging pop up).
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/message.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichMessage</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichMessage</component-class><!--oracle.adf.RichMessage facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.  This facet should contain field level help.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Message properties-->
      <property>
         <description>the relative ID from this component to the component whose messages will be displayed</description>
         <property-name>for</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichMessage properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the error, warning, or informational text.</description>
         <property-name>message</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the type of the message. Defaults to "none".
      </description>
         <property-name>messageType</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
               <fmd:property-values>fatal error warning confirmation info none</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Message</component-family>
         <renderer-type>oracle.adf.rich.Message</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:expert>true</fmd:expert>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectOneListbox component creates a component which allows
          the user to select a single value from a list of items.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectOneListbox.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectOneListbox</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectOneListbox</component-class><!--oracle.adf.RichSelectOneListbox facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectOneListbox properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label for an additional item that indicates no selection has
   been made.  When the user selects this item, "required" validation will
   not pass, or a null value will be set if the component is not "required".
         </description>
         <property-name>unselectedLabel</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
    an attribute that will simultaneously set both the "value"
                 and "accessKey" attributes from a single value, using
                 conventional ampersand ('&amp;amp;') notation.
                 &lt;p&gt;
                 For example, setting this attribute to "L&amp;amp;amp;abel" will
                 set the label to "Label" and the access key to 'a'.
                 &lt;/p&gt;&lt;/html&gt;
         </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the number of items that should be visible in the list. The renderer may constrain the maximum and minimum number of items shown.
      </description>
         <property-name>size</property-name>
         <property-class>int</property-class>
         <default-value>4</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
               <fmd:required>false</fmd:required>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectOne</component-family>
         <renderer-type>oracle.adf.rich.Listbox</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A panel component that displays its children in a window.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelWindow.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelWindow</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichPanelWindow</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelWindow properties-->
      <property>
         <description>whether the window is modal;  by default false.
      </description>
         <property-name>modal</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the title of the window.
      </description>
         <property-name>title</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the URI specifying the location of the title icon source. The title icon will typically be displayed in the top left corner of the window
      </description>
         <property-name>titleIconSource</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the close icon is visible.
      </description>
         <property-name>closeIconVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. If provided, a help icon will appear in the title bar. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the content area of the dialog.
      </description>
         <property-name>contentHeight</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the width of the content area of the dialog.
      </description>
         <property-name>contentWidth</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-editor>UNSIGNED_INTEGER</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The stretching behavior for children.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"none": does not attempt to stretch any children (the default value and the value you need to use if you have more than a single child; also the value you need to use if the child does not support being stretched)&lt;/li&gt;
&lt;li&gt;"first": stretches the first child (not to be used if you have multiple children as such usage will produce unreliable results; also not to be used if the child does not support being stretched)&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>stretchChildren</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none first</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The dialog's resizing behavior.  Acceptable values include:
&lt;ul&gt;
&lt;li&gt;"off": the dialog automatically sizes to its content if stretchChildren is "none".&lt;/li&gt;
&lt;li&gt;"on": user can resize the dialog with their mouse by dragging any of the dialog edges.&lt;/li&gt;
&lt;/ul&gt;</description>
         <property-name>resize</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>off</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>off on</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>visible has been deprecated. Use the af:showPopupBehavior tag or the show/hide methods on the popup client component.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <no-op/>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Window</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:default-property>title</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichPanelGroupLayout</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richpanelwindow-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The inlineFrame component is used to create an Inline Frame tag.  Note that due to browser limitations, this component is not supported in Mobile Safari.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inlineFrame.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInlineFrame</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichInlineFrame</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichInlineFrame properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the URI specifying the location of the content.
      </description>
         <property-name>source</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        The sizing strategy used by the component. &lt;em&gt;Sizing should only be set if the 
        iframe source is from the same domain as the page.&lt;/em&gt; The following sizing values are 
        supported:
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;none&lt;/code&gt;-We provide no additional sizing strategy.  The inlineFrame is sized
          using CSS, as normal. This is the default setting.
          &lt;/li&gt;
          &lt;li&gt;&lt;code&gt;preferred&lt;/code&gt;-The content is sized to its preferred size such that no
          scrollbars are needed.  For an inlineFrame with no width specified through CSS, this
          will result in the content wrapping to maximum of the default width and minimum
          width for the content.  The preferred size is recalculated whenever the content changes. 
          &lt;p&gt;
          &lt;em&gt;Because we do not have rights to query and set DOM properties on remote pages, 
          preferred sizing can only be set if the iframe source is served from the same domain as 
          the page. Attempting to set preferred sizing on a foreign iframe source will result in a 
          warning.&lt;/em&gt;
          &lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        
      </description>
         <property-name>sizing</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>none preferred</fmd:property-values>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.InlineFrame</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>source</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The carouselItem component must be placed inside of a carousel component.  It represents an item inside of a carousel component and its text attribute will be displayed when it is the current item the carousel.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/carouselItem.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichCarouselItem</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichCarouselItem</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichCarouselItem properties-->
      <property>
         <description>the text of the carousel item</description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.CarouselItem</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>ALL</fmd:allowed-child-components>
            <fmd:preferred-child-components>oracle.adf.RichImage</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richcarouselitem-holder</fmd:required-ancestor-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The selectOneChoice component creates a menu-style component, which allows the user to select a single value from a list of items.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectOneChoice.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectOneChoice</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectOneChoice</component-class><!--oracle.adf.RichSelectOneChoice facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Location for contextual information. A contextInfo component is expected. This facet is ignored when 'mode' is 'compact'.
     </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectOneChoice properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The label for the option that represents a value of null, meaning nothing is selected. If unselectedLabel is not set and if the component does not have a selected value, then an option with an empty string as the label and value is rendered as the first option in the choice box (if there isn't an empty option already defined). Once an option has been successfully selected, and if unselectedLabel is not set, then the empty option will not be rendered.</description>
         <property-name>unselectedLabel</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
              an attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "L&amp;amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              &lt;/p&gt;
              &lt;/html&gt;</description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the mode of the component.
          When set to "compact", the selected value box is hidden, the drop down 
          icon changes to smaller one, and the component can never be disabled. If
          compact and disabled are both true, the component is hidden.
        </description>
         <property-name>mode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default compact</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectOne</component-family>
         <renderer-type>oracle.adf.rich.Choice</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Component that is used as a child of the Table component. The Column
component defines the header, footer and data for a single column in the
Table.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/column.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichColumn</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichColumn</component-class><!--org.apache.myfaces.trinidad.Column facets-->
      <facet>
         <description>the node to use to render this column's header.</description>
         <facet-name>header</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>the node to render as this column's footer.</description>
         <facet-name>footer</facet-name>
      </facet><!--oracle.adf.RichColumn facets-->
      <facet>
         <description>Location for contextual information. A contextInfo component is expected. This facet is stamped in each cell of the column.
       </description>
         <facet-name>context</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>false</fmd:preferred>
               <fmd:preferred-child-components>oracle.adf.RichContextInfo</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichContextInfo</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>the node to use to render this column's filter. In most cases application developers will be able to use the
                              filterable="true" and "sortProperty" attributes along with "filterModel" to automatically get 
                              the filter support through "inputText" components. However if an application developer wants
                              to support a component other than "inputText", they can use the "filter"
                              facet in addition to setting filterable="true" attribute. 
                              Requirement for filtering based on dates can be met through
                              this facet. A property "filterCriteria" will be available on the table
                              "varStatus" attribute when the filter facet is processed. This property will return a
                              map of filter-property/filterCriteria (name/value pairs). Components inside the filter facet can be bound
                              to this attribute to access the filter criteria.
        </description>
         <facet-name>filter</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichInputDate</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Column properties-->
      <property>
         <description>The property that is displayed by this Column. This is the
            property that the framework might use to (for example) sort
            the Table's data.
      </description>
         <property-name>sortProperty</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichColumn properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by user agents to 
                     display tooltip help text, in which case the behavior for the tooltip is controlled by the 
                     user agent, e.g. Firefox 2 truncates long tooltips.  For form components, the shortDesc is displayed in a note window.
      </description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml.  The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be included.
      </description>
         <property-name>persist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a list of attributes whose changes are NOT to be persisted by FilteredPersistenceChangeManager via the "Persistent Change Manager" registered in adf-config.xml. The token 'ALL' can be used in the list here to indicate that all attribute changes that the component implicitly persists should be excluded. If there is a conflict of values, "dontPersist" always precedes "persist".
      </description>
         <property-name>dontPersist</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The alignment for this column. 
      "start", "end" and "center" are used for left-justified, right-justified, and center-justified respectively in LTR display. 
      "left" or "right" can be used when left-justified or right-justified cells are needed irrespective of the LTR or RTL display. 
      The default value is null, which implies that it is skin dependent and may vary for the row header column vs data column.</description>
         <property-name>align</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>start end center left right</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The filter features for this column.
      A set of flags which specify how this column should be filtered in query-by-example (QBE). Currently the only
      values supported are: "caseSensitive" and "caseInsensitive". If not specified, the case sensitivity is model-dependent. 
      The features are hints for a collection model, which supports filtering, to perform special filtering operations (such as
      case-sensitive/insensitive filtering) </description>
         <property-name>filterFeatures</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for the column header. 
      The headerClass, footerClass and the styleClass attributes on the column should be used with caution.
      Changing the horizontal padding/borders of the header, footer and data cells will mess up alignment 
      of the table cells.</description>
         <property-name>headerClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for the column footer. 
      The headerClass, footerClass and the styleClass attributes on the column should be used with caution.
      Changing the horizontal padding/borders of the header, footer and data cells will mess up alignment 
      of the table cells.</description>
         <property-name>footerClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>The width of the column. The default width for a column is 100px.  
      There is no auto sizing for columns.  Set the width attribute to ensure the column is wide enough 
      to accommodate the width of the contents.</description>
         <property-name>width</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>100</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The minimum number of pixels that the column can become.  When a user
      attempts to resize the column, this minimum width will be enforced. Also, when a column is
      flexible, it will also never be stretched to be a size smaller than this minimum width.
      If a pixel width is defined and if the minimum width is larger, the minimum width will
      become the smaller of the two values.  By default, the minimum width is 12 pixels.</description>
         <property-name>minimumWidth</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>12</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>text to display in the header of the column. This is a convenience that 
      generates output equivalent to adding a "header" facet containing an outputText. If a "header" 
      facet is added, headerText will not be rendered in column header.</description>
         <property-name>headerText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Specifies whether whitespace wrapping should be allowed in this column.</description>
         <property-name>noWrap</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether or not the column header
should be allowed to wrap</description>
         <property-name>headerNoWrap</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the column is sortable. A sortable column has a 
      clickable header that (when clicked) sorts the table by that column's property. 
      Note that in order for a column to be sortable, this attribute must be set to "true" and the 
      underlying model must support sorting by this column's property. &lt;p&gt; This column's 
      "sortProperty" attribute must be set if sorting is desired.&lt;/p&gt;&lt;/html&gt;</description>
         <property-name>sortable</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the column is filterable. A filterable column will
         have a filter field on the top of the column header. Note that in order for a
         column to be filterable, this attribute must be set to "true" and the
         filterModel attribute will be set on the table. Only Leaf columns are
         filterable and the filter component is displayed only if the column header is
         present. The column header is present if the "headerText" attribute or "header"
         facet is set on the column.
         &lt;p&gt; This column's "sortProperty" attribute will be used as a key for
         the filterProperty in the filterModel. This implies that "sortProperty"
        *must* be set on the column for it to be filterable.&lt;/p&gt;
        &lt;p&gt; Also look at "filter" facet for providing a component other than the default inputText for filtering.&lt;/p&gt;
        &lt;/html&gt;</description>
         <property-name>filterable</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This property is currently not supported in the
        rich client.</description>
         <property-name>separateRows</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:hidden>true</fmd:hidden>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Whether or not this column is a row header column. Valid values are "true", "false", and "unstyled".
       The default value is "false".  In screen-reader table/treeTable, the "unstyled" row header column is moved to the starting position (displayIndex = 0)
       and is frozen.  In the default (rich) table/treeTable components, the "unstyled" row header column is not moved to the starting
       position (displayIndex = 0), is not frozen, and is rendered without any row header CSS style.
      </description>
         <property-name>rowHeader</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>true false unstyled</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Specifies whether the column is selected.</description>
         <property-name>selected</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The display order index of the column. Columns can be re-arranged and 
      they are displayed in the table based on the displayIndex. Columns are sorted based on the 
      displayIndex property, columns without displayIndex are displayed at the end, in the order 
      in which they appear. The displayIndex attribute is honored only for top level columns, 
      since it is not possible to rearrange a child column outside of the parent column.</description>
         <property-name>displayIndex</property-name>
         <property-class>int</property-class>
         <default-value>-1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Specifies whether the column is frozen. In the table columns until the 
      frozen column are locked with the header and not scrolled with the rest of the columns. 
      Frozen attribute is honored only on the top level column,since it is not possible to freeze a 
      child column by itself without its parent being frozen.  If the table has a detailStamp for its
      rows, column freezing is turned off.</description>
         <property-name>frozen</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates whether the columns displays a visual indication of required user input. </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the column.  If it is "false", the column will not 
      be displayed in the table on the client.  Unlike "rendered", this does affect the lifecycle on the server 
      - the column may have its bindings executed, etc. When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <cpf:persistent>true</cpf:persistent>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Column</component-family>
         <renderer-type>oracle.adf.rich.Column</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>propertyChange </client-event-types><trigger-event-types>propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>headerText</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            <fmd:required-ancestor-contracts>oracle-adf-richcolumn-holder</fmd:required-ancestor-contracts>
            <fmd:satisfied-contracts>oracle-adf-richcolumn-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The decorativeBox component provides a bordered
      component that stretches the child in the center facet
      to fill all of available space.
    </description>
      <component-type>oracle.adf.RichDecorativeBox</component-type>
      <component-class>
      oracle.adf.view.rich.component.rich.layout.RichDecorativeBox
    </component-class><!--oracle.adf.RichDecorativeBox facets-->
      <facet>
         <description>Content to be stretched in the center of the
         layout.
      </description>
         <facet-name>center</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
               <unsupported-agents>pda phone voice</unsupported-agents>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>Content to be rendered above the center facet.
      If present and topHeight not specified, the height will be 50px.
      </description>
         <facet-name>top</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata>
               <is-content-resizable>false</is-content-resizable>
               <grouping-element>
            &lt;af:panelGroupLayout layout="scroll"
              xmlns:af="http://xmlns.oracle.com/adf/faces/rich" /&gt;
          </grouping-element>
            </facet-metadata>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichDecorativeBox properties-->
      <property>
         <description>the height of the top facet specified as a CSS length.
      </description>
         <property-name>topHeight</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>50px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the top facet.
      </description>
         <property-name>topLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        Specifies the WAI-ARIA landmark role for the content of the center facet.
      </description>
         <property-name>centerLandmark</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none banner complementary contentinfo main navigation search</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The component style theme to apply to this component.
      Themes are cascaded down through all child components. All HTML elements that
      are rendered by a rich component within a themed component will have the theme
      added to its list of style classes. Themes are not compatible with tonal styles
      and therefore only one method can be used per page (themes or tonal styles). 
      A blank theme will remove the current theme, and a value of "inherit", 
      null or not setting a theme will use the current theme.
      Skins are the sources of the the themes. Some skins may have no themed definitions. 
      Suggested theme names include "dark", "medium", "light", and "default".
      </description>
         <property-name>theme</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.DecorativeBox</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The trainButtonBar component is a collection of buttons that provides an additional 
      means to navigate the stops in a train.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/train.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTrainButtonBar</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichTrainButtonBar</component-class><!--org.apache.myfaces.trinidad.Process facets-->
      <facet>
         <description>the component to use to stamp each element in the
              process. A CommandNavigationItem is expected.
      </description>
         <facet-name>nodeStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreCommandNavigationItem</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Process properties-->
      <property>
         <description>the hierarchy of data - must be of type 
            org.apache.myfaces.trinidad.model.MenuModel
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichTrainButtonBar properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Process</component-family>
         <renderer-type>oracle.adf.rich.TrainButtonBar</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The inputFile component is a component that can
          be used to upload a file.  It supports displaying a label,
          text, and messages.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/inputFile.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichInputFile</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichInputFile</component-class><!--oracle.adf.RichInputFile facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichInputFile properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the size of the text control specified by the number of characters shown.The default value depends on the browser.
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation. For example, setting this attribute to "T&amp;amp;ext" willset the label to "Text" and the access key to 'e'.&lt;/html&gt;
      </description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.File</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <unsupported-agents>pda phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>label</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Represents an interactive tree component.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/tree.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTree</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichTree</component-class><!--org.apache.myfaces.trinidad.Tree facets-->
      <facet>
         <description>the component to use to stamp each element in the
              tree. Only certain types of components are supported, 
              including all
              components with no behavior and most components that implement the
              EditableValueHolder or ActionSource interfaces.  In a treeTable, this must be a column.
      </description>
         <facet-name>nodeStamp</facet-name>
      </facet><!--oracle.adf.RichTree facets-->
      <facet>
         <description>the component used to stamp each step of the focus path when the 
                            Hierachical Selector popup is displayed.  This component can  be a
                            a combination of  simple outputText, image, or outputFormatted tags and must not be an
                            "input" component (EditableValueHolder) since no user input
                            is allowed in the Hierarchical Selector popup. If this facet is not provided, 
                            then the Hierarchical Selector icon is not rendered.
      </description>
         <facet-name>pathStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichOutputText oracle.adf.RichOutputFormatted</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>popup component containing the context menu that 
        will be shown on right click of any tree node. 
        The af:popup must contain an af:menu to display the context menu</description>
         <facet-name>contextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Tree properties-->
      <property>
         <description>the selection state for this component.</description>
         <property-name>selectedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to an ExpansionListener</description>
         <property-name>rowDisclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.
      </description>
         <property-name>disclosedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a selection listener</description>
         <property-name>selectionListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
          Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the hierarchy of tree data - must be of type 
        org.apache.myfaces.trinidad.model.TreeModel</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the rowKey of the currently focused row.
        The rowKeys of the ancestor rows of the focus row are added
        to the expandedRowKeys RowKeySet by default.
      </description>
         <property-name>focusRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a focus listener</description>
         <property-name>focusListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        If upon initial rendering, the current subtree under the focused row path
        should be expanded. A RowDisclosureEvent is broadcast from the encode begin of the 
        component so that listeners are properly notified of the disclosure.
      </description>
         <property-name>initiallyExpanded</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichTree properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A search expression to identify the popup component containing the context menu that will be shown within the tree body.  Expressions are relative to this tree component and must account for NamingContainers (for example, tree and panelCollection are NamingContainer components).  You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers.  For example, a leading "::" will pop out of one NamingContainer (including component itself if it is a NamingContainer) and begin search from there, ":::" will pop out of two NamingContainers, etc.</description>
         <property-name>contextMenuId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated, "contextMenu" facet should be used instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether rows in this table are selectable.</description>
         <property-name>rowSelection</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none single multiple</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the number of rows in the data fetch block</description>
         <property-name>fetchSize</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data should be fetched when the component is rendered initially.  When contentDelivery is "immediate", data is fetched and inlined into the component chrome.  If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request.</description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>lazy</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the row to display in the tree during intial display. 
      The possible values are "first" to display the first row, 
      "last" to display the last row and "selected" to display the first selected row in the tree. 
      The default value for this is null which means that the first row is displayed.</description>
         <property-name>displayRow</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>first last selected</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the rowkey to display in the tree during intial display. 
      Specifying this attribute will override the displayRow attribute.</description>
         <property-name>displayRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text of an empty tree. If the text is enclosed in an open and closing html tag, 
      it will be formatted. The formatting behavior is similar to outputFormatted component.  
      If it is not enclosed in an open and closing html tag, it will not be formatted.
      </description>
         <property-name>emptyText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the summary of this tree's purpose and structure
         for user agents rendering to non-visual media.
      </description>
         <property-name>summary</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Indicates if we should actually select the node clicked when right clicking to show a context menu. 
      By default the node is selected before the context menu is displayed. However if contextMenuSelect="false", 
      and if user right clicks a node, the new node is highlighted and the highlighting for the currently selected node(s) is cleared 
      when the context menus is displayed. The highlighting of the currently selected nodes(s) is restored after the context menu is dismissed.
      It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected node(s).
      The highlighted row key is established as a currency in the tree when the action for context menu item is executed. The currency in the tree can be
      retrieved by calling "tree.getRowKey()".</description>
         <property-name>contextMenuSelect</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates the mode used to edit the tree when it contains editable components. 
      The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area.
      In "clickToEdit" mode a single row editable at a time. A row becomes editable by double clicking on it. 
      If a user types F2, the currently selected row becomes editable. Typing Esc removes the user from editing mode. 
      User can then navigate next/previous rows using tab, &amp;lt;shift&amp;gt;tab, or enter.
      The default editing mode is "editAll".</description>
         <property-name>editingMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>editAll</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>clickToEdit editAll</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates whether the "Expand/Collapse All", and "Expand/Collapse All Below" menu items are rendered. These menu items are rendered by default.</description>
         <property-name>expandAllEnabled</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
      </property>
      <property>
         <description>private property to indicate current vertical scroll position .
      </description>
         <property-name>scrollTop</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate current horizontal scroll position .
      </description>
         <property-name>scrollLeft</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate the client token for the first visible node .
      </description>
         <property-name>scrollTopRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to turn on/off the clearing of the row key token cache when the copmponent is PPRed. 
      Default is true
      </description>
         <property-name>clearTokenCacheOnPPR</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Tree</component-family>
         <renderer-type>oracle.adf.rich.Tree</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection rowDisclosure </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection rowDisclosure </trigger-event-types>
            
         </component-metadata>
         <unsupported-agents>phone voice</unsupported-agents>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>value</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The contextInfo control adds an area which can be clicked to show contextual information.</description>
      <component-type>oracle.adf.RichContextInfo</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichContextInfo</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichContextInfo properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a contextInfo listener.</description>
         <property-name>contextInfoListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.ContextInfo</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange contextInfo </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange contextInfo </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A component which allows the end user to select a single value from a list of
                 available options.</description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/selectOneRadio.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSelectOneRadio</component-type>
      <component-class>oracle.adf.view.rich.component.rich.input.RichSelectOneRadio</component-class><!--oracle.adf.RichSelectOneRadio facets-->
      <facet>
         <description>This facet is deprecated, helpTopicId should be used for providing help.
      This is a no-op for form components.</description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred-child-components>oracle.adf.RichOutputText</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.RichSelectOneRadio properties-->
      <property>
         <description>an attribute which if set to true, the changed indicator icon will be displayed
      on the component.  This value defaults to false.</description>
         <property-name>changed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text commonly used by user agents to display tooltip text on the changed
                            indicator icon. Default value is "Changed". The behavior of the  tooltip is
                            controlled by the user agent, e.g. Firefox 2 truncates long tooltips.</description>
         <property-name>changedDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute which if set to TRUE on a form element, the component will automatically submit
     when an appropriate action takes place (a click, text change, etc.).  Also submitted are any other components with
     partialTriggers pointing to this component.
      </description>
         <property-name>autoSubmit</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to
               the form element specified by the
         &lt;code&gt;for&lt;/code&gt;, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              &lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the style of the content piece of the component. You can style width by setting this attribute like this: 
      width: 100px. </description>
         <property-name>contentStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the element is disabled. Unlike a readonly component, a disabled
         component is unable to receive focus. If the component has the potential to have a scrollbar, and you want the user to
         be able to scroll through the component's text or values, use the 'readOnly' attribute, 
         not the 'disabled' attribute.</description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the label of the component. If you want the label to appear above the 
      control, use a panelFormLayout. </description>
         <property-name>label</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>Label {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the control is displayed as an editable field or as an output-style text control.
         Unlike a disabled component, a readonly component is able to receive focus.</description>
         <property-name>readOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the associated control displays a visual indication
      of required user input. If a "required" attribute is also present, both the 
      "required" attribute and the "showRequired" attribute must be false for the visual
      indication not to be displayed.  An example of when it can be desirable to use 
      the showRequired property is if you have a field that is initially empty and is 
      required only if some other field on the page is touched.
      </description>
         <property-name>showRequired</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>APPEARANCE</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a boolean value that controls whether the component 
      provides label support;  when set to "true", the component will not display
      the label (these may be ignored: label, labelAndAccessKey, accessKey, 
      showRequired, help facet) and may use simpler layout primitives. One of the 
      usecases can be when the component is used in repeatable elements like in table,
      for-each etc., where label is not required.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;whether or not the values are passed through to
            the client. When 
            valuePassThru is false
            the value and the options' values
            are converted to indexes before being sent to the client. 
            Therefore, when valuePassThru is false, 
            there is no need to write your own converter when you are using custom Objects
            as your values and/or options.
            &lt;p&gt;If you need to know the actual values on the client-side, then you can set 
            valuePassThru to true. This will pass the values through to the client, 
            using your custom converter if it is available; a custom converter is
            needed if you are using custom objects. 
            For drag and drop it is recommended to set valuePassThru to true for both the drag 
            source and drop target since values are usually required on the client for drag and drop
            operations.&lt;/p&gt; 
            &lt;p&gt;The default is false.&lt;/p&gt;&lt;/html&gt;
          </description>
         <property-name>valuePassThru</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
              false
            </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>an attribute that will simultaneously set both the "label"and "accessKey" attributes from a single value, usingconventional ampersand notation.For example, setting this attribute to "T&amp;amp;ext" willset the text to "Text" and the access key to 'e'.</description>
         <property-name>labelAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the buttons display horizontally or vertically. The default is "vertical".</description>
         <property-name>layout</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>vertical</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-values>horizontal vertical</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the label for an additional item that indicates no selection has
been made.  When the user selects this item, "required" validation will
not pass, or a null value will be set if the component is not "required".</description>
         <property-name>unselectedLabel</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.SelectOne</component-family>
         <renderer-type>oracle.adf.rich.Radio</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange valueChange </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>label</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichSelectItem</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richselectitem-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The seperator is used anywhere to create a horizontal separator between items.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/objectSeparator.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichSeparator</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichSeparator</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichSeparator properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Object</component-family>
         <renderer-type>oracle.adf.rich.Separator</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The goButton creates a push button that navigates directly
to another location instead of delivering an action.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/goButton.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichGoButton</component-type>
      <component-class>oracle.adf.view.rich.component.rich.nav.RichGoButton</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Go properties-->
      <property>
         <description>the URI this go component references</description>
         <property-name>destination</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichGoButton properties-->
      <property>
         <description>the textual label of the go component.   Go components will
             also render children elements (including text nodes), though not
             all subclasses of the go component will necessarily support
             children.
      </description>
         <property-name>text</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether the go component should be considered disabled.
              This attribute only has meaning when go components are used in certain
              container types, such as global headers and tab bars.
      </description>
         <property-name>disabled</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>&lt;html&gt;
 an attribute that will simultaneously set both the "text"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;amp;') notation.
              &lt;p&gt;
              For example, setting this attribute to "T&amp;amp;amp;ext" will
              set the text to "Text" and the access key to 'e'.
              &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>textAndAccessKey</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <property-metadata>
               <translatable>true</translatable>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
 a character used to gain quick access to this component.
              For accessibility reasons, this functionality is not supported 
              in screen reader mode.
              &lt;p&gt;
              If the same access key appears in multiple input fields in the 
              same page of output, the rendering user agent will cycle among 
              the elements accessed by the similar keys. Note that user agents 
              are inconsistent about dealing with two links having same access 
              key, and so the cycling behavior is dependent on what the user agent 
              provides.
              &lt;/p&gt;&lt;p&gt;
                This attribute is sometimes referred to as the "mnemonic".
              &lt;/p&gt;&lt;p&gt;
                The character specified by this attribute
                &lt;strong&gt;must&lt;/strong&gt; exist in the
                &lt;code&gt;Text&lt;/code&gt; attribute of this go component instance.
                If it does not, the user will receive no visual indication of
                the existence of the accessKey.
                &lt;/p&gt;&lt;p&gt;
                Note that the accessKey is triggered by browser-specific and platform-specific 
                modifier keys. It even has browser-specific meaning. For example, Internet 
                Explorer 7.0 will set focus when you press Alt+&amp;lt;accessKey&amp;gt;. Firefox 2.0 
                on some operating systems you press Alt+Shift+&amp;lt;accessKey&amp;gt;. 
                Firefox 2.0 on other operating systems you press Control+&amp;lt;accessKey&amp;gt;. 
                Refer to your browser's documentation for how it treats accessKey.
                &lt;/p&gt;
                &lt;/html&gt;
      </description>
         <property-name>accessKey</property-name>
         <property-class>char</property-class>
      </property>
      <property>
         <description>the target frame for the go component.</description>
         <property-name>targetFrame</property-name>
         <property-class>java.lang.String</property-class>
      </property>
      <property>
         <description>
        
        &lt;html&gt;
          the URI of an image to be displayed on the button. This 
          attribute supports these various types of URIs:
          &lt;ul&gt;
            &lt;li&gt;absolute - an absolute path to the image, like 
                "http://oracleimg.com/admin/images/ocom/hp/oralogo_small.gif"&lt;/li&gt;
            &lt;li&gt;relative - a path located relatively to the source page, like "bullet.jpg" &lt;/li&gt;
            &lt;li&gt;context relative - a path relatively based on the web application's context root, 
                like "/images/error.png"&lt;/li&gt;
            &lt;li&gt;server relative - a path relatively based on the web server by application name, like 
                "//adf-richclient-demo-context-root/images/error.png"&lt;/li&gt;
          &lt;/ul&gt;
          &lt;strong&gt;
            As icon does not allow alternative text to be provided for the
            image, in order to create an accessible product icon must only be
            used when its use is purely decorative. 
          &lt;/strong&gt;
        &lt;/html&gt;
      </description>
         <property-name>icon</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:property-editor>IMAGE_URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Go</component-family>
         <renderer-type>oracle.adf.rich.Button</renderer-type>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange </trigger-event-types>
         </component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
            <fmd:default-property>text</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The progressIndicator component can be used to give users 
          an understanding that there is a back end task in progress.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/progressIndicator.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichProgressIndicator</component-type>
      <component-class>oracle.adf.view.rich.component.rich.output.RichProgressIndicator</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Progress properties-->
      <property>
         <description>The data model being used by this progress component.
              The model should be of type 
              org.apache.myfaces.trinidad.model.BoundedRangeModel.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A reference to an action method sent by the progress component, 
              or the static outcome of an action. This is invoked when the task
              under progress is complete.
      </description>
         <property-name>action</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A method reference to an action listener.
            This is invoked after the task in progress is complete.
      </description>
         <property-name>actionListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side -
          will be skipped when
          events are generated by this component.

          When immediate is true, the command's action and
          ActionListeners, including the default ActionListener
          provided by the JavaServer Faces implementation,
          will be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.  Because
          validation runs during Process Validators (after
          Apply Request Values, but before Invoke Application),
          setting immediate to true will skip validation.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property><!--oracle.adf.RichProgressIndicator properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Progress</component-family>
         <renderer-type>oracle.adf.rich.ProgressIndicator</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      The query component provides the user the ability to perform a query, or personalize saved
      searches.
    </description>
      <component-type>oracle.adf.RichQuery</component-type>
      <component-class>oracle.adf.view.rich.component.rich.RichQuery</component-class><!--oracle.adf.RichQuery facets-->
      <facet>
         <description>
        This facet is deprecated, instead the attribute 'helpTopicId' should be used for 
        providing help. Both the help facet (when rendered inline) and helpTopicId with instructions 
        text are rendered in the same spot, so if helpTopicId is specified and it has instructions 
        text, the help facet will not be rendered if specified inline. &lt;br/&gt;
        Help content that is displayed to the user. The content of the help is displayed inline 
        inside the header content or as a popup through a link. 
      </description>
         <facet-name>help</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:deprecated>This facet is deprecated, helpTopicId should be used for providing help.</fmd:deprecated>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>Used to specify content that displays in the query header. Contents of this 
        facet will be shown in both Basic and Advanced mode. For example, to show custom command buttons 
        in both Basic and Advanced mode, buttons should be added to the toolbar facet.
      </description>
         <facet-name>toolbar</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
        Used to specify content that provides additional information to the user. 
      This content is usually displayed under the search panel header and end aligned with the 
      header.
      </description>
         <facet-name>info</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>
        Used to specify content that displays in the query footer. If a footer is not specified then
        an 'Add Fields' dropdown is automatically added to the facet. If a footer facet is specified,
        (that includes custom buttons for example) the default 'Add Fields' dropdown will not appear 
        and users are required to specify it explicitly in the footer facet along with the other content
        if this functionality is desired. In addition, contents of this facet will only be shown in the 
        Advanced mode.
      </description>
         <facet-name>footer</facet-name>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Query properties-->
      <property>
         <description>
        whether the conjunction is readOnly or not
      </description>
         <property-name>conjunctionReadOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryDescriptor object. This provides information about the currently selected 
        saved search. For details about QueryDescriptor, please refer to 
        oracle.adf.view.rich.model.QueryDescriptor
      </description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.QueryDescriptor</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryModel object that collectively represents the entire model for the query 
        component. The QueryModel manages QueryDescriptors, iow, supports methods to create, clone 
        (from an existing), delete, reset and update a QueryDescriptor.  For details about 
        QueryModel, please refer to the Javadocs for oracle.adf.view.rich.model.QueryModel.
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.QueryModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a Querylistener
      </description>
         <property-name>queryListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a QueryOperationlistener
      </description>
         <property-name>queryOperationListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichQuery properties-->
      <property>
         <description>
        a boolean value that determines if query component needs to be disclosed or not.
      </description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the preferred width of the value part of the search field. Usually a percentage,
        but may be specified as either a percentage or an absolute number of pixels. If the width is
        not specified, it will default appropriately. If specified as a percentage the sum of
        labelWidth and fieldWidth should add up to 100%, regardless of the number of columns. If the
        fieldWidth is specified and is a percentage the labelWidth will be derived appropriately if
        not specified.
      </description>
         <property-name>fieldWidth</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the label of the query header.</description>
         <property-name>headerText</property-name>
         <property-class>java.lang.String</property-class>
         <suggested-value>{localName} {0}</suggested-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>true</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider.</description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the alignment of label prompts for a search field (criterion). 'start' places the
        label before the operator and value fields. 'top' renders the label above the operator and
        value fields.
      </description>
         <property-name>labelAlignment</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>start</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>start top</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the preferred width of the label. Usually a percentage, but may be specified as
        either a percentage or an absolute number of pixels. If the width is not specified, it will
        default appropriately. If specified as a percentage tthe sum of labelWidth and fieldWidth
        should add up to 100%, regardless of the number of columns. If the labelWidth is specified
        and is a percentage the fieldWidth will be derived appropriately if not specified.
      </description>
         <property-name>labelWidth</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the maximum number of columns to show. This property defaults to 3. If the panelForm 
        (containing the search fields) is inside of another panelForm, this will always be 1.
      </description>
         <property-name>maxColumns</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the location the mode button is displayed. Valid values are footer and toolbar 
        (default).
      </description>
         <property-name>modeButtonPosition</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>toolbar</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>footer toolbar</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the rendering of mode change button. This button is used to 
      switch the modes between basic and advanced. In addition if users choose to toggle between the 
      query and quickQuery components, they can do so by adding a commandButton to the toolbar facet. 
      The actionListener on the commandButton can then be wired to a method on a session scoped 
      managed bean.
      </description>
         <property-name>modeChangeVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
         a search expression identifying the results component (usually a table or 
        treeTable) that will display the results of the query. Expressions are relative to this 
        source component and must account for NamingContainers. If the results component is already 
        inside of a naming container, you can prepend a single colon to start the search from the 
        root, or multiple colons to move up through the NamingContainers. For example, a leading 
        "::" will pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc.
        Product teams should ensure that this value is set correctly so that the search operation 
        triggers a partial page refresh of the component. Also, the 'Save Results Layout' feature, 
        (applied on the current saved search) uses this value as a UIHint in the model.
      </description>
         <property-name>resultComponentId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        the number of rows after which to start a new column. This attribute defaults to
        Integer.MAX_VALUE. The number of rows actually rendered depends also on the "maxColumns"
        property. If the children will not fit in the given number of rows and columns, the number
        of rows will increase to accommodate the children.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the mode of display and usage for saved searches. 
        &lt;p&gt;
          &lt;ul&gt;
            &lt;li&gt;default: all saved searches are displayed. In addition any saved search can be 
            created but only user saved searches can be deleted/updated.&lt;/li&gt;
            &lt;li&gt;readOnly: saved searches to be viewed/selected, but not edited&lt;/li&gt;
            &lt;li&gt;hidden: all saved searches are hidden&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/p&gt;
        &lt;/html&gt;
        
      </description>
         <property-name>saveQueryMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default readOnly hidden</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the mode of display for the query component. 
        &lt;p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;default&lt;/b&gt;: displays all parts of the query component.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;compact&lt;/b&gt;: Similar to 'default' except, in this mode :&lt;/li&gt;
              &lt;ul&gt;
              	&lt;li&gt;
              		The header text will not be rendered and headerText property will always 
              		be ignored. 
              	&lt;/li&gt;
              	&lt;li&gt;
              		The component will be rendered undisclosed unless the disclosed property 
              		is explicitly set to true. 
              	&lt;/li&gt;
              	&lt;li&gt;
              		The mode button will be rendered in the footer unless the 'modeButtonPosition' 
              		property is set to 'toolbar'. If the modeChangeVisible' property is set to 
              		false, it is not rendered at all. 
              	&lt;/li&gt;
              	&lt;li&gt;
              		The layout of the saved search dropdown will be left aligned on the header.
              	&lt;/li&gt;
              	&lt;li&gt;
              		No container or borders will be present around the header or toolbar.
              	&lt;/li&gt;              	
              &lt;/ul&gt;
            &lt;li&gt;&lt;b&gt;simple&lt;/b&gt;: In this mode the header and footer will not be rendered and the 
              following properties will be ignored - disclosed, headerText, modeButtonPosition, 
              modeChangeVisible.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/p&gt;
        &lt;/html&gt;
        
      </description>
         <property-name>displayMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default compact simple</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the boolean that determines if the header and footer will be rendered. This 
        attribute is deprecated and displayMode=simple should be used instead.
      </description>
         <property-name>simple</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>This attribute is deprecated, displayMode=simple should be used instead.</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;how the component will handle geometry management.  
      Options are:
        &lt;ul&gt;&lt;li&gt;default - either flow or stretch, depending on the container the query is inside
        &lt;/li&gt;&lt;li&gt;flow - does not support being stretched and will not attempt to stretch the children; the height of the component will be determined by the browser based on the children
        &lt;/li&gt;&lt;li&gt;stretch - supports being stretched and will attempt to stretch the sole child or will wrap the children without stretching them; the height of this component is in no way determined by the children
        &lt;/li&gt;&lt;/ul&gt;
        &lt;/html&gt;
      </description>
         <property-name>type</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>default</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
               <fmd:property-values>default flow stretch</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Query</component-family>
         <renderer-type>oracle.adf.rich.Query</renderer-type>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange query </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange query </trigger-event-types>
            
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>The panelDashboard component arranges child panelBoxes (or regions wit showHeader=true) into a grid of columns
          and rows.  It will stretch its panelBox children to fill up the width of a column and the
          specified row height.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/panelDashboard.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichPanelDashboard</component-type>
      <component-class>oracle.adf.view.rich.component.rich.layout.RichPanelDashboard</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichPanelDashboard properties-->
      <property>
         <description>the number of columns the width of the dashboard will be divided into
      </description>
         <property-name>columns</property-name>
         <property-class>int</property-class>
         <default-value>3</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the height of the rows of the grid layout as a CSS length
      </description>
         <property-name>rowHeight</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>100px</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A method reference to a callback with the signature oracle.adf.view.rich.dnd.DnDAction method(oracle.adf.view.rich.event.DropEvent dropEvent) called when a drop occurs on the component. Since the
panelDashboard will automatically adjust the positions of its children in the browser, this method should return
DnDAction.NONE if your handler is successful in adjusting the position of the reordered children since this will
cause the panelDashboard to be left as is.   If you return DnDAction.MOVE, the panelDashboard will be redrawn.
You may wish to use org.apache.myfaces.trinidad.change.ReorderChildrenComponentChange if you wish to preserve a
new ordering of the children.  The dropEvent.getDropSiteIndex() method will give you the location that the user
desires the dragged component to end up at.  Use dropEvent.getTransferable().getData(DataFlavor.UICOMPONENT_FLAVOR)
to get the dragged component.</description>
         <property-name>dropListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Panel</component-family>
         <renderer-type>oracle.adf.rich.Dashboard</renderer-type>
         <tag-handler>oracle.adfinternal.view.faces.facelets.rich.PanelDashboardHandler</tag-handler>
         <component-metadata><customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut propertyChange </trigger-event-types>
         </component-metadata>
      </component-extension>
   </component>
   <component>
      <description>Represents an interactive hierarchical table component.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/treeTable.png</small-icon>
      </icon>
      <component-type>oracle.adf.RichTreeTable</component-type>
      <component-class>oracle.adf.view.rich.component.rich.data.RichTreeTable</component-class><!--org.apache.myfaces.trinidad.Tree facets-->
      <facet>
         <description>the component to use to stamp each element in the
              tree. Only certain types of components are supported, 
              including all
              components with no behavior and most components that implement the
              EditableValueHolder or ActionSource interfaces.  In a treeTable, this must be a column.
      </description>
         <facet-name>nodeStamp</facet-name>
      </facet><!--oracle.adf.RichTreeTable facets-->
      <facet>
         <description>the component used to render the table footer. This facet existed in 10.1.3, but is currently not supported in RichTable and RichTreeTable</description>
         <facet-name>footer</facet-name>
         <facet-extension>
            <facet-metadata>
               <hidden>true</hidden>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>the component used to render the table header. This facet existed in 10.1.3, but is currently not supported in RichTable and RichTreeTable</description>
         <facet-name>header</facet-name>
         <facet-extension>
            <facet-metadata>
               <hidden>true</hidden>
            </facet-metadata>
         </facet-extension>
      </facet>
      <facet>
         <description>popup component containing the context menu that
        will be shown on right click of any table row.
        The af:popup must contain an af:menu to display the context menu</description>
         <facet-name>contextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>popup component containing the context menu that
        will be shown on right click within the table body, but outside of any table row.
        The af:popup must contain an af:menu to display the context menu</description>
         <facet-name>bodyContextMenu</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichPopup</fmd:preferred-child-components>
               <fmd:allowed-child-components>oracle.adf.RichPopup</fmd:allowed-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet>
      <facet>
         <description>the component used to stamp each step of the focus path when the 
                            Hierachical Selector popup is displayed.  This component can  be a
                            a combination of  simple outputText, image, or outputFormatted tags and must not be an
                            "input" component (EditableValueHolder) since no user input
                            is allowed in the Hierarchical Selector popup. If this facet is not provided, 
                            then the Hierarchical Selector icon is not rendered.
      </description>
         <facet-name>pathStamp</facet-name>
         <facet-extension>
            <fmd:facet-metadata>
               <fmd:preferred-child-components>oracle.adf.RichOutputText oracle.adf.RichOutputFormatted</fmd:preferred-child-components>
            </fmd:facet-metadata>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Tree properties-->
      <property>
         <description>the selection state for this component.</description>
         <property-name>selectedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to an ExpansionListener</description>
         <property-name>rowDisclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.
      </description>
         <property-name>disclosedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a selection listener</description>
         <property-name>selectionListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt;
          Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the hierarchy of tree data - must be of type 
        org.apache.myfaces.trinidad.model.TreeModel</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the rowKey of the currently focused row.
        The rowKeys of the ancestor rows of the focus row are added
        to the expandedRowKeys RowKeySet by default.
      </description>
         <property-name>focusRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a focus listener</description>
         <property-name>focusListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        If upon initial rendering, the current subtree under the focused row path
        should be expanded. A RowDisclosureEvent is broadcast from the encode begin of the 
        component so that listeners are properly notified of the disclosure.
      </description>
         <property-name>initiallyExpanded</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.TreeTable properties-->
      <property>
         <description>
        
          If the root node should be rendered or not. Defaults to true.
        
      </description>
         <property-name>rootNodeRendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of records that can be displayed at
              one time (range size).
              Each level of depth in the tree can have a different range size.
              The first number in the array sets the range size for the root
              collection. Each subsequent number sets the range size for the
              corresponding depth. The last number becomes the default for
              each subsequent level of depth.

              If a node has more children than
              the range size, navigation rows will be rendered above and
              below the child nodes.
      </description>
         <property-name>rowsByDepth</property-name>
         <property-class>int[]</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.
      </description>
         <property-name>rangeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.RichTreeTable properties-->
      <property>
         <description>the CSS styles to use for this component.  This
is intended for basic style changes. The inlineStyle is a set of CSS styles that
are applied to the root DOM element of the component.  If the inlineStyle's CSS properties
do not affect the DOM element you want affected, then you will have to create a skin and use the
skinning keys which are meant to target particular DOM elements, like ::label or ::icon-style.
     </description>
         <property-name>inlineStyle</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a CSS style class to use for this component. The style class can
                     be defined in your jspx page or in a skinning CSS file, for example, or you
                     can use one of our public style classes, like 'AFInstructionText'.</description>
         <property-name>styleClass</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the short description of the component. This text is commonly used by
                     user agents to display tooltip help text, in which case the behavior for the
                     tooltip is controlled by the user agent, e.g. Firefox 2 truncates long tooltips.
                     For form components, the shortDesc is displayed in a note window.  For
                     components that support the helpTopicId attribute it is recommended that
                     helpTopicId is used as it is more flexible and is more accessibility-compliant.</description>
         <property-name>shortDesc</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A whitespace separated list of attributes whose values ordinarily can be set 
                     only on the server, but need to be settable on the client.  Currently, this 
                     is supported only for the "disabled" attribute.</description>
         <property-name>unsecure</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the visibility of the component.  If it is "false", the component will 
      be hidden on the client.  Unlike "rendered", this does not affect the lifecycle on the server 
      - the component may have its bindings executed, etc. - and the visibility of the component can 
      be toggled on and off on the client, or toggled with PPR.  When "rendered" is false, the 
      component will not in any way be rendered, and cannot be made visible on the client. 
      In most cases, use the "rendered" property instead of the "visible" property.
      </description>
         <property-name>visible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>This attribute is deprecated. The 'id' attribute should be used when applying persistent customizations. This attribute will be removed in the next release.
      </description>
         <property-name>customizationId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated. This attribute will be removed in the next release. Use the 'id' attribute instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
               <customization-allowed>false</customization-allowed>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the IDs of the components that should trigger a partial update.
        This component will listen on the trigger components. If one of the
        trigger components receives an event that will cause it to update
        in some way, this component will request to be updated too.
        Identifiers are relative to the source component (this component), 
        and must account for NamingContainers.  If your component is already inside of a naming
        container, you can use a single colon to start the search from the root of the page,
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container (or itself if the component is
        a naming container) and begin the search from there, ":::" will pop out of
        two naming containers (including itself if the component is a naming container)
        and begin the search from there, etc. 
      </description>
         <property-name>partialTriggers</property-name>
         <property-class>java.lang.String[]</property-class>
         <property-extension>
            <property-metadata>
               <multi-scoped-id-holder>true</multi-scoped-id-holder>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>a set of client listeners.</description>
         <property-name>clientListeners</property-name>
         <property-class>oracle.adf.view.rich.event.ClientListenerSet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A search expression to identify the popup component containing the context menu that will be shown within the table body, for clicks outside of any table row.  Expressions are relative to this table component and must account for NamingContainers (for example, table and panelCollection are NamingContainer components).  You can prepend a single colon to start the search from the root, or multiple colons to move up through the NamingContainers.  For example, a leading "::" will pop out of one NamingContainer (including the component itself if it is a naming container, like table) and begin search from there, ":::" will pop out of two NamingContainers and begin search from there, etc.
      </description>
         <property-name>bodyContextMenuId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated, "bodyContextMenu" facet should be used instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether columns in this table are selectable.</description>
         <property-name>columnSelection</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none single multiple</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates what kind of stretching you want applied to the columns.
        For optimal performance, use the "none" (default) option.  If you want the last column
        to stretch to fill up any unused space inside of the viewport, use the "last" option.
        If you want to have an empty blank column be automatically inserted and have it
        stretch (so the row background colors will span the entire width of the table), use the
        "blank" option.  If you want to have a specific leaf (non-group) column stretch to fill
        up any unused space inside of the viewport, use the option where you specify "column:"
        followed by the ID of the column that you want to have stretched, e.g. "column:myColId".
        Note that row headers and frozen columns will not be stretched because doing so could
        easily leave the user unable to access the scrollable data body of the table.  Only a
        maximum of one column may be stretched at a time.
      </description>
         <property-name>columnStretching</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>A search expression to identify the popup component containing the context menu that
        will be shown on right click of any table row.  Expressions are relative to this table component
        and must account for NamingContainers (for example, table and panelCollection are NamingContainer components).
        You can prepend a single colon to start the search from the root, or multiple colons to move up through
        the NamingContainers.  For example, a leading "::" will pop out of one NamingContainer
        (including the component itself if it is a naming container, like table) and begin search from there,
        ":::" will pop out of two NamingContainers and begin search from there, etc.
      </description>
         <property-name>contextMenuId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:deprecated>This attribute is deprecated, "contextMenu" facet should be used instead.</fmd:deprecated>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether column reordering is disabled in the table. Column reordering is on by default.</description>
         <property-name>disableColumnReordering</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the Horizontal GridLines are to be drawn.</description>
         <property-name>horizontalGridVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the vertical GridLines are to be drawn.</description>
         <property-name>verticalGridVisible</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the text of an empty table. If the text is enclosed in an open and closing html tag, it will be formatted. The formatting behavior is similar to outputFormatted component.  If it is not enclosed in an open and closing html tag, it will not be formatted.</description>
         <property-name>emptyText</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the interval between which the column banding occurs. This value controls the display of the column banding in the table. For e.g, columnBandingInterval=1 would display alternately banded columns in the Grid.
      </description>
         <property-name>columnBandingInterval</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the interval between which the row banding occurs. This value controls the display of the row banding in the table. For e.g, rowBandingInterval=1 would display alternately banded rows in the Grid.
      </description>
         <property-name>rowBandingInterval</property-name>
         <property-class>int</property-class>
         <default-value>1</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether rows in this table are selectable.</description>
         <property-name>rowSelection</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>none</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>none single multiple multipleNoSelectAll</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the width of this component. Default value is 300 PX</description>
         <property-name>width</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the summary of this table's purpose and structure
         for user agents rendering to non-visual media.
      </description>
         <property-name>summary</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the number of rows in the data fetch block</description>
         <property-name>fetchSize</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data should be fetched when the component is rendered initially.  When contentDelivery is "immediate", data is fetched and inlined into the component chrome.  If contentDelivery is "lazy", data will be fetched and delivered to the client during a subsequent request.</description>
         <property-name>contentDelivery</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>lazy</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>immediate lazy</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the row to display in the table during intial display.
      The possible values are "first" to display the first row,
      "last" to display the last row and "selected" to display the first selected row in the table.
      The default value for this is null which means that the first row is displayed.
      Please note that this API will have no effect if the total number of rows are not known from
      the table model (model.getRowCount()==-1).</description>
         <property-name>displayRow</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>first</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>first last selected</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the rowkey to display in the table during intial display.
      Specifying this attribute will override the displayRow attribute.
      Please note that this API will have no effect if the total number of rows are not known from
      the table model (model.getRowCount()==-1).</description>
         <property-name>displayRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates if we should actually select the row clicked when right clicking to show a context menu.
      By default the row is selected before the context menu is displayed. However if contextMenuSelect="false",
      and if user right clicks a row, the new row is highlighted and the highlighting for the currently selected row(s) is cleared
      when the context menus is displayed. The highlighting of the currently selected row(s) is restored after the context menu is dismissed.
      It should be noted that when the context menu is displayed, the attribute selectedRowKeys still contains the selected row(s).
      The highlighted row key is established as a currency in the table when the action for context menu item is executed. The currency in the table can be
      retrieved by calling "table.getRowKey()".</description>
         <property-name>contextMenuSelect</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>Indicates the mode used to edit the table when it contains editable components.
      The possible values are "clickToEdit" and "editAll". In "editAll" mode all the editable components are displayed at a time in the table view area.
      In "clickToEdit" mode a single row editable at a time. A row becomes editable by double clicking on it.
      If a user types F2, the currently selected row becomes editable. Typing Esc removes the user from editing mode.
      User can then navigate next/previous rows using tab, &amp;lt;shift&amp;gt;tab, or enter.</description>
         <property-name>editingMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>editAll</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>editAll clickToEdit</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate current vertical scroll position.
      </description>
         <property-name>scrollTop</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate current horizontal scroll position.
      </description>
         <property-name>scrollLeft</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to indicate row key for the first visible row.
      </description>
         <property-name>scrollTopRowKey</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>private property to turn on/off the clearing of the row key token cache when the component is PPRed. 
      Default is true
      </description>
         <property-name>clearTokenCacheOnPPR</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>Indicates whether the "Expand/Collapse All", and "Expand/Collapse All Below" menu items are rendered. These menu items are rendered by default.</description>
         <property-name>expandAllEnabled</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.TreeTable</component-family>
         <renderer-type>oracle.adf.rich.TreeTable</renderer-type>
         <unsupported-agents>phone voice</unsupported-agents>
         <naming-container>true</naming-container>
         <component-metadata>
            <customization-allowed>true</customization-allowed>
            <client-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection rowDisclosure </client-event-types><trigger-event-types>click contextMenu dblClick mouseDown mouseUp mouseMove mouseOver mouseOut keyDown keyUp keyPress focus blur propertyChange selection rowDisclosure </trigger-event-types>
            
         </component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>id</fmd:default-property>
            <fmd:preferred-child-components>oracle.adf.RichColumn</fmd:preferred-child-components>
            <fmd:satisfied-contracts>oracle-adf-richcolumn-holder</fmd:satisfied-contracts>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
Defines a compound component that obtains its children using an include. This component is meant
to be extended, but not used directly. Include components require a tag to function correctly.

    </description>
      <component-type>oracle.adf.Include</component-type>
      <component-class>oracle.adf.view.rich.component.fragment.UIXInclude</component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The view ID to include. This attribute should not be set on the component, but
      should be set using the JSP tag.</description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <component-extension>
         <component-family>oracle.adf.Include</component-family>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A UIXInputPopup component is a base abstraction for components that allow 
      both input and selection from a list of possible values.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/InputPopup.png</small-icon>
      </icon>
      <component-type>oracle.adf.InputPopup</component-type>
      <component-class>oracle.adf.view.rich.component.UIXInputPopup</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Value properties-->
      <property>
         <description>the value of the component.  If the EL binding
for the "value" points to a bean property with a getter but no setter, and
this is an editable component, the component will be rendered 
in read-only mode.</description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a converter object</description>
         <property-name>converter</property-name>
         <property-class>javax.faces.convert.Converter</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.EditableValue properties-->
      <property>
         <description>whether the value is converted and validated immediately in the Apply Request Values phase, or is handled in the Process Validators phase, the default.  By default, values are converted and validated together in the Process Validators phase.  However, if you need access to the value of a component during Apply Request Values - for example, if you need to get the value from an actionListener on an immediate commandButton - then setting this to "immediate" makes that possible.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether the component's value is currently valid</description>
         <property-name>valid</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether a non-null, non-empty value must be entered.  If false, validators will not be executed when the value is null or empty.
      </description>
         <property-name>required</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>whether a local value is currently set.  If false, values are being retrieved from any attached ValueBinding
      </description>
         <property-name>localValueSet</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the current submitted value.  This value,
if non-null, is set by the Renderer to store a possibly invalid value
for later conversion or redisplay, and has not yet been converted
into the proper type for this component instance.   This method
should only be used by the decode() and validate() method
of this component, or its corresponding Renderer;  however, user code
may manually set it to null to erase any submitted value.
      </description>
         <property-name>submittedValue</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a validator method</description>
         <property-name>validator</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a value change listener</description>
         <property-name>valueChangeListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>&lt;html&gt; the message to be displayed, if 'required' validation fails.
             &lt;p&gt;
              &lt;strong&gt;
               Parameters:
              &lt;/strong&gt;
              &lt;ul&gt;
               &lt;li&gt;
                {0} the label that identifies the component
               &lt;/li&gt;
              &lt;/ul&gt;
             &lt;/p&gt;&lt;/html&gt;
      </description>
         <property-name>requiredMessageDetail</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <translatable>true</translatable>
            </property-metadata>
         </property-extension>
      </property><!--oracle.adf.InputPopup properties-->
      <property>
         <description>a method reference to a LaunchPopupListener (called in response to a 
      LaunchPopupEvent).</description>
         <property-name>launchPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        A ListOfValuesModel object that represents the model for the LOV component. The 
        ListOfValuesModel currently provides methods for use within the LOV component and in 
        addition, to retrieve a QueryModel and TableModel in order to to display a table and/or a 
        query component (which are then used to search and select a value for the LOV component).  
        For details, please refer to the Javadocs for 
        oracle.adf.view.rich.model.ListOfValuesModel
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.ListOfValuesModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a ReturnPopupListener (called in response to a 
        ReturnPopupEvent).</description>
         <property-name>returnPopupListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>A method reference to a ReturnPopupDataListener (called in response to a 
      ReturnPopupDataEvent). The attrbite is deprecated and will be 
      removed in the future release.</description>
         <property-name>returnPopupDataListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:deprecated>The ReturnPopupDataEvent is not queued on the component anymore, The attribute will be removed in future</fmd:deprecated>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        the id of the user-defined popup component relative to this component (accounting for
        NamingContainers). If this attribute is supplied, an af:toolbar with af:commandToolbarButton
        will be created internally, which will be displayed as create icon in the Search and Select
        dialog. Clicking the button launches the user-defined popup component.&lt;br/&gt;
        If the developer has added a dialog within the popup, then the decision to refresh the table
        is made by the component intelligently(table will be refreshed on pressing Ok button in the
        dialog). If the developer has not added a dialog to the popup, then the table will be
        refreshed always.&lt;br/&gt; 
        Identifiers are relative to the component, and must account for NamingContainers. 
        You can use a single colon to start the search from the root, 
        or multiple colons to move up through the NamingContainers - "::" will
        pop out of the component's naming container 
        and begin the search from there, ":::" will pop out of
        two naming containers and begin the search from there, etc.
      </description>
         <property-name>createPopupId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata>
               <scoped-id-holder>true</scoped-id-holder>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        
        &lt;html&gt;the mode that controls how the user specifies a value. This attribute is only applicable when the 'readOnly' attribute is set to false.
        &lt;p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;input&lt;/b&gt;: this mode allows the user to type in a value as well as browse and select from a list of available values.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;select&lt;/b&gt;: this mode allows the user only to browse and select from a list of available values.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/p&gt;
        &lt;/html&gt;
        
      </description>
         <property-name>editMode</property-name>
         <property-class>java.lang.String</property-class>
         <default-value>input</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:property-values>input select</fmd:property-values>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>
          false
        </mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>org.apache.myfaces.trinidad.Input</component-family>
         <renderer-type>oracle.adf.rich.InputPopup</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A UIXPopup component is an abstraction for a container component that shows popups.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/column.png</small-icon>
      </icon>
      <component-type>oracle.adf.Popup</component-type>
      <component-class>oracle.adf.view.rich.component.UIXPopup</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Popup</component-family>
         <renderer-type>oracle.adf.rich.Popup</renderer-type>
      </component-extension>
   </component>
   <component>
      <description>
      
The region tag allows dynamic content to be included in a master page.

    </description>
      <component-type>oracle.adf.Region</component-type>
      <component-class>oracle.adf.view.rich.component.fragment.UIXRegion</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Region properties-->
      <property>
         <description>whether or not to disclose the children</description>
         <property-name>disclosed</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>the id used to look up a topic in a helpProvider. </description>
         <property-name>helpTopicId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a disclosure listener</description>
         <property-name>disclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether data validation - client-side or
            server-side - should be skipped when
          events are generated by this component.

          When immediate is false (the default), the disclosure event will
          be delivered during the Invoke Application phase, which
          will trigger validation.  When set to true, the disclosure
          event will be executed during the Apply Request Values phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>the model for this region.</description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.RegionModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a RegionNavigationListener method</description>
         <property-name>regionNavigationListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Region</component-family>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      UIXQuery is the base abstraction for components that deliver a QueryEvent when a user
      performs a search or that deliver a QueryOperationEvent when user personalizes saved searches.
    </description>
      <icon>
         <small-icon>/org/apache/myfaces/trinidad/metadata/icons/query.png</small-icon>
      </icon>
      <component-type>oracle.adf.Query</component-type>
      <component-class>oracle.adf.view.rich.component.UIXQuery</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Query properties-->
      <property>
         <description>
        whether the conjunction is readOnly or not
      </description>
         <property-name>conjunctionReadOnly</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryDescriptor object. This provides information about the currently selected 
        saved search. For details about QueryDescriptor, please refer to 
        oracle.adf.view.rich.model.QueryDescriptor
      </description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.QueryDescriptor</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a QueryModel object that collectively represents the entire model for the query 
        component. The QueryModel manages QueryDescriptors, iow, supports methods to create, clone 
        (from an existing), delete, reset and update a QueryDescriptor.  For details about 
        QueryModel, please refer to the Javadocs for oracle.adf.view.rich.model.QueryModel.
      </description>
         <property-name>model</property-name>
         <property-class>oracle.adf.view.rich.model.QueryModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a Querylistener
      </description>
         <property-name>queryListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a QueryOperationlistener
      </description>
         <property-name>queryOperationListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Query</component-family>
         <renderer-type>oracle.adf.rich.query</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
Includes a DeclarativeComponent.

    </description>
      <component-type>oracle.adf.DeclarativeComponent</component-type>
      <component-class>oracle.adf.view.rich.component.fragment.UIXDeclarativeComponent</component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The view ID to include. This attribute should not be set on the component, but
      should be set using the JSP tag.</description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.DeclarativeComponent properties-->
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.DeclarativeComponent</component-family>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>UIXTable is base abstraction for filterable table.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/table.png</small-icon>
      </icon>
      <component-type>oracle.adf.Table</component-type>
      <component-class>oracle.adf.view.rich.component.UIXTable</component-class><!--org.apache.myfaces.trinidad.Table facets-->
      <facet>
         <description>the component to stamp below every row which is disclosed. Adding a
detail facet will automatically cause the detail column to be displayed.
      </description>
         <facet-name>detailStamp</facet-name>
         <facet-extension>
            <facet-metadata/>
         </facet-extension>
      </facet><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.CollectionBase properties-->
      <property>
         <description>Name of the EL variable used to reference each element of this collection.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.Iterator properties-->
      <property>
         <description>&lt;html&gt;
 Name of the EL variable used to reference the varStatus information.
          Once this component has completed rendering, this variable is
          removed (or reverted back to its previous value).
          The VarStatus provides contextual information about the state of the
          component to EL expressions. For components that iterate, varStatus
          also provides loop counter information.  Please see the this 
          component's documentation for the specific properties on the varStatus.
          The common properties on varStatus include:&lt;ul&gt;&lt;li&gt;"model" - returns the CollectionModel for this component&lt;/li&gt;&lt;li&gt;"index" - returns the zero based row index&lt;/li&gt;&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>varStatus</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the data model being used by this component.
The specific model class is
        &lt;code&gt;org.apache.myfaces.trinidad.model.CollectionModel&lt;/code&gt;.

        You may also use other model instances, e.g.,  
        &lt;code&gt;java.util.List&lt;/code&gt;  ,
        array, and  &lt;code&gt;javax.faces.model.DataModel&lt;/code&gt;.
        This component will automatically convert the instance
        into a &lt;code&gt;CollectionModel&lt;/code&gt;.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the maximum number of rows to display in a single range of rows.
Some ranges might have fewer
than the number of rows specified by this attribute (eg: the last range
might have an insufficient number of rows).
To display all rows at once, set this attribute to 0.
The default is 25.
      </description>
         <property-name>rows</property-name>
         <property-class>int</property-class>
         <default-value>25</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the index of the first row in the currently range of rows.
This index is zero-based. This attribute is used to control
which range of rows to display to the user.
      </description>
         <property-name>first</property-name>
         <property-class>int</property-class>
         <default-value>0</default-value>
      </property><!--org.apache.myfaces.trinidad.Table properties-->
      <property>
         <description>a method reference to an ExpansionListener</description>
         <property-name>rowDisclosureListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the set of disclosed rows for this component.
Each entry in the set is a rowKey.
      </description>
         <property-name>disclosedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a selection listener</description>
         <property-name>selectionListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>the selection state for this component.</description>
         <property-name>selectedRowKeys</property-name>
         <property-class>org.apache.myfaces.trinidad.model.RowKeySet</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether or not data validation - client-side or
            server-side -
          should take place when
          events are generated by this component.

          When immediate is true, the default ActionListener
          provided by the JavaServer Faces implementation
          should be executed during Apply Request Values phase
          of the request processing lifecycle, rather than
          waiting until the Invoke Application phase.
      </description>
         <property-name>immediate</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
      </property>
      <property>
         <description>a method reference to a sort listener</description>
         <property-name>sortListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>a method reference to a rangeChange listener that
         will be called when a new range is selected.
      </description>
         <property-name>rangeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>whether the "Show All" option is selected. The "Show All" option
        is available if there are less than 30 options and the row count in
        the data model is known.
      </description>
         <property-name>showAll</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Table properties-->
      <property>
         <description>
      the model used for filtering of data in the table. This attribute must be bound to an instance of FilterableQueryDescriptor class.
      </description>
         <property-name>filterModel</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <property-metadata>
               <unsupported-agents>phone voice</unsupported-agents>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        a method reference to a Querylistener
      </description>
         <property-name>queryListener</property-name>
         <property-class>javax.faces.el.MethodBinding</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Table</component-family>
         <renderer-type>oracle.adf.rich.Table</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
      </component-extension>
   </component>
   <component>
      <description>
      
Renders a PageTemplate.

    </description>
      <component-type>oracle.adf.PageTemplate</component-type>
      <component-class>oracle.adf.view.rich.component.fragment.UIXPageTemplate</component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.PageTemplate properties-->
      <property>
         <description>
        If this attribute is set to an instance of
        &lt;code&gt;oracle.adf.view.rich.model.PageTemplateModel&lt;/code&gt;, the view ID will be
        taken from the model and the model will receive notifications of the starting and stopping
        of the template context. Otherwise, if the value is non-null the value is assigned to the
        "bindings" EL variable while this template is rendering or decoding.
      </description>
         <property-name>value</property-name>
         <property-class>java.lang.Object</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
        This is the viewId of the resource that contains the definition
        for this pageTemplate. Typically this points to another jsp page, that
        begins with the &amp;lt;af:pageTemplateDef/&amp;gt; tag.
        &lt;p&gt;If the value attribute of the page template resolves to an instance of
        PageTemplateModel then the view ID will be retrieved from the the model instead
        of using the &lt;code&gt;viewId&lt;/code&gt; tag attribute.&lt;/p&gt;
      </description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.PageTemplate</component-family>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A UIXCalendar component is an abstraction for a calendar component that shows activities by day, week, month, list.
    </description>
      <component-type>oracle.adf.Calendar</component-type>
      <component-class>oracle.adf.view.rich.component.UIXCalendar</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Calendar properties-->
      <property>
         <description>the model providing activity data  - must be of type 
        oracle.adf.view.rich.model.CalendarModel</description>
         <property-name>value</property-name>
         <property-class>oracle.adf.view.rich.model.CalendarModel</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-writable>false</mafp:javascript-attribute-writable>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Calendar</component-family>
         <renderer-type>oracle.adf.rich.Calendar</renderer-type>
      </component-extension>
   </component>
   <component>
      <description>
      
A dynamic declarative component.

    </description>
      <component-type>oracle.adf.DynamicDeclarativeComponent</component-type>
      <component-class>
      oracle.adf.view.rich.component.fragment.UIXDynamicDeclarativeComponent
    </component-class>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Include properties-->
      <property>
         <description>
The EL variable name to used to access the attributes of the component. This is an internal 
attribute and should not be used.
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>var</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <description>
The EL variable name used to access the component. This is an internal attribute 
and should not be used. 
It is automatically managed by the definition tag in the included view.
      </description>
         <property-name>componentVar</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>false</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>The view ID to include. This attribute should not be set on the component, but
      should be set using the JSP tag.</description>
         <property-name>viewId</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>
        The identifier for the component. The identifier 
        must follow a subset of the syntax allowed in HTML
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:required>true</fmd:required>
               <fmd:preferred>false</fmd:preferred>
               <fmd:property-editor>URI</fmd:property-editor>
            </fmd:property-metadata>
            <property-metadata>
               <virtual>true</virtual>
            </property-metadata>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property><!--oracle.adf.DynamicDeclarativeComponent properties-->
      <property>
         <description>a set of client attribute names.</description>
         <property-name>clientAttributes</property-name>
         <property-class>java.util.Set</property-class>
         <property-extension>
            <property-metadata>
               <literal-only>true</literal-only>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <property>
         <description>whether a client-side component will be generated.  A component may be generated whether or not this flag is set, but if client Javascript requires the component object, this must be set to true to guarantee the component's presence.  Client component objects that are generated today by default may not be present in the future;  setting this flag is the only way to guarantee a component's presence, and clients cannot rely on implicit behavior.  However, there is a performance cost to setting this flag, so clients should avoid turning on client components unless absolutely necessary.
      </description>
         <property-name>clientComponent</property-name>
         <property-class>boolean</property-class>
         <default-value>false</default-value>
         <property-extension>
            <property-metadata>
               <required>false</required>
               <mafp:javascript-attribute-excluded>true</mafp:javascript-attribute-excluded>
            </property-metadata>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.DeclarativeComponent</component-family>
         <naming-container>true</naming-container>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <description>A UIXDialog component is an abstraction for a container component that can deliver DialogEvents, which indicate that an action has occurred
in the dialog.
    </description>
      <icon>
         <small-icon>/oracle/adfdtinternal/view/rich/metadata/icons/column.png</small-icon>
      </icon>
      <component-type>oracle.adf.Dialog</component-type>
      <component-class>oracle.adf.view.rich.component.UIXDialog</component-class><!--javax.faces.Component properties-->
      <property>
         <description>&lt;html&gt;the identifier for the component.  The identifier
must follow a subset of the syntax allowed in HTML:
&lt;ul&gt;
&lt;li&gt;Must not be a zero-length String.&lt;/li&gt;
&lt;li&gt;First character must be an ASCII letter (A-Za-z) or an underscore ('_').&lt;/li&gt;
&lt;li&gt;Subsequent characters must be an ASCII letter or digit (A-Za-z0-9), an underscore ('_'), or a dash ('-').&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;
      </description>
         <property-name>id</property-name>
         <property-class>java.lang.String</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      <property-extension><property-metadata><customization-allowed>false</customization-allowed></property-metadata></property-extension></property>
      <property>
         <description>whether the component is rendered. When set to false, no output will be
		delivered for this component (the component will not in any way be rendered,
		and cannot be made visible on the client). If you want to change a component's '
		rendered attribute from false to true
                using PPR, set the partialTrigger attribute of its parent component so the
                parent refreshes and in turn will render this component. 
      </description>
         <property-name>rendered</property-name>
         <property-class>boolean</property-class>
         <default-value>true</default-value>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <property>
         <property-name>transient</property-name>
         <property-class>boolean</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:category-id>GENERAL</fmd:category-id>
               <fmd:value-expression>PROHIBITED</fmd:value-expression>
            </fmd:property-metadata>
            <property-metadata>
               <transient>true</transient>
            </property-metadata>
         </property-extension>
      </property><!--org.apache.myfaces.trinidad.ComponentBase properties-->
      <property>
         <description>a method reference to an attribute change listener.  Attribute change events are not delivered for any programmatic change to a property.  They are only delivered when a renderer changes a property without the application's specific request.  An example of an attribute change events might include the width of a column that supported client-side resizing.</description>
         <property-name>attributeChangeListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:expert>true</fmd:expert>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property><!--oracle.adf.Dialog properties-->
      <property>
         <description>a method reference to a dialog listener method</description>
         <property-name>dialogListener</property-name>
         <property-class>javax.el.MethodExpression</property-class>
         <property-extension>
            <fmd:property-metadata>
               <fmd:preferred>true</fmd:preferred>
            </fmd:property-metadata>
            <property-metadata/>
         </property-extension>
      </property>
      <component-extension>
         <component-family>oracle.adf.Dialog</component-family>
         <renderer-type>oracle.adf.rich.Dialog</renderer-type>
         <component-metadata><customization-allowed>true</customization-allowed></component-metadata>
         <fmd:component-metadata>
            <fmd:default-property>dialogListener</fmd:default-property>
         </fmd:component-metadata>
      </component-extension>
   </component>
   <component>
      <component-type>oracle.adfinternal.RichFacetRef</component-type>
      <component-class>oracle.adfinternal.view.faces.taglib.region.IncludeTag$FacetWrapper</component-class>
   </component>
   <converter>
      <description>Converts an string, to and from java.awt.Color objects.</description>
      <display-name>Color Converter</display-name>
      <converter-id>oracle.adf.rich.Color</converter-id>
      <converter-class>oracle.adfinternal.view.faces.convert.ColorConverterWrapper</converter-class>
   </converter>
   <converter>
      <description>Converts string into java.util.Date and vice versa based on the pattern
          and style set.
    </description>
      <display-name>Date Time Converter</display-name>
      <converter-id>oracle.adf.rich.DateTime</converter-id>
      <converter-class>oracle.adfinternal.view.faces.convert.DateTimeConverterWrapper</converter-class>
   </converter>
   <converter>
      <description>Converts an string to a Number and vice versa based on the 'pattern' or the 'type' set.
    </description>
      <display-name>Number Converter</display-name>
      <converter-id>oracle.adf.rich.Number</converter-id>
      <converter-class>oracle.adfinternal.view.faces.convert.NumberConverterWrapper</converter-class>
   </converter>
   <referenced-bean>
      <description>implicit object provided by Adf Faces</description>
      <display-name>ADF Faces Context</display-name>
      <referenced-bean-name>adfFacesContext</referenced-bean-name>
      <referenced-bean-class>oracle.adf.view.rich.context.AdfFacesContext</referenced-bean-class>
   </referenced-bean>
   <render-kit>
      <render-kit-id>oracle.adf.rich.iPhone</render-kit-id>
      <render-kit-class>oracle.adfinternal.view.faces.renderkit.iPhone.IPhoneRenderKit</render-kit-class>
   </render-kit>
   <render-kit>
      <render-kit-id>oracle.adf.rich.screenReader</render-kit-id>
      <render-kit-class>oracle.adfinternal.view.faces.renderkit.screenReader.ScreenReaderRenderKit</render-kit-class>
   </render-kit>
   <render-kit>
      <render-kit-id>oracle.adf.rich</render-kit-id>
      <render-kit-class>oracle.adfinternal.view.faces.renderkit.rich.RichRenderKit</render-kit-class>
   </render-kit>
   <render-kit>
      <render-kit-id>oracle.adf.rich.server</render-kit-id>
      <render-kit-class>oracle.adfinternal.view.faces.renderkit.server.ServerRenderKit</render-kit-class>
   </render-kit>
   <lifecycle>
      <phase-listener>oracle.adfinternal.view.faces.context.RichPhaseListener</phase-listener>
      <phase-listener>
      oracle.adfinternal.view.faces.unified.context.AdfDmsFacesPhaseListener
    </phase-listener>
      <phase-listener>
      oracle.adfinternal.view.faces.monitoring.UserActivityPhaseListener
    </phase-listener>
      <phase-listener>
      oracle.adfinternal.view.faces.renderkit.rich.query.QueryRefreshPhaseListener
    </phase-listener>
   </lifecycle>
   <faces-config-extension>
      <fmd:global-metadata>
         <fmd:contract-definitions>
            <fmd:contract id="org-apache-myfaces-trinidad-head-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Head Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.HtmlHead</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-htmlframeborderlayout-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Frame Border Layout Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.component.html.HtmlFrameBorderLayout</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-htmlbody-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Body Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.HtmlBody</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-htmlframe-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Frame Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.HtmlFrame</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-htmlrowlayout-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Row Layout Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.HtmlRowLayout</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-htmlcellformat-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad HTML Cell Format Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.HtmlCellFormat</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="org-apache-myfaces-trinidad-corecolumn-holder">
          
               <fmd:display-name>Apache MyFaces Trinidad Core Column Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type org.apache.myfaces.trinidad.CoreColumn</fmd:description>
        
            </fmd:contract>
         </fmd:contract-definitions>
         <fmd:faces-taglib-definitions>
            <fmd:faces-taglib>
               <fmd:uri>http://myfaces.apache.org/trinidad</fmd:uri>
               <fmd:short-name>tr</fmd:short-name>
               <fmd:display-name>Apache Trinidad Core</fmd:display-name>
               <fmd:description/>
               <fmd:icon/>
               <fmd:tag>
                  <fmd:name>validateLength</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.Length</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDateRestriction</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.DateRestriction</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateByteLength</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.ByteLength</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDoubleRange</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.DoubleRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDateTimeRange</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.DateTimeRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateRegExp</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.RegExp</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateLongRange</fmd:name>
                  <fmd:validator-id>org.apache.myfaces.trinidad.LongRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertNumber</fmd:name>
                  <fmd:converter-id>org.apache.myfaces.trinidad.Number</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertDateTime</fmd:name>
                  <fmd:converter-id>org.apache.myfaces.trinidad.DateTime</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertColor</fmd:name>
                  <fmd:converter-id>org.apache.myfaces.trinidad.Color</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>messages</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreMessages</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Messages</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelBox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelBox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Box</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputNumberSpinbox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputNumberSpinbox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.NumberSpinbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyCheckbox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectManyCheckbox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Checkbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandNavigationItem</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreCommandNavigationItem</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.NavigationItem</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyShuttle</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectManyShuttle</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Shuttle</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>chooseDate</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreChooseDate</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Date</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>processChoiceBar</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreProcessChoiceBar</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ChoiceBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>resetButton</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreResetButton</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>media</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreMedia</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Media</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>chooseColor</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreChooseColor</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Color</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>statusIndicator</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreStatusIndicator</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.StatusIndicator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelButtonBar</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelButtonBar</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ButtonBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>image</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreImage</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Image</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelPopup</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelPopup</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Popup</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>icon</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreIcon</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Icon</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>breadCrumbs</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreBreadCrumbs</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.BreadCrumbs</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>styleSheet</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreStyleSheet</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.StyleSheet</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectBooleanRadio</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectBooleanRadio</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Radio</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>singleStepButtonBar</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSingleStepButtonBar</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ButtonBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputFile</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputFile</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.File</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputDocument</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreOutputDocument</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Document</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>separator</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSeparator</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Separator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>progressIndicator</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreProgressIndicator</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Indicator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>chart</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreChart</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Chart</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>navigationPane</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreNavigationPane</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Pane</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputFormatted</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreOutputFormatted</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Formatted</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelHorizontalLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelHorizontalLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.HorizontalLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>treeTable</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreTreeTable</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.TreeTable</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelHeader</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelHeader</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Header</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelGroupLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelGroupLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.GroupLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>page</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePage</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Page</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelRadio</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelRadio</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Radio</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelAccordion</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelAccordion</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Accordion</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOrderShuttle</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectOrderShuttle</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Shuttle</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneListbox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectOneListbox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Listbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandLink</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreCommandLink</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Link</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelPage</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelPage</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Page</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>legend</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreLegend</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Legend</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputColor</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputColor</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Color</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectItem</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectItem</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>tree</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreTree</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Tree</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>importScript</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreImportScript</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ImportScript</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputListOfValues</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputListOfValues</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Text</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goButton</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreGoButton</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputText</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreOutputText</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Text</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyListbox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectManyListbox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Listbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandButton</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreCommandButton</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelChoice</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelChoice</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Choice</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputHidden</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputHidden</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Hidden</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelTip</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelTip</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Tip</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>train</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreTrain</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Train</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>spacer</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSpacer</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Spacer</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>document</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreDocument</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Document</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>navigationTree</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreNavigationTree</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.NavigationTree</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>message</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreMessage</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Message</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelCaptionGroup</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelCaptionGroup</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.PanelCaptionGroup</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelBorderLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelBorderLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.BorderLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelList</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelList</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.List</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneChoice</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectOneChoice</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Choice</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputDate</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputDate</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Date</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetail</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreShowDetail</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ShowDetail</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>form</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreForm</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Form</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>poll</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePoll</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Poll</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetailHeader</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreShowDetailHeader</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Header</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>subform</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSubform</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Subform</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelFormLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelFormLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.FormLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetailItem</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreShowDetailItem</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Item</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goLink</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreGoLink</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Link</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectBooleanCheckbox</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectBooleanCheckbox</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Checkbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelLabelAndMessage</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelLabelAndMessage</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.LabelAndMessage</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>table</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreTable</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Table</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelSideBar</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelSideBar</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.SideBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectRangeChoiceBar</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectRangeChoiceBar</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.ChoiceBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>column</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreColumn</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Column</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputLabel</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreOutputLabel</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Label</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneRadio</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreSelectOneRadio</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Radio</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelTabbed</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelTabbed</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Tab</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputText</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CoreInputText</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Text</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelPageHeader</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.CorePanelPageHeader</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.PageHeader</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>body</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlBody</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Body</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>head</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlHead</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Head</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>html</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlHtml</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Html</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>script</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlScript</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Script</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>rowLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlRowLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.RowLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>tableLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlTableLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.TableLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>frameBorderLayout</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlFrameBorderLayout</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.FrameBorderLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>cellFormat</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlCellFormat</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.CellFormat</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>frame</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.HtmlFrame</fmd:component-type>
                  <fmd:renderer-type>org.apache.myfaces.trinidad.Frame</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>group</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.Group</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>switcher</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.Switcher</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>iterator</fmd:name>
                  <fmd:component-type>org.apache.myfaces.trinidad.Iterator</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
            </fmd:faces-taglib>
         </fmd:faces-taglib-definitions>
      </fmd:global-metadata>
   </faces-config-extension>
   <faces-config-extension>
      <fmd:global-metadata>
         <fmd:contract-definitions>
            <fmd:contract id="oracle-adf-richcolumn-holder">
          
               <fmd:display-name>Oracle ADF Rich Column Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichColumn</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richselectitem-holder">
          
               <fmd:display-name>Oracle ADF Rich Select Item Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichSelectItem</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richcarouselitem-holder">
          
               <fmd:display-name>Oracle ADF Rich Carousel Item Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichCarouselItem</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richmenu-holder">
          
               <fmd:display-name>Oracle ADF Rich Menu Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichMenu</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richnotewindow-holder">
          
               <fmd:display-name>Oracle ADF Rich Note Window Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichNoteWindow</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richpanelwindow-holder">
          
               <fmd:display-name>Oracle ADF Rich Panel Window Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichPanelWindow</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richdialog-holder">
          
               <fmd:display-name>Oracle ADF Rich Dialog Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichDialog</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richmenuitem-holder">
          
               <fmd:display-name>Oracle ADF Rich Menu Item Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichCommandMenuItem or oracle.adf.RichGoMenuItem</fmd:description>
        
            </fmd:contract>
            <fmd:contract id="oracle-adf-richnavigationitem-holder">
          
               <fmd:display-name>Oracle ADF Rich Navigation Item Holder</fmd:display-name>
          
               <fmd:description>Expects component children of type oracle.adf.RichCommandNavigationItem</fmd:description>
        
            </fmd:contract>
         </fmd:contract-definitions>
         <fmd:faces-taglib-definitions>
            <fmd:faces-taglib>
               <fmd:uri>http://xmlns.oracle.com/adf/faces</fmd:uri>
               <fmd:short-name>af</fmd:short-name>
               <fmd:display-name>ADF Faces Core</fmd:display-name>
               <fmd:description/>
               <fmd:icon/>
               <fmd:tag>
                  <fmd:name>validateLength</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.Length</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDateRestriction</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.DateRestriction</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateByteLength</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.ByteLength</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDoubleRange</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.DoubleRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateDateTimeRange</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.DateTimeRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateRegExp</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.RegExp</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>validateLongRange</fmd:name>
                  <fmd:validator-id>oracle.adf.rich.LongRange</fmd:validator-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertNumber</fmd:name>
                  <fmd:converter-id>oracle.adf.rich.Number</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertDateTime</fmd:name>
                  <fmd:converter-id>oracle.adf.rich.DateTime</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>convertColor</fmd:name>
                  <fmd:converter-id>oracle.adf.rich.Color</fmd:converter-id>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputNumberSpinbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputNumberSpinbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.NumberSpinbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>declarativeComponent</fmd:name>
                  <fmd:component-type>oracle.adf.RichDynamicDeclarativeComponent</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.DynamicDeclarativeComponent</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyCheckbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectManyCheckbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Checkbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>subform</fmd:name>
                  <fmd:component-type>oracle.adf.RichSubform</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Subform</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>chooseDate</fmd:name>
                  <fmd:component-type>oracle.adf.RichChooseDate</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Date</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>document</fmd:name>
                  <fmd:component-type>oracle.adf.RichDocument</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Document</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelFormLayout</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelFormLayout</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.FormLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelSplitter</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelSplitter</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Splitter</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>menuBar</fmd:name>
                  <fmd:component-type>oracle.adf.RichMenuBar</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.MenuBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>activeCommandToolbarButton</fmd:name>
                  <fmd:component-type>oracle.adf.RichActiveCommandToolbarButton</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ActiveToolbarButton</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelStretchLayout</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelStretchLayout</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.StretchLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandToolbarButton</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandToolbarButton</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ToolbarButton</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectBooleanRadio</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectBooleanRadio</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Radio</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputLabel</fmd:name>
                  <fmd:component-type>oracle.adf.RichOutputLabel</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Label</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputListOfValues</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputListOfValues</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ListOfValues</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelTabbed</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelTabbed</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Tab</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>navigationPane</fmd:name>
                  <fmd:component-type>oracle.adf.RichNavigationPane</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Pane</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>form</fmd:name>
                  <fmd:component-type>oracle.adf.RichForm</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Form</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>poll</fmd:name>
                  <fmd:component-type>oracle.adf.RichPoll</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Poll</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>calendar</fmd:name>
                  <fmd:component-type>oracle.adf.RichCalendar</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Calendar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyListbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectManyListbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Listbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandButton</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandButton</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelCollection</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelCollection</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.PanelCollection</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputNumberSlider</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputNumberSlider</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.NumberSlider</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetailHeader</fmd:name>
                  <fmd:component-type>oracle.adf.RichShowDetailHeader</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Header</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>train</fmd:name>
                  <fmd:component-type>oracle.adf.RichTrain</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Train</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>resetButton</fmd:name>
                  <fmd:component-type>oracle.adf.RichResetButton</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>chooseColor</fmd:name>
                  <fmd:component-type>oracle.adf.RichChooseColor</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Color</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>statusIndicator</fmd:name>
                  <fmd:component-type>oracle.adf.RichStatusIndicator</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.StatusIndicator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelAccordion</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelAccordion</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Accordion</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>region</fmd:name>
                  <fmd:component-type>oracle.adf.RichRegion</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Region</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOrderShuttle</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectOrderShuttle</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Shuttle</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>toolbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichToolbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Toolbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelLabelAndMessage</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelLabelAndMessage</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.LabelAndMessage</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>breadCrumbs</fmd:name>
                  <fmd:component-type>oracle.adf.RichBreadCrumbs</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.BreadCrumbs</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelList</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelList</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.List</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelBorderLayout</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelBorderLayout</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.BorderLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>richTextEditor</fmd:name>
                  <fmd:component-type>oracle.adf.RichTextEditor</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.RichTextEditor</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputDate</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputDate</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Date</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputColor</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputColor</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Color</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectItem</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>activeOutputText</fmd:name>
                  <fmd:component-type>oracle.adf.RichActiveOutputText</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ActiveText</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>menu</fmd:name>
                  <fmd:component-type>oracle.adf.RichMenu</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Menu</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputText</fmd:name>
                  <fmd:component-type>oracle.adf.RichOutputText</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Text</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>outputFormatted</fmd:name>
                  <fmd:component-type>oracle.adf.RichOutputFormatted</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Formatted</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>messages</fmd:name>
                  <fmd:component-type>oracle.adf.RichMessages</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Messages</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelHeader</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelHeader</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Header</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelBox</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelBox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Box</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>pageTemplate</fmd:name>
                  <fmd:component-type>oracle.adf.RichPageTemplate</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.PageTemplate</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>spacer</fmd:name>
                  <fmd:component-type>oracle.adf.RichSpacer</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Spacer</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyChoice</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectManyChoice</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Choice</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandMenuItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandMenuItem</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.MenuItem</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goImageLink</fmd:name>
                  <fmd:component-type>oracle.adf.RichGoImageLink</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ImageLink</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectBooleanCheckbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectBooleanCheckbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Checkbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>table</fmd:name>
                  <fmd:component-type>oracle.adf.RichTable</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Table</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>icon</fmd:name>
                  <fmd:component-type>oracle.adf.RichIcon</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Icon</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputComboboxListOfValues</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputComboboxListOfValues</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ComboboxListOfValues</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandLink</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandLink</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Link</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>noteWindow</fmd:name>
                  <fmd:component-type>oracle.adf.RichNoteWindow</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.NoteWindow</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandImageLink</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandImageLink</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ImageLink</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>dialog</fmd:name>
                  <fmd:component-type>oracle.adf.RichDialog</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Dialog</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>quickQuery</fmd:name>
                  <fmd:component-type>oracle.adf.RichQuickQuery</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.QuickQuery</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>toolbar</fmd:name>
                  <fmd:component-type>oracle.adf.RichToolbar</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Toolbar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>popup</fmd:name>
                  <fmd:component-type>oracle.adf.RichPopup</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Popup</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetail</fmd:name>
                  <fmd:component-type>oracle.adf.RichShowDetail</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ShowDetail</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputText</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputText</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Text</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goMenuItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichGoMenuItem</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.MenuItem</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelGroupLayout</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelGroupLayout</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.GroupLayout</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>commandNavigationItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichCommandNavigationItem</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.NavigationItem</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>carousel</fmd:name>
                  <fmd:component-type>oracle.adf.RichCarousel</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Carousel</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectManyShuttle</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectManyShuttle</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Shuttle</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>activeImage</fmd:name>
                  <fmd:component-type>oracle.adf.RichActiveImage</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ActiveImage</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>media</fmd:name>
                  <fmd:component-type>oracle.adf.RichMedia</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Media</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputRangeSlider</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputRangeSlider</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.RangeSlider</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>image</fmd:name>
                  <fmd:component-type>oracle.adf.RichImage</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Image</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>showDetailItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichShowDetailItem</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Item</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goLink</fmd:name>
                  <fmd:component-type>oracle.adf.RichGoLink</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Link</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>message</fmd:name>
                  <fmd:component-type>oracle.adf.RichMessage</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Message</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneListbox</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectOneListbox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Listbox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelWindow</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelWindow</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Window</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inlineFrame</fmd:name>
                  <fmd:component-type>oracle.adf.RichInlineFrame</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.InlineFrame</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>carouselItem</fmd:name>
                  <fmd:component-type>oracle.adf.RichCarouselItem</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.CarouselItem</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneChoice</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectOneChoice</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Choice</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>column</fmd:name>
                  <fmd:component-type>oracle.adf.RichColumn</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Column</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>decorativeBox</fmd:name>
                  <fmd:component-type>oracle.adf.RichDecorativeBox</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.DecorativeBox</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>trainButtonBar</fmd:name>
                  <fmd:component-type>oracle.adf.RichTrainButtonBar</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.TrainButtonBar</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>inputFile</fmd:name>
                  <fmd:component-type>oracle.adf.RichInputFile</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.File</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>tree</fmd:name>
                  <fmd:component-type>oracle.adf.RichTree</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Tree</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>contextInfo</fmd:name>
                  <fmd:component-type>oracle.adf.RichContextInfo</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ContextInfo</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>selectOneRadio</fmd:name>
                  <fmd:component-type>oracle.adf.RichSelectOneRadio</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Radio</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>separator</fmd:name>
                  <fmd:component-type>oracle.adf.RichSeparator</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Separator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>goButton</fmd:name>
                  <fmd:component-type>oracle.adf.RichGoButton</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Button</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>progressIndicator</fmd:name>
                  <fmd:component-type>oracle.adf.RichProgressIndicator</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.ProgressIndicator</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>query</fmd:name>
                  <fmd:component-type>oracle.adf.RichQuery</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Query</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>panelDashboard</fmd:name>
                  <fmd:component-type>oracle.adf.RichPanelDashboard</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.Dashboard</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>treeTable</fmd:name>
                  <fmd:component-type>oracle.adf.RichTreeTable</fmd:component-type>
                  <fmd:renderer-type>oracle.adf.rich.TreeTable</fmd:renderer-type>
               </fmd:tag>
               <fmd:tag>
                  <fmd:name>region</fmd:name>
                  <fmd:component-type>oracle.adf.Region</fmd:component-type>
                  <fmd:renderer-type/>
               </fmd:tag>
            </fmd:faces-taglib>
         </fmd:faces-taglib-definitions>
      </fmd:global-metadata>
   </faces-config-extension>
</faces-config>