<?xml version='1.0' encoding='utf-8'?>
<!-- Copyright (c) 2008, 2014, Oracle and/or its affiliates. 
All rights reserved.-->
<jsp:root xmlns="http://www.w3.org/1999/xhtml"
          xmlns:jsp="http://java.sun.com/JSP/Page"
          xmlns:f="http://java.sun.com/jsf/core"
          xmlns:af="http://xmlns.oracle.com/adf/faces/rich"
          version="1.2">
  <jsp:directive.page contentType="text/html;charset=utf-8"/>
  <f:view>
    <af:document title="group Demo" binding="#{templateBindings.documentComponent}"
                 smallIconSource="#{aboutBean.smallIconSource}"
                 largeIconSource="#{aboutBean.largeIconSource}" theme="dark" id="d1">
      <af:pageTemplate
        id="dmoTpl"
        viewId="#{templates.componentTemplate}">
        <f:attribute name="tagName" value="group"/>
        <f:attribute name="visualDesignName" value=""/>
        <f:attribute name="demoKind" value="component"/>
        <f:facet name="center">
          <af:panelGroupLayout layout="scroll" id="pgl1">
            <f:facet name="separator">
              <af:spacer height="10" id="s1"/>
            </f:facet>
            <af:outputText
              value="The group component is an invisible control that aggregates semantically-related children; the group itself has no associated client representation (visual or API).
  Some parent components may have special representation for groups like adding separators around the group (and may take advantage of the group's startBoundary, endBounary, and title
  attributes), but this is a special case and is not always rendered this way.
  In most cases, only the children of the group will be rendered directly to the page.
  There will be no layout applied to the children so the natural layout behavior of the underlying HTML elements will apply.
  If you require a more predictable layout, you should use a layout component such as panelGroupLayout."
                           id="ot1"/>


            <af:outputText value="The following demo shows a panelFormLayout containing:"/>
            <af:outputText value="  [ [input] [groupStart [input] [input] groupEnd] [input] ]"/>
            <af:outputText value="The group is bound to the editor. By default, panelFormLayout renders group 
  separators around groups when there are items before or after the group. You can influence the rendering of the group 
  separators by changing the groups startBoundary and endBoundary attributes to 'hide'. You can also change
  the group title attribute value."/>
            <af:spacer height="10px"/>
            <af:panelFormLayout>
              <af:group>
                <af:inputText label="input text before group"/>
              </af:group>
              <af:group binding="#{editor.component}">
                <af:inputText label="input text1 in group"/>
                <af:inputText label="input text2 in group"/>
              </af:group>
              <af:inputText label="input text after group"/>
            </af:panelFormLayout>

<!-- Older demo example with toolbar
            <af:outputText value="The following demo shows a toolbar containing:"/>
            <af:outputText value="  [ [button] [groupStart [button] [button] groupEnd] [button] ]"/>
            <af:outputText value="The group is bound to the editor. By default, toolbar renders group 
  separators around groups when there are items before or after the group.You can influence the rendering of the group 
  separators by changing the groups startBoundary and endBoundary attributes to 'hide'. The toolbar doesn't 
  do anything with the groups title attribute value."/>
            <af:spacer height="10px"/>
            <af:toolbar>
              <af:commandToolbarButton text="button before group"/>
              <af:group binding="#{editor.component}">
                <af:commandToolbarButton text="group 1 button"/>
                <af:commandToolbarButton text="group 1 button"/>
              </af:group>
              <af:commandToolbarButton text="button after group 2"/>
            </af:toolbar>  
-->

          </af:panelGroupLayout>  
        </f:facet>
      </af:pageTemplate>
    </af:document>
  </f:view>
</jsp:root>
